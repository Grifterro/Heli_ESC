
STEVAL-ESC001V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006f0c  08006f0c  00007f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  000093ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007144  08007144  000093ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007144  08007144  000093ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007148  08007148  00008148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003ec  20000000  0800714c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000093ec  2**0
                  CONTENTS
 10 .bss          00000430  200003ec  200003ec  000093ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000081c  2000081c  000093ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000093ec  2**0
                  CONTENTS, READONLY
 13 .debug_line   00033be5  00000000  00000000  0000941c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000078  00000000  00000000  0003d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0002ec82  00000000  00000000  0003d079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000065ec  00000000  00000000  0006bcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001408  00000000  00000000  000722e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90e1  00000000  00000000  000736f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000021b6  00000000  00000000  0015c7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001542b  00000000  00000000  0015e987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00028b43  00000000  00000000  00173db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0019c8f5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00003588  00000000  00000000  0019c938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003ec 	.word	0x200003ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ef4 	.word	0x08006ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003f0 	.word	0x200003f0
 80001c4:	08006ef4 	.word	0x08006ef4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800080c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f003 fc08 	bl	8003fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f006 fb53 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000806:	f000 fefd 	bl	8001604 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800080c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
 8000818:	0800714c 	.word	0x0800714c
  ldr r2, =_sbss
 800081c:	200003ec 	.word	0x200003ec
  ldr r4, =_ebss
 8000820:	2000081c 	.word	0x2000081c

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 800082c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800082e:	6940      	ldr	r0, [r0, #20]
 8000830:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000832:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000834:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000836:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800083a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800083e:	6960      	ldr	r0, [r4, #20]
 8000840:	f104 011c 	add.w	r1, r4, #28
 8000844:	462b      	mov	r3, r5
 8000846:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800084c:	4718      	bx	r3
 800084e:	bf00      	nop

08000850 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000850:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000852:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000854:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000856:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800085a:	4c1e      	ldr	r4, [pc, #120]	@ (80008d4 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800085c:	01db      	lsls	r3, r3, #7
 800085e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000862:	784a      	ldrb	r2, [r1, #1]
 8000864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000868:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800086a:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800086e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000872:	b2da      	uxtb	r2, r3
 8000874:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000878:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800087c:	5ca2      	ldrb	r2, [r4, r2]
 800087e:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000882:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000884:	5ca2      	ldrb	r2, [r4, r2]
 8000886:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 800088a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800088c:	5ca2      	ldrb	r2, [r4, r2]
 800088e:	4c12      	ldr	r4, [pc, #72]	@ (80008d8 <ASPEP_sendBeacon+0x88>)
 8000890:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000894:	5ca2      	ldrb	r2, [r4, r2]
 8000896:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800089a:	f043 0305 	orr.w	r3, r3, #5
 800089e:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80008a4:	b14b      	cbz	r3, 80008ba <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80008a6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80008a8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80008ac:	b913      	cbnz	r3, 80008b4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80008ae:	2302      	movs	r3, #2
 80008b0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80008b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008b8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008ba:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80008be:	2303      	movs	r3, #3
 80008c0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80008c4:	6301      	str	r1, [r0, #48]	@ 0x30
 80008c6:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80008c8:	2204      	movs	r2, #4
 80008ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 80008cc:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80008d0:	6940      	ldr	r0, [r0, #20]
 80008d2:	4718      	bx	r3
 80008d4:	08006f34 	.word	0x08006f34
 80008d8:	08006f24 	.word	0x08006f24

080008dc <ASPEP_sendPing>:
{
 80008dc:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 80008de:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80008e0:	f890 c048 	ldrb.w	ip, [r0, #72]	@ 0x48
    uint8_t ipID = pHandle->liid & 0xFU;
 80008e4:	f890 404b 	ldrb.w	r4, [r0, #75]	@ 0x4b
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008e8:	4d1d      	ldr	r5, [pc, #116]	@ (8000960 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 80008ea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80008ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 80008f2:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80008f6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80008fa:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 80008fe:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000902:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4c16      	ldr	r4, [pc, #88]	@ (8000964 <ASPEP_sendPing+0x88>)
 800090a:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800090e:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000912:	5ca2      	ldrb	r2, [r4, r2]
 8000914:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000918:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800091a:	5ca2      	ldrb	r2, [r4, r2]
 800091c:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000920:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000922:	5ca2      	ldrb	r2, [r4, r2]
 8000924:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000928:	5ceb      	ldrb	r3, [r5, r3]
 800092a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800092e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000932:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000934:	b143      	cbz	r3, 8000948 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000936:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000938:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800093c:	b913      	cbnz	r3, 8000944 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 800093e:	2302      	movs	r3, #2
 8000940:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000944:	bc30      	pop	{r4, r5}
 8000946:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000948:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800094c:	2303      	movs	r3, #3
 800094e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000952:	6301      	str	r1, [r0, #48]	@ 0x30
 8000954:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000956:	2204      	movs	r2, #4
 8000958:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800095a:	6940      	ldr	r0, [r0, #20]
}
 800095c:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800095e:	4718      	bx	r3
 8000960:	08006f24 	.word	0x08006f24
 8000964:	08006f34 	.word	0x08006f34

08000968 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000968:	2a0a      	cmp	r2, #10
{
 800096a:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 800096c:	d001      	beq.n	8000972 <ASPEP_getBuffer+0xa>
        result = false;
 800096e:	2000      	movs	r0, #0
}
 8000970:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000972:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000976:	2a01      	cmp	r2, #1
 8000978:	d8f9      	bhi.n	800096e <ASPEP_getBuffer+0x6>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800097a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 800097c:	f04f 0c01 	mov.w	ip, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000980:	3204      	adds	r2, #4
 8000982:	600a      	str	r2, [r1, #0]
  bool result = true;
 8000984:	4660      	mov	r0, ip
        pHandle->syncBuffer.state = writeLock;
 8000986:	f883 c02e 	strb.w	ip, [r3, #46]	@ 0x2e
 800098a:	4770      	bx	lr

0800098c <ASPEP_sendPacket>:
{
 800098c:	b538      	push	{r3, r4, r5, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800098e:	f890 404c 	ldrb.w	r4, [r0, #76]	@ 0x4c
 8000992:	2c02      	cmp	r4, #2
 8000994:	d001      	beq.n	800099a <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000996:	2002      	movs	r0, #2
}
 8000998:	bd38      	pop	{r3, r4, r5, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800099a:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 800099e:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80009a2:	f890 4054 	ldrb.w	r4, [r0, #84]	@ 0x54
 80009a6:	2c01      	cmp	r4, #1
 80009a8:	d104      	bne.n	80009b4 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80009aa:	f64f 64ca 	movw	r4, #65226	@ 0xfeca
 80009ae:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80009b0:	3202      	adds	r2, #2
 80009b2:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80009b4:	2b0a      	cmp	r3, #10
 80009b6:	d103      	bne.n	80009c0 <ASPEP_sendPacket+0x34>
        if (pSupHandle->MCP_PacketAvailable)
 80009b8:	7c04      	ldrb	r4, [r0, #16]
 80009ba:	b354      	cbz	r4, 8000a12 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80009bc:	2400      	movs	r4, #0
 80009be:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 80009c0:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80009c4:	4d27      	ldr	r5, [pc, #156]	@ (8000a64 <ASPEP_sendPacket+0xd8>)
 80009c6:	fa5f fc84 	uxtb.w	ip, r4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80009ca:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80009cc:	f815 e00c 	ldrb.w	lr, [r5, ip]
 80009d0:	f3c4 2c07 	ubfx	ip, r4, #8, #8
 80009d4:	ea8c 0c0e 	eor.w	ip, ip, lr
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80009d8:	b292      	uxth	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80009da:	f815 e00c 	ldrb.w	lr, [r5, ip]
 80009de:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80009e2:	ea8c 0c0e 	eor.w	ip, ip, lr
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80009e6:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80009ea:	f3c4 6503 	ubfx	r5, r4, #24, #4
 80009ee:	ea8c 0c05 	eor.w	ip, ip, r5
 80009f2:	4d1d      	ldr	r5, [pc, #116]	@ (8000a68 <ASPEP_sendPacket+0xdc>)
  *headerPtr |= (uint32_t)crc << 28;
 80009f4:	f815 500c 	ldrb.w	r5, [r5, ip]
 80009f8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80009fc:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a02:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8000a04:	b16c      	cbz	r4, 8000a22 <ASPEP_sendPacket+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a06:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000a08:	2b0a      	cmp	r3, #10
 8000a0a:	d004      	beq.n	8000a16 <ASPEP_sendPacket+0x8a>
      else if(ASPEP_CTRL == dataType)
 8000a0c:	b1e3      	cbz	r3, 8000a48 <ASPEP_sendPacket+0xbc>
  uint8_t result = ASPEP_OK;
 8000a0e:	2000      	movs	r0, #0
}
 8000a10:	bd38      	pop	{r3, r4, r5, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000a12:	2001      	movs	r0, #1
}
 8000a14:	bd38      	pop	{r3, r4, r5, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8000a16:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d01c      	beq.n	8000a58 <ASPEP_sendPacket+0xcc>
          result = ASPEP_BUFFER_ERROR;
 8000a1e:	2003      	movs	r0, #3
}
 8000a20:	bd38      	pop	{r3, r4, r5, pc}
      if (MCTL_SYNC == dataType)
 8000a22:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000a24:	f04f 0303 	mov.w	r3, #3
 8000a28:	bf0b      	itete	eq
 8000a2a:	f880 302e 	strbeq.w	r3, [r0, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000a2e:	f880 3024 	strbne.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a32:	f100 0328 	addeq.w	r3, r0, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000a36:	f100 0320 	addne.w	r3, r0, #32
 8000a3a:	6303      	str	r3, [r0, #48]	@ 0x30
 8000a3c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000a3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000a40:	6940      	ldr	r0, [r0, #20]
 8000a42:	3904      	subs	r1, #4
 8000a44:	4798      	blx	r3
 8000a46:	e7e2      	b.n	8000a0e <ASPEP_sendPacket+0x82>
        if (pHandle->ctrlBuffer.state != available)
 8000a48:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e6      	bne.n	8000a1e <ASPEP_sendPacket+0x92>
          pHandle->ctrlBuffer.state = pending;
 8000a50:	2302      	movs	r3, #2
 8000a52:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8000a56:	e7da      	b.n	8000a0e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000a5e:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8000a60:	e7d5      	b.n	8000a0e <ASPEP_sendPacket+0x82>
 8000a62:	bf00      	nop
 8000a64:	08006f34 	.word	0x08006f34
 8000a68:	08006f24 	.word	0x08006f24

08000a6c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000a6c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000a6e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000a72:	2b03      	cmp	r3, #3
{
 8000a74:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000a76:	d013      	beq.n	8000aa0 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000a78:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000a7e:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000a82:	2a02      	cmp	r2, #2
 8000a84:	d013      	beq.n	8000aae <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d11d      	bne.n	8000ac6 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a8a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a8e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a90:	6301      	str	r1, [r0, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a92:	2204      	movs	r2, #4
 8000a94:	6940      	ldr	r0, [r0, #20]
 8000a96:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000a9e:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000aa0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000aa4:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000aa6:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000aa8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000aac:	d10b      	bne.n	8000ac6 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000aae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ab2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ab4:	6320      	str	r0, [r4, #48]	@ 0x30
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ab6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000ab8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000aba:	6960      	ldr	r0, [r4, #20]
 8000abc:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000ac4:	bd10      	pop	{r4, pc}
      pHandle->lockBuffer = NULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8000aca:	bd10      	pop	{r4, pc}

08000acc <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000ad0:	f890 5049 	ldrb.w	r5, [r0, #73]	@ 0x49
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000ad4:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000ad6:	2300      	movs	r3, #0
{
 8000ad8:	4604      	mov	r4, r0
    *packetLength = 0;
 8000ada:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000adc:	b19d      	cbz	r5, 8000b06 <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000ade:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000ae2:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
      switch (pHandle->ASPEP_State)
 8000ae6:	2d01      	cmp	r5, #1
 8000ae8:	d04e      	beq.n	8000b88 <ASPEP_RXframeProcess+0xbc>
 8000aea:	2d02      	cmp	r5, #2
 8000aec:	d012      	beq.n	8000b14 <ASPEP_RXframeProcess+0x48>
 8000aee:	b9d5      	cbnz	r5, 8000b26 <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000af0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	d062      	beq.n	8000bbc <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d115      	bne.n	8000b26 <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000afa:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000afe:	4629      	mov	r1, r5
 8000b00:	f7ff feec 	bl	80008dc <ASPEP_sendPing>
 8000b04:	e00f      	b.n	8000b26 <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000b06:	f890 304a 	ldrb.w	r3, [r0, #74]	@ 0x4a
 8000b0a:	b9b3      	cbnz	r3, 8000b3a <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b0c:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000b0e:	4628      	mov	r0, r5
 8000b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000b14:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 8000b16:	2d05      	cmp	r5, #5
 8000b18:	f000 80d9 	beq.w	8000cce <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8000b1c:	2d06      	cmp	r5, #6
 8000b1e:	f000 8125 	beq.w	8000d6c <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000b22:	2d09      	cmp	r5, #9
 8000b24:	d03e      	beq.n	8000ba4 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b26:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b28:	6960      	ldr	r0, [r4, #20]
 8000b2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	f104 011c 	add.w	r1, r4, #28
 8000b32:	4798      	blx	r3
}
 8000b34:	4628      	mov	r0, r5
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b3a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000b3e:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000b44:	488c      	ldr	r0, [pc, #560]	@ (8000d78 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000b46:	4d8d      	ldr	r5, [pc, #564]	@ (8000d7c <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b48:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b4c:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b50:	5c82      	ldrb	r2, [r0, r2]
 8000b52:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000b56:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000b58:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000b5a:	5ceb      	ldrb	r3, [r5, r3]
 8000b5c:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000b60:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000b64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80f4 	beq.w	8000d54 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b6c:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000b6e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000b72:	b913      	cbnz	r3, 8000b7a <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8000b74:	2302      	movs	r3, #2
 8000b76:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000b7a:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000b7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000b7e:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000b80:	f884 204a 	strb.w	r2, [r4, #74]	@ 0x4a
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000b84:	4798      	blx	r3
 8000b86:	e7c1      	b.n	8000b0c <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000b88:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8000b8a:	2905      	cmp	r1, #5
 8000b8c:	d064      	beq.n	8000c58 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8000b8e:	2906      	cmp	r1, #6
 8000b90:	d1c9      	bne.n	8000b26 <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b92:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b96:	4629      	mov	r1, r5
 8000b98:	f7ff fea0 	bl	80008dc <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8000ba2:	e7c0      	b.n	8000b26 <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000ba4:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
              *packetLength = pHandle->rxLengthASPEP;
 8000ba8:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
              result = pHandle->rxBuffer;
 8000bac:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000bae:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000bb0:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000bb2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000bb6:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000bb8:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000bba:	e7b5      	b.n	8000b28 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000bbc:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bc0:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000bc4:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bc6:	f894 6054 	ldrb.w	r6, [r4, #84]	@ 0x54
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bca:	f894 7056 	ldrb.w	r7, [r4, #86]	@ 0x56
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000bce:	f894 9057 	ldrb.w	r9, [r4, #87]	@ 0x57
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000bd2:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000bd6:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bd8:	4563      	cmp	r3, ip
 8000bda:	bf28      	it	cs
 8000bdc:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bde:	42b0      	cmp	r0, r6
 8000be0:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000be2:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000be6:	bf28      	it	cs
 8000be8:	4631      	movcs	r1, r6
 8000bea:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000bee:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bf2:	45b8      	cmp	r8, r7
 8000bf4:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bf6:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bfa:	bf28      	it	cs
 8000bfc:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000bfe:	45ca      	cmp	sl, r9
 8000c00:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c02:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c06:	bf28      	it	cs
 8000c08:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c0a:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c0e:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c10:	6565      	str	r5, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c12:	d81b      	bhi.n	8000c4c <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000c14:	459c      	cmp	ip, r3
 8000c16:	d819      	bhi.n	8000c4c <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000c18:	45b8      	cmp	r8, r7
 8000c1a:	d817      	bhi.n	8000c4c <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000c1c:	45ca      	cmp	sl, r9
 8000c1e:	d815      	bhi.n	8000c4c <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000c20:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 8000c24:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	d10f      	bne.n	8000c4c <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c2c:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c2e:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c30:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c32:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c34:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000c36:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c3a:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c3c:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c3e:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000c40:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c44:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c48:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c4c:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fdfd 	bl	8000850 <ASPEP_sendBeacon>
 8000c56:	e766      	b.n	8000b26 <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c58:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c5a:	f890 c054 	ldrb.w	ip, [r0, #84]	@ 0x54
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c5e:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c60:	f890 0055 	ldrb.w	r0, [r0, #85]	@ 0x55
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c64:	f894 6056 	ldrb.w	r6, [r4, #86]	@ 0x56
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c68:	f894 e057 	ldrb.w	lr, [r4, #87]	@ 0x57
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c6c:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c70:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c72:	42a8      	cmp	r0, r5
 8000c74:	bf28      	it	cs
 8000c76:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c78:	4561      	cmp	r1, ip
 8000c7a:	460f      	mov	r7, r1
 8000c7c:	bf28      	it	cs
 8000c7e:	4667      	movcs	r7, ip
 8000c80:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c84:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c88:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c8c:	42b7      	cmp	r7, r6
 8000c8e:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c90:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c94:	bf28      	it	cs
 8000c96:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c98:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c9a:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c9e:	46c1      	mov	r9, r8
 8000ca0:	bf28      	it	cs
 8000ca2:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ca4:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ca8:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000caa:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000cac:	d80b      	bhi.n	8000cc6 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000cae:	4285      	cmp	r5, r0
 8000cb0:	d809      	bhi.n	8000cc6 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000cb2:	42b7      	cmp	r7, r6
 8000cb4:	d807      	bhi.n	8000cc6 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000cb6:	45f0      	cmp	r8, lr
 8000cb8:	d805      	bhi.n	8000cc6 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cba:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8000cbe:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d0c2      	beq.n	8000c4c <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8000ccc:	e7be      	b.n	8000c4c <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cce:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cd2:	f894 5055 	ldrb.w	r5, [r4, #85]	@ 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cd6:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cd8:	f894 e054 	ldrb.w	lr, [r4, #84]	@ 0x54
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cdc:	f894 6056 	ldrb.w	r6, [r4, #86]	@ 0x56
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ce0:	f894 8057 	ldrb.w	r8, [r4, #87]	@ 0x57
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000ce4:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000ce8:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cea:	4565      	cmp	r5, ip
 8000cec:	bf28      	it	cs
 8000cee:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cf0:	4570      	cmp	r0, lr
 8000cf2:	4607      	mov	r7, r0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	bf28      	it	cs
 8000cf8:	4677      	movcs	r7, lr
 8000cfa:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cfe:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d02:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d06:	42b7      	cmp	r7, r6
 8000d08:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d0a:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d0e:	bf28      	it	cs
 8000d10:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d12:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d14:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d18:	46ca      	mov	sl, r9
 8000d1a:	bf28      	it	cs
 8000d1c:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d1e:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d22:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d24:	6561      	str	r1, [r4, #84]	@ 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d26:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8000d2a:	d80d      	bhi.n	8000d48 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000d2c:	45ac      	cmp	ip, r5
 8000d2e:	d80b      	bhi.n	8000d48 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000d30:	42b7      	cmp	r7, r6
 8000d32:	d809      	bhi.n	8000d48 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d34:	45c1      	cmp	r9, r8
 8000d36:	d807      	bhi.n	8000d48 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d38:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8000d3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fd7f 	bl	8000850 <ASPEP_sendBeacon>
 8000d52:	e6e8      	b.n	8000b26 <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000d54:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000d5e:	6321      	str	r1, [r4, #48]	@ 0x30
 8000d60:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000d62:	2204      	movs	r2, #4
 8000d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d66:	6960      	ldr	r0, [r4, #20]
 8000d68:	4798      	blx	r3
 8000d6a:	e706      	b.n	8000b7a <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000d6c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000d70:	2101      	movs	r1, #1
 8000d72:	f7ff fdb3 	bl	80008dc <ASPEP_sendPing>
 8000d76:	e6d6      	b.n	8000b26 <ASPEP_RXframeProcess+0x5a>
 8000d78:	08006f34 	.word	0x08006f34
 8000d7c:	08006f24 	.word	0x08006f24

08000d80 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000d80:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000d82:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8000d86:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000d88:	b143      	cbz	r3, 8000d9c <ASPEP_HWDataReceivedIT+0x1c>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d000      	beq.n	8000d90 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000d8e:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000d90:	2200      	movs	r2, #0
 8000d92:	f880 204d 	strb.w	r2, [r0, #77]	@ 0x4d
        pHandle->NewPacketAvailable = true;
 8000d96:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
}
 8000d9a:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000d9c:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e1c <ASPEP_HWDataReceivedIT+0x9c>)
 8000da0:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000da8:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000db0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	b95b      	cbnz	r3, 8000dd4 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000dbc:	7f03      	ldrb	r3, [r0, #28]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8000dc2:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000dc4:	6503      	str	r3, [r0, #80]	@ 0x50
          switch (pHandle->rxPacketType)
 8000dc6:	d809      	bhi.n	8000ddc <ASPEP_HWDataReceivedIT+0x5c>
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d91f      	bls.n	8000e0c <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
}
 8000dd2:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
}
 8000dda:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d115      	bne.n	8000e0c <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000de0:	8b83      	ldrh	r3, [r0, #28]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0ef      	beq.n	8000dcc <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8000dec:	f8b0 2046 	ldrh.w	r2, [r0, #70]	@ 0x46
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d30f      	bcc.n	8000e14 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000df4:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8000df8:	6981      	ldr	r1, [r0, #24]
 8000dfa:	6940      	ldr	r0, [r0, #20]
 8000dfc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000e00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000e02:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
}
 8000e0a:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
}
 8000e12:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
}
 8000e1a:	bd10      	pop	{r4, pc}
 8000e1c:	08006f34 	.word	0x08006f34

08000e20 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8000e20:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e22:	2200      	movs	r2, #0
 8000e24:	f880 204d 	strb.w	r2, [r0, #77]	@ 0x4d
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000e28:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e2a:	6940      	ldr	r0, [r0, #20]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	311c      	adds	r1, #28
 8000e30:	4718      	bx	r3
 8000e32:	bf00      	nop

08000e34 <BADC_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000e34:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <BADC_Init+0x13c>)
     * workaround for unwanted interrupt enabling done by LL driver. */
    LL_ADC_DisableIT_AWD1(ADC4);
    LL_ADC_ClearFlag_AWD1(ADC4);
    LL_ADC_EnableInternalRegulator(ADC4);

    volatile uint32_t wait_loop_index1 = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e36:	494f      	ldr	r1, [pc, #316]	@ (8000f74 <BADC_Init+0x140>)
 8000e38:	685a      	ldr	r2, [r3, #4]
{
 8000e3a:	b510      	push	{r4, lr}
 8000e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000e40:	2480      	movs	r4, #128	@ 0x80
 8000e42:	b082      	sub	sp, #8
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000e44:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000e46:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e4e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8000e56:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000e5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e5e:	609a      	str	r2, [r3, #8]
    volatile uint32_t wait_loop_index1 = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e60:	680b      	ldr	r3, [r1, #0]
 8000e62:	4a45      	ldr	r2, [pc, #276]	@ (8000f78 <BADC_Init+0x144>)
 8000e64:	099b      	lsrs	r3, r3, #6
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	099b      	lsrs	r3, r3, #6
 8000e6c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index1 != 0UL)
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	b12b      	cbz	r3, 8000e7e <BADC_Init+0x4a>
    {
      wait_loop_index1--;
 8000e72:	9b01      	ldr	r3, [sp, #4]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
    while(wait_loop_index1 != 0UL)
 8000e78:	9b01      	ldr	r3, [sp, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f9      	bne.n	8000e72 <BADC_Init+0x3e>
  MODIFY_REG(ADCx->CR,
 8000e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f70 <BADC_Init+0x13c>)
 8000e80:	6893      	ldr	r3, [r2, #8]
 8000e82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000e86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e8e:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000e90:	6893      	ldr	r3, [r2, #8]
    }
    LL_ADC_StartCalibration(ADC4, LL_ADC_SINGLE_ENDED);
    while (1U == LL_ADC_IsCalibrationOnGoing(ADC4))
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dbfc      	blt.n	8000e90 <BADC_Init+0x5c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
 8000e9a:	fa9c f3ac 	rbit	r3, ip
  MODIFY_REG(*preg,
 8000e9e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8000ea2:	f04f 73f8 	mov.w	r3, #32505856	@ 0x1f00000
 8000ea6:	f8d1 4514 	ldr.w	r4, [r1, #1300]	@ 0x514
 8000eaa:	fa93 fea3 	rbit	lr, r3
 8000eae:	fa93 fea3 	rbit	lr, r3
 8000eb2:	f024 0407 	bic.w	r4, r4, #7
 8000eb6:	f044 0401 	orr.w	r4, r4, #1
 8000eba:	f8c1 4514 	str.w	r4, [r1, #1300]	@ 0x514
 8000ebe:	fa9c f4ac 	rbit	r4, ip
 8000ec2:	f8d1 4514 	ldr.w	r4, [r1, #1300]	@ 0x514
 8000ec6:	fa93 fea3 	rbit	lr, r3
 8000eca:	fa93 fea3 	rbit	lr, r3
 8000ece:	f024 0407 	bic.w	r4, r4, #7
 8000ed2:	f044 0401 	orr.w	r4, r4, #1
 8000ed6:	f8c1 4514 	str.w	r4, [r1, #1300]	@ 0x514
 8000eda:	fa9c fcac 	rbit	ip, ip
 8000ede:	f8d1 4514 	ldr.w	r4, [r1, #1300]	@ 0x514
 8000ee2:	fa93 fca3 	rbit	ip, r3
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f024 0307 	bic.w	r3, r4, #7
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	f8c1 3514 	str.w	r3, [r1, #1300]	@ 0x514
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000ef6:	6813      	ldr	r3, [r2, #0]
    */
    LL_ADC_SetChannelSamplingTime (ADC_U, ADC_CHANNEL_U, LL_ADC_SAMPLINGTIME_2CYCLES_5);
    LL_ADC_SetChannelSamplingTime (ADC_V, ADC_CHANNEL_V, LL_ADC_SAMPLINGTIME_2CYCLES_5);
    LL_ADC_SetChannelSamplingTime (ADC_W, ADC_CHANNEL_W, LL_ADC_SAMPLINGTIME_2CYCLES_5);

    while (0U == LL_ADC_IsActiveFlag_ADRDY(ADC4))
 8000ef8:	07da      	lsls	r2, r3, #31
 8000efa:	d409      	bmi.n	8000f10 <BADC_Init+0xdc>
  MODIFY_REG(ADCx->CR,
 8000efc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <BADC_Init+0x13c>)
 8000efe:	491f      	ldr	r1, [pc, #124]	@ (8000f7c <BADC_Init+0x148>)
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	400b      	ands	r3, r1
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	07db      	lsls	r3, r3, #31
 8000f0e:	d5f7      	bpl.n	8000f00 <BADC_Init+0xcc>
    {
      LL_ADC_Enable(ADC4);
    }

    uint16_t hMinReliableMecSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit;
    uint16_t hMaxReliableMecSpeedUnit = pHandle->_Super.hMaxReliableMecSpeedUnit;
 8000f10:	88c3      	ldrh	r3, [r0, #6]
    uint16_t hMinReliableMecSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit;
 8000f12:	8901      	ldrh	r1, [r0, #8]
    reliable speed. */
    hMinReliableMecSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed. */
    hMaxReliableMecSpeedUnit *= 2U;
 8000f14:	005b      	lsls	r3, r3, #1

    /* SW Init. */
    if (0U == hMinReliableMecSpeedUnit)
 8000f16:	2903      	cmp	r1, #3
    hMaxReliableMecSpeedUnit *= 2U;
 8000f18:	b29b      	uxth	r3, r3
    if (0U == hMinReliableMecSpeedUnit)
 8000f1a:	d91d      	bls.n	8000f58 <BADC_Init+0x124>
    {
      pHandle->MaxPeriod = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) - 1U;
    }
    else
    {
      pHandle->MaxPeriod = (uint32_t)(pHandle->_Super.speedConvFactor / ((uint32_t)hMinReliableMecSpeedUnit));
 8000f1c:	68c2      	ldr	r2, [r0, #12]
 8000f1e:	0889      	lsrs	r1, r1, #2
 8000f20:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f24:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    }

    if (0U == hMaxReliableMecSpeedUnit)
 8000f28:	b9f3      	cbnz	r3, 8000f68 <BADC_Init+0x134>
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(const TIM_TypeDef *TIMx)
{
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    {
      pHandle->MinPeriod = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) - 1U;
 8000f30:	3a01      	subs	r2, #1
      pHandle->MinPeriod = (uint32_t)(pHandle->_Super.speedConvFactor / ((uint32_t)hMaxReliableMecSpeedUnit));
    }

    pHandle->SatSpeed = hMaxReliableMecSpeedUnit;
    pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
    pHandle->IsOnSensingEnabled = false;
 8000f32:	2400      	movs	r4, #0
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f34:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f38:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
    pHandle->ZcEvents = 0U;
 8000f3c:	7404      	strb	r4, [r0, #16]
    pHandle->SatSpeed = hMaxReliableMecSpeedUnit;
 8000f3e:	f8a0 308e 	strh.w	r3, [r0, #142]	@ 0x8e
 8000f42:	680b      	ldr	r3, [r1, #0]
    pHandle->IsOnSensingEnabled = false;
 8000f44:	f880 402c 	strb.w	r4, [r0, #44]	@ 0x2c
    pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
 8000f48:	f100 021c 	add.w	r2, r0, #28
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6282      	str	r2, [r0, #40]	@ 0x28
 8000f52:	600b      	str	r3, [r1, #0]
    LL_TIM_EnableCounter(ADC_TIMER_TRIGGER);
  }
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 8000f54:	b002      	add	sp, #8
 8000f56:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
      pHandle->MaxPeriod = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) - 1U;
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    if (0U == hMaxReliableMecSpeedUnit)
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0e0      	beq.n	8000f2a <BADC_Init+0xf6>
      pHandle->MinPeriod = (uint32_t)(pHandle->_Super.speedConvFactor / ((uint32_t)hMaxReliableMecSpeedUnit));
 8000f68:	68c2      	ldr	r2, [r0, #12]
 8000f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f6e:	e7e0      	b.n	8000f32 <BADC_Init+0xfe>
 8000f70:	50000500 	.word	0x50000500
 8000f74:	200003e0 	.word	0x200003e0
 8000f78:	053e2d63 	.word	0x053e2d63
 8000f7c:	7fffffc0 	.word	0x7fffffc0

08000f80 <BADC_Clear>:
/**
  * @brief  Resets the parameter values of the component.
  * @param  pHandle: handler of the current instance of the Bemf_ADC component.
  */
__weak void BADC_Clear(Bemf_ADC_Handle_t *pHandle)
{
 8000f80:	b430      	push	{r4, r5}
  pHandle->SpeedTimerState = LFTIM_IDLE;
  pHandle->StepTime_Last = 0U;
  pHandle->ZCDetectionErrors = 0U;

  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000f82:	f890 4036 	ldrb.w	r4, [r0, #54]	@ 0x36
  for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
  {
    pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
  }

  pHandle->ElPeriodSum = (int32_t)pHandle->MaxPeriod * (int32_t)pHandle->SpeedBufferSize * pHandle->Direction;
 8000f86:	f8d0 5090 	ldr.w	r5, [r0, #144]	@ 0x90
 8000f8a:	f990 c037 	ldrsb.w	ip, [r0, #55]	@ 0x37
  pHandle->ZcEvents = 0U;
 8000f8e:	2300      	movs	r3, #0
  pHandle->SpeedTimerState = LFTIM_IDLE;
 8000f90:	2202      	movs	r2, #2
  pHandle->ZcEvents = 0U;
 8000f92:	7403      	strb	r3, [r0, #16]
  pHandle->BufferFilled = 0U;
 8000f94:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  pHandle->SpeedFIFOIdx = 0U;
 8000f98:	f8a0 308c 	strh.w	r3, [r0, #140]	@ 0x8c
  pHandle->_Super.bSpeedErrorNumber = 0U;
 8000f9c:	7003      	strb	r3, [r0, #0]
  pHandle->IsLoopClosed = false;
 8000f9e:	f8a0 3039 	strh.w	r3, [r0, #57]	@ 0x39
  pHandle->SpeedTimerState = LFTIM_IDLE;
 8000fa2:	f880 20c8 	strb.w	r2, [r0, #200]	@ 0xc8
  pHandle->StepTime_Last = 0U;
 8000fa6:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  pHandle->ZCDetectionErrors = 0U;
 8000faa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
  for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000fae:	b14c      	cbz	r4, 8000fc4 <BADC_Clear+0x44>
 8000fb0:	f100 033c 	add.w	r3, r0, #60	@ 0x3c
    pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8000fb4:	fb0c f105 	mul.w	r1, ip, r5
 8000fb8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8000fbc:	f843 1f04 	str.w	r1, [r3, #4]!
  for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d1fb      	bne.n	8000fbc <BADC_Clear+0x3c>
  pHandle->ElPeriodSum = (int32_t)pHandle->MaxPeriod * (int32_t)pHandle->SpeedBufferSize * pHandle->Direction;
 8000fc4:	fb05 f404 	mul.w	r4, r5, r4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000fc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fcc:	fb0c f404 	mul.w	r4, ip, r4
 8000fd0:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
 8000fd4:	68d3      	ldr	r3, [r2, #12]
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
  LL_TIM_EnableIT_CC1(ADC_TIMER_TRIGGER);
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 8000fda:	bc30      	pop	{r4, r5}
 8000fdc:	60d3      	str	r3, [r2, #12]
 8000fde:	4770      	bx	lr

08000fe0 <BADC_Stop>:
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <BADC_Stop+0x20>)
 8000fe2:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000fe4:	2180      	movs	r1, #128	@ 0x80
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fea:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000fec:	6011      	str	r1, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	6093      	str	r3, [r2, #8]
  LL_ADC_ClearFlag_AWD1(ADC4);

  /* Stop ADC injected conversion. */
  LL_ADC_INJ_StopConversion(ADC4);

}
 8000ffe:	4770      	bx	lr
 8001000:	50000500 	.word	0x50000500

08001004 <BADC_SetSamplingPoint>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component.
  * @param  pHandlePWMC: handler of the current instance of the PWMC component.
  * @param  BusVHandle: handler of the current instance of the Speed Control component.
  */
__weak void BADC_SetSamplingPoint(Bemf_ADC_Handle_t *pHandle, const PWMC_Handle_t *pHandlePWMC, BusVoltageSensor_Handle_t *BusVHandle)
{
 8001004:	b510      	push	{r4, lr}
  uint16_t latest_busConv = VBS_GetAvBusVoltage_d(BusVHandle);
  if (VM == pHandle->DriveMode)
  {
      if (pHandlePWMC->CntPh > pHandle->OnSensingEnThres)
      {
        uint16_t Threshold_Pwm = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8001006:	f8b2 e006 	ldrh.w	lr, [r2, #6]
  if (VM == pHandle->DriveMode)
 800100a:	f890 203b 	ldrb.w	r2, [r0, #59]	@ 0x3b
        uint16_t Threshold_Pwm = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800100e:	f8b0 c018 	ldrh.w	ip, [r0, #24]
                               + pHandle->Pwm_H_L.ThresholdCorrectFactor;
 8001012:	8b43      	ldrh	r3, [r0, #26]
  if (VM == pHandle->DriveMode)
 8001014:	b99a      	cbnz	r2, 800103e <BADC_SetSamplingPoint+0x3a>
      if (pHandlePWMC->CntPh > pHandle->OnSensingEnThres)
 8001016:	8809      	ldrh	r1, [r1, #0]
 8001018:	8dc4      	ldrh	r4, [r0, #46]	@ 0x2e
 800101a:	428c      	cmp	r4, r1
 800101c:	d224      	bcs.n	8001068 <BADC_SetSamplingPoint+0x64>
        uint16_t Threshold_Pwm = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800101e:	8a42      	ldrh	r2, [r0, #18]
 8001020:	fb0e f202 	mul.w	r2, lr, r2
 8001024:	fbb2 f2fc 	udiv	r2, r2, ip
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
        pHandle->IsOnSensingEnabled=true;
 800102c:	2101      	movs	r1, #1
        pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOn);
 800102e:	f100 021e 	add.w	r2, r0, #30
        pHandle->IsOnSensingEnabled=true;
 8001032:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
        pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOn);
 8001036:	6282      	str	r2, [r0, #40]	@ 0x28
        pHandle->pSensing_Threshold_HSMod = Threshold_Pwm;
 8001038:	8443      	strh	r3, [r0, #34]	@ 0x22
      else if (pHandlePWMC->CntPh < pHandle->OnSensingDisThres)
      {
        pHandle->IsOnSensingEnabled=false;
        pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
        pHandle->pSensing_Threshold_HSMod = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdLowPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor);
        pHandle->pSensing_Threshold_LSMod = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800103a:	8483      	strh	r3, [r0, #36]	@ 0x24
                                        + pHandle->Pwm_H_L.ThresholdCorrectFactor;
  }
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 800103c:	bd10      	pop	{r4, pc}
    pHandle->IsOnSensingEnabled=false;
 800103e:	2200      	movs	r2, #0
 8001040:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
    pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
 8001044:	f100 021c 	add.w	r2, r0, #28
 8001048:	6282      	str	r2, [r0, #40]	@ 0x28
    pHandle->pSensing_Threshold_HSMod = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdLowPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor);
 800104a:	8ac2      	ldrh	r2, [r0, #22]
 800104c:	fb0e f202 	mul.w	r2, lr, r2
 8001050:	fbb2 f2fc 	udiv	r2, r2, ip
 8001054:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->pSensing_Threshold_LSMod = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8001056:	8a82      	ldrh	r2, [r0, #20]
 8001058:	fb0e f202 	mul.w	r2, lr, r2
 800105c:	fbb2 f2fc 	udiv	r2, r2, ip
                                        + pHandle->Pwm_H_L.ThresholdCorrectFactor;
 8001060:	4413      	add	r3, r2
 8001062:	b29b      	uxth	r3, r3
        pHandle->pSensing_Threshold_LSMod = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8001064:	8483      	strh	r3, [r0, #36]	@ 0x24
}
 8001066:	bd10      	pop	{r4, pc}
      else if (pHandlePWMC->CntPh < pHandle->OnSensingDisThres)
 8001068:	8e04      	ldrh	r4, [r0, #48]	@ 0x30
 800106a:	428c      	cmp	r4, r1
 800106c:	d8e8      	bhi.n	8001040 <BADC_SetSamplingPoint+0x3c>
      else if (false == pHandle->IsOnSensingEnabled)
 800106e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8001072:	2a00      	cmp	r2, #0
 8001074:	d0e9      	beq.n	800104a <BADC_SetSamplingPoint+0x46>
        uint16_t Threshold_Pwm = (uint16_t)(pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8001076:	8a42      	ldrh	r2, [r0, #18]
 8001078:	fb0e f202 	mul.w	r2, lr, r2
 800107c:	fbb2 f2fc 	udiv	r2, r2, ip
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
        pHandle->pSensing_Threshold_HSMod = Threshold_Pwm;
 8001084:	8443      	strh	r3, [r0, #34]	@ 0x22
        pHandle->pSensing_Threshold_LSMod = Threshold_Pwm;
 8001086:	e7ed      	b.n	8001064 <BADC_SetSamplingPoint+0x60>

08001088 <BADC_IsZcDetected>:
 * @param  pHandle: handler of the current instance of the Bemf_ADC component.
 * @param  step: Current step of the 6-step sequence.
 * @retval none.
 */
__weak void BADC_IsZcDetected(Bemf_ADC_Handle_t *pHandle, uint8_t step)
{
 8001088:	b538      	push	{r3, r4, r5, lr}
    uint32_t CounterAutoreload;
    uint32_t CC_Counter = 0U;  /* for switch case default before CounterAutoreload comparison. */
    uint32_t tStepTime;
    uint32_t wCaptBuf;

    if (LFTIM_COMMUTATION == pHandle->SpeedTimerState)
 800108a:	f890 30c8 	ldrb.w	r3, [r0, #200]	@ 0xc8
 800108e:	2b01      	cmp	r3, #1
 8001090:	d000      	beq.n	8001094 <BADC_IsZcDetected+0xc>
      BADC_Stop();
    }
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 8001092:	bd38      	pop	{r3, r4, r5, pc}
      LL_ADC_DisableIT_AWD1(pADCbemf[step]);
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <BADC_IsZcDetected+0x110>)
 8001096:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800109a:	6863      	ldr	r3, [r4, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 800109c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010a4:	6063      	str	r3, [r4, #4]
 80010a6:	6a54      	ldr	r4, [r2, #36]	@ 0x24
  return (uint32_t)(READ_REG(TIMx->ARR));
 80010a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
      if (TimerSpeed_Counter < pHandle->Last_TimerSpeed_Counter)
 80010aa:	f8d0 20b0 	ldr.w	r2, [r0, #176]	@ 0xb0
         if (1 == pHandle->Direction)
 80010ae:	f990 c037 	ldrsb.w	ip, [r0, #55]	@ 0x37
      if (TimerSpeed_Counter < pHandle->Last_TimerSpeed_Counter)
 80010b2:	42a2      	cmp	r2, r4
        tStepTime = CounterAutoreload - (pHandle->Last_TimerSpeed_Counter - TimerSpeed_Counter);
 80010b4:	bf82      	ittt	hi
 80010b6:	191b      	addhi	r3, r3, r4
 80010b8:	3301      	addhi	r3, #1
 80010ba:	1a9a      	subhi	r2, r3, r2
      pHandle->ZcEvents++;
 80010bc:	7c03      	ldrb	r3, [r0, #16]
        tStepTime = TimerSpeed_Counter - pHandle->Last_TimerSpeed_Counter;
 80010be:	bf98      	it	ls
 80010c0:	1aa2      	subls	r2, r4, r2
      pHandle->ZcEvents++;
 80010c2:	3301      	adds	r3, #1
      if (0U == (step & 0x1U))
 80010c4:	07c9      	lsls	r1, r1, #31
      pHandle->ZcEvents++;
 80010c6:	7403      	strb	r3, [r0, #16]
          if (2U == pHandle->ComputationDelay)
 80010c8:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      if (0U == (step & 0x1U))
 80010cc:	d554      	bpl.n	8001178 <BADC_IsZcDetected+0xf0>
        if (1 == pHandle->Direction)
 80010ce:	f1bc 0f01 	cmp.w	ip, #1
 80010d2:	d054      	beq.n	800117e <BADC_IsZcDetected+0xf6>
          if (2U == pHandle->ComputationDelay)
 80010d4:	2b02      	cmp	r3, #2
            tStepTime = pHandle->StepTime_Last;
 80010d6:	bf08      	it	eq
 80010d8:	f8d0 10ac 	ldreq.w	r1, [r0, #172]	@ 0xac
          CC_Counter = ((uint32_t)((pHandle->ZcFalling2CommDelay) * tStepTime)) >> 9;
 80010dc:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
          pHandle->StepTime_Down =  tStepTime;
 80010de:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
            tStepTime = pHandle->StepTime_Last;
 80010e2:	bf18      	it	ne
 80010e4:	4611      	movne	r1, r2
          CC_Counter = ((uint32_t)((pHandle->ZcFalling2CommDelay) * tStepTime)) >> 9;
 80010e6:	fb01 f303 	mul.w	r3, r1, r3
 80010ea:	0a5b      	lsrs	r3, r3, #9
      if (true == pHandle->IsLoopClosed)
 80010ec:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
          pHandle->StepTime_Last = pHandle->StepTime_Up;
 80010f0:	f8c0 20ac 	str.w	r2, [r0, #172]	@ 0xac
      if (true == pHandle->IsLoopClosed)
 80010f4:	b159      	cbz	r1, 800110e <BADC_IsZcDetected+0x86>
 80010f6:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 80010fa:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
  return (uint32_t)(READ_REG(TIMx->CNT));
 80010fc:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
  }
  else
  {
#endif
  uint32_t CC_Counter;
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) + 1U;
 80010fe:	3101      	adds	r1, #1

  CC_Counter = LL_TIM_GetCounter(ADC_TIMER_TRIGGER);
  CC_Counter += SpeedTimerCounter;
 8001100:	442b      	add	r3, r5
  if (CC_Counter >= CounterAutoreload)
 8001102:	4299      	cmp	r1, r3
  {
    CC_Counter -= CounterAutoreload;
 8001104:	bf98      	it	ls
 8001106:	1a5b      	subls	r3, r3, r1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001108:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800110c:	634b      	str	r3, [r1, #52]	@ 0x34
      if (wCaptBuf < pHandle->MinPeriod)
 800110e:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8001112:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
      if (wCaptBuf < pHandle->MinPeriod)
 8001116:	4293      	cmp	r3, r2
 8001118:	d81f      	bhi.n	800115a <BADC_IsZcDetected+0xd2>
        pHandle->SpeedFIFOIdx++;
 800111a:	f8b0 308c 	ldrh.w	r3, [r0, #140]	@ 0x8c
 800111e:	3301      	adds	r3, #1
 8001120:	b29b      	uxth	r3, r3
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8001122:	42ab      	cmp	r3, r5
        pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator. */
 8001124:	bf12      	itee	ne
 8001126:	469e      	movne	lr, r3
 8001128:	f04f 0e00 	moveq.w	lr, #0
          pHandle->SpeedFIFOIdx = 0U;
 800112c:	4673      	moveq	r3, lr
 800112e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001132:	f8a0 308c 	strh.w	r3, [r0, #140]	@ 0x8c
        pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator. */
 8001136:	f8de 1040 	ldr.w	r1, [lr, #64]	@ 0x40
 800113a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800113e:	1a59      	subs	r1, r3, r1
        if (wCaptBuf >= pHandle->MaxPeriod)
 8001140:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8001144:	4293      	cmp	r3, r2
          pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8001146:	bf94      	ite	ls
 8001148:	fb0c f303 	mulls.w	r3, ip, r3
          pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 800114c:	fb0c f302 	mulhi.w	r3, ip, r2
 8001150:	f8ce 3040 	str.w	r3, [lr, #64]	@ 0x40
        pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 8001154:	440b      	add	r3, r1
 8001156:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800115a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800115e:	42ab      	cmp	r3, r5
 8001160:	d205      	bcs.n	800116e <BADC_IsZcDetected+0xe6>
        pHandle->BufferFilled++;
 8001162:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001166:	3301      	adds	r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
      pHandle->Last_TimerSpeed_Counter = TimerSpeed_Counter;
 800116e:	f8c0 40b0 	str.w	r4, [r0, #176]	@ 0xb0
      BADC_Stop();
 8001172:	f7ff ff35 	bl	8000fe0 <BADC_Stop>
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}
         if (1 == pHandle->Direction)
 8001178:	f1bc 0f01 	cmp.w	ip, #1
 800117c:	d0aa      	beq.n	80010d4 <BADC_IsZcDetected+0x4c>
          if (2U == pHandle->ComputationDelay)
 800117e:	2b02      	cmp	r3, #2
            tStepTime = pHandle->StepTime_Last;
 8001180:	bf08      	it	eq
 8001182:	f8d0 10ac 	ldreq.w	r1, [r0, #172]	@ 0xac
          CC_Counter = ((uint32_t)((pHandle->ZcRising2CommDelay) * tStepTime)) >> 9;
 8001186:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
           pHandle->StepTime_Up =  tStepTime;
 8001188:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4
            tStepTime = pHandle->StepTime_Last;
 800118c:	bf18      	it	ne
 800118e:	4611      	movne	r1, r2
          CC_Counter = ((uint32_t)((pHandle->ZcRising2CommDelay) * tStepTime)) >> 9;
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	0a5b      	lsrs	r3, r3, #9
          pHandle->StepTime_Last = pHandle->StepTime_Up;
 8001196:	e7a9      	b.n	80010ec <BADC_IsZcDetected+0x64>
 8001198:	08007034 	.word	0x08007034

0800119c <BADC_CalcAvrgMecSpeedUnit>:
    if (pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] < 0)
 800119c:	f8b0 308c 	ldrh.w	r3, [r0, #140]	@ 0x8c
      if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) || (false == pHandle->IsLoopClosed))
 80011a0:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
{
 80011a4:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] < 0)
 80011a6:	3310      	adds	r3, #16
{
 80011a8:	4604      	mov	r4, r0
    if (pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] < 0)
 80011aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    int16_t MecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80011ae:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 80011b2:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
    if (wCaptBuf < pHandle->MinPeriod)
 80011b6:	f8d4 6094 	ldr.w	r6, [r4, #148]	@ 0x94
      wCaptBuf = (uint32_t) (- pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]);
 80011ba:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80011be:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    if (wCaptBuf < pHandle->MinPeriod)
 80011c2:	4286      	cmp	r6, r0
 80011c4:	d908      	bls.n	80011d8 <BADC_CalcAvrgMecSpeedUnit+0x3c>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 80011c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
        MecSpeedUnit = 0;
 80011ca:	4293      	cmp	r3, r2
 80011cc:	bf38      	it	cc
 80011ce:	2500      	movcc	r5, #0
    if (true == pHandle->IsLoopClosed)
 80011d0:	b961      	cbnz	r1, 80011ec <BADC_CalcAvrgMecSpeedUnit+0x50>
  bool bReliability = true;
 80011d2:	2001      	movs	r0, #1
    pHandle->_Super.hAvrMecSpeedUnit = MecSpeedUnit;
 80011d4:	80a5      	strh	r5, [r4, #4]
}
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
      if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) || (false == pHandle->IsLoopClosed))
 80011d8:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
        MecSpeedUnit = (int16_t)((int32_t)pHandle->_Super.speedConvFactor /
 80011dc:	68e5      	ldr	r5, [r4, #12]
      if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) || (false == pHandle->IsLoopClosed))
 80011de:	4290      	cmp	r0, r2
 80011e0:	d20a      	bcs.n	80011f8 <BADC_CalcAvrgMecSpeedUnit+0x5c>
        MecSpeedUnit = (int16_t)(((int32_t)pHandle->_Super.speedConvFactor) / pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]);
 80011e2:	fb95 f5f3 	sdiv	r5, r5, r3
 80011e6:	b22d      	sxth	r5, r5
    if (true == pHandle->IsLoopClosed)
 80011e8:	2900      	cmp	r1, #0
 80011ea:	d0f2      	beq.n	80011d2 <BADC_CalcAvrgMecSpeedUnit+0x36>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, MecSpeedUnit);
 80011ec:	4629      	mov	r1, r5
 80011ee:	4620      	mov	r0, r4
 80011f0:	f005 fe32 	bl	8006e58 <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = MecSpeedUnit;
 80011f4:	80a5      	strh	r5, [r4, #4]
}
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
      if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) || (false == pHandle->IsLoopClosed))
 80011f8:	b929      	cbnz	r1, 8001206 <BADC_CalcAvrgMecSpeedUnit+0x6a>
        MecSpeedUnit = (int16_t)(((int32_t)pHandle->_Super.speedConvFactor) / pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]);
 80011fa:	fb95 f5f3 	sdiv	r5, r5, r3
 80011fe:	b22d      	sxth	r5, r5
  bool bReliability = true;
 8001200:	2001      	movs	r0, #1
    pHandle->_Super.hAvrMecSpeedUnit = MecSpeedUnit;
 8001202:	80a5      	strh	r5, [r4, #4]
}
 8001204:	bd70      	pop	{r4, r5, r6, pc}
                       (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value. */
 8001206:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800120a:	fb93 f3f2 	sdiv	r3, r3, r2
        MecSpeedUnit = (int16_t)((int32_t)pHandle->_Super.speedConvFactor /
 800120e:	fb95 f5f3 	sdiv	r5, r5, r3
 8001212:	b22d      	sxth	r5, r5
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, MecSpeedUnit);
 8001214:	4629      	mov	r1, r5
 8001216:	4620      	mov	r0, r4
 8001218:	f005 fe1e 	bl	8006e58 <SPD_IsMecSpeedReliable>
 800121c:	e7ea      	b.n	80011f4 <BADC_CalcAvrgMecSpeedUnit+0x58>
 800121e:	bf00      	nop

08001220 <BADC_SetDirection>:
    pHandle->Direction = direction;
 8001220:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <BADC_SelectAdcChannel>:
{
 8001228:	b530      	push	{r4, r5, lr}
 800122a:	b087      	sub	sp, #28
  LL_ADC_INJ_SetSequencerRanks(pADCbemf[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]));
 800122c:	ab06      	add	r3, sp, #24
 800122e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  uint32_t pADCbemfChannel[6] = {ADC_CHANNEL_W, ADC_CHANNEL_V, ADC_CHANNEL_U,
 8001232:	4d26      	ldr	r5, [pc, #152]	@ (80012cc <BADC_SelectAdcChannel+0xa4>)
  LL_ADC_INJ_SetSequencerRanks(pADCbemf[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]));
 8001234:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <BADC_SelectAdcChannel+0xa8>)
 8001236:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  uint32_t pADCbemfChannel[6] = {ADC_CHANNEL_W, ADC_CHANNEL_V, ADC_CHANNEL_U,
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	46ec      	mov	ip, sp
 800123e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001242:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001246:	e88c 0003 	stmia.w	ip, {r0, r1}
  LL_ADC_INJ_SetSequencerRanks(pADCbemf[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]));
 800124a:	f85e 2c18 	ldr.w	r2, [lr, #-24]
 800124e:	2302      	movs	r3, #2
 8001250:	2a09      	cmp	r2, #9
 8001252:	fa03 f302 	lsl.w	r3, r3, r2
 8001256:	d821      	bhi.n	800129c <BADC_SelectAdcChannel+0x74>
  MODIFY_REG(ADCx->JSQR,
 8001258:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800125a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800125e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001262:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001266:	0e98      	lsrs	r0, r3, #26
 8001268:	f421 52f8 	bic.w	r2, r1, #7936	@ 0x1f00
                                  __LL_ADC_ANALOGWD_CHANNEL_GROUP(__LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]),LL_ADC_GROUP_INJECTED));
 800126c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8001270:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	64e2      	str	r2, [r4, #76]	@ 0x4c
  LL_ADC_SetAnalogWDMonitChannels(pADCbemf[step], LL_ADC_AWD1,
 800127a:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 800127e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001282:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(*preg,
 8001286:	68e2      	ldr	r2, [r4, #12]
 8001288:	4912      	ldr	r1, [pc, #72]	@ (80012d4 <BADC_SelectAdcChannel+0xac>)
 800128a:	f022 42fb 	bic.w	r2, r2, #2105540608	@ 0x7d800000
 800128e:	400b      	ands	r3, r1
 8001290:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8001294:	431a      	orrs	r2, r3
 8001296:	60e2      	str	r2, [r4, #12]
}
 8001298:	b007      	add	sp, #28
 800129a:	bd30      	pop	{r4, r5, pc}
  LL_ADC_INJ_SetSequencerRanks(pADCbemf[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]));
 800129c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80012a0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80012a4:	f1a1 021e 	sub.w	r2, r1, #30
 80012a8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  MODIFY_REG(ADCx->JSQR,
 80012ac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80012ae:	0c9a      	lsrs	r2, r3, #18
 80012b0:	f402 52f8 	and.w	r2, r2, #7936	@ 0x1f00
 80012b4:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
                                  __LL_ADC_ANALOGWD_CHANNEL_GROUP(__LL_ADC_DECIMAL_NB_TO_CHANNEL(pADCbemfChannel[step]),LL_ADC_GROUP_INJECTED));
 80012b8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80012bc:	430a      	orrs	r2, r1
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	64e2      	str	r2, [r4, #76]	@ 0x4c
  LL_ADC_SetAnalogWDMonitChannels(pADCbemf[step], LL_ADC_AWD1,
 80012c4:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80012c8:	e7d9      	b.n	800127e <BADC_SelectAdcChannel+0x56>
 80012ca:	bf00      	nop
 80012cc:	08006f0c 	.word	0x08006f0c
 80012d0:	08007034 	.word	0x08007034
 80012d4:	7dc00000 	.word	0x7dc00000

080012d8 <BADC_Start>:
  LL_ADC_DisableIT_AWD1(pADCbemf[step]);
 80012d8:	4b43      	ldr	r3, [pc, #268]	@ (80013e8 <BADC_Start+0x110>)
{
 80012da:	b510      	push	{r4, lr}
  LL_ADC_DisableIT_AWD1(pADCbemf[step]);
 80012dc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012e6:	6063      	str	r3, [r4, #4]
  if (1U == LSModArray[step])
 80012e8:	5c53      	ldrb	r3, [r2, r1]
    if (1 == pHandle->Direction)
 80012ea:	f990 2037 	ldrsb.w	r2, [r0, #55]	@ 0x37
  if (1U == LSModArray[step])
 80012ee:	2b01      	cmp	r3, #1
    Bemf_Threshold = pHandle->pSensing_Threshold_LSMod;
 80012f0:	bf0c      	ite	eq
 80012f2:	8c83      	ldrheq	r3, [r0, #36]	@ 0x24
    Bemf_Threshold = pHandle->pSensing_Threshold_HSMod;
 80012f4:	8c43      	ldrhne	r3, [r0, #34]	@ 0x22
  if (0U == (step & 0x1U))
 80012f6:	07c8      	lsls	r0, r1, #31
      LL_ADC_SetAnalogWDThresholds(pADCbemf[step], LL_ADC_AWD1, LL_ADC_AWD_THRESHOLD_LOW, ((uint32_t)Bemf_Threshold >> 4U));
 80012f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
  if (0U == (step & 0x1U))
 80012fc:	d42c      	bmi.n	8001358 <BADC_Start+0x80>
    if (1 == pHandle->Direction)
 80012fe:	2a01      	cmp	r2, #1
 8001300:	d04e      	beq.n	80013a0 <BADC_Start+0xc8>
 8001302:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001306:	fa92 f0a2 	rbit	r0, r2
  MODIFY_REG(*preg,
 800130a:	6a20      	ldr	r0, [r4, #32]
 800130c:	f640 7cff 	movw	ip, #4095	@ 0xfff
 8001310:	f36f 000b 	bfc	r0, #0, #12
 8001314:	fa9c fcac 	rbit	ip, ip
 8001318:	6220      	str	r0, [r4, #32]
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	4a33      	ldr	r2, [pc, #204]	@ (80013ec <BADC_Start+0x114>)
 8001320:	6a20      	ldr	r0, [r4, #32]
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	f36f 401b 	bfc	r0, #16, #12
 800132e:	4093      	lsls	r3, r2
 8001330:	4303      	orrs	r3, r0
 8001332:	6223      	str	r3, [r4, #32]
  BADC_SelectAdcChannel(step);
 8001334:	4608      	mov	r0, r1
 8001336:	f7ff ff77 	bl	8001228 <BADC_SelectAdcChannel>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	6023      	str	r3, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001344:	6063      	str	r3, [r4, #4]
  MODIFY_REG(ADCx->CR,
 8001346:	68a3      	ldr	r3, [r4, #8]
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800134c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	60a3      	str	r3, [r4, #8]
}
 8001356:	bd10      	pop	{r4, pc}
    if (1 == pHandle->Direction)
 8001358:	2a01      	cmp	r2, #1
 800135a:	d0d2      	beq.n	8001302 <BADC_Start+0x2a>
 800135c:	f44f 1e40 	mov.w	lr, #3145728	@ 0x300000
 8001360:	fa9e f2ae 	rbit	r2, lr
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <BADC_Start+0x114>)
  MODIFY_REG(*preg,
 8001366:	6a20      	ldr	r0, [r4, #32]
 8001368:	fa92 f2a2 	rbit	r2, r2
 800136c:	f020 6c7f 	bic.w	ip, r0, #267386880	@ 0xff00000
 8001370:	fab2 f282 	clz	r2, r2
 8001374:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001378:	f42c 2c70 	bic.w	ip, ip, #983040	@ 0xf0000
 800137c:	fa00 f202 	lsl.w	r2, r0, r2
 8001380:	ea4c 0202 	orr.w	r2, ip, r2
 8001384:	6222      	str	r2, [r4, #32]
 8001386:	fa9e feae 	rbit	lr, lr
 800138a:	6a22      	ldr	r2, [r4, #32]
 800138c:	fa90 f0a0 	rbit	r0, r0
 8001390:	fab0 f080 	clz	r0, r0
 8001394:	f36f 020b 	bfc	r2, #0, #12
 8001398:	4083      	lsls	r3, r0
 800139a:	4313      	orrs	r3, r2
 800139c:	6223      	str	r3, [r4, #32]
}
 800139e:	e7c9      	b.n	8001334 <BADC_Start+0x5c>
 80013a0:	f44f 1e40 	mov.w	lr, #3145728	@ 0x300000
 80013a4:	fa9e f2ae 	rbit	r2, lr
 80013a8:	4810      	ldr	r0, [pc, #64]	@ (80013ec <BADC_Start+0x114>)
  MODIFY_REG(*preg,
 80013aa:	6a22      	ldr	r2, [r4, #32]
 80013ac:	fa90 f0a0 	rbit	r0, r0
 80013b0:	f022 6c7f 	bic.w	ip, r2, #267386880	@ 0xff00000
 80013b4:	fab0 f080 	clz	r0, r0
 80013b8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80013bc:	f42c 2c70 	bic.w	ip, ip, #983040	@ 0xf0000
 80013c0:	fa02 f000 	lsl.w	r0, r2, r0
 80013c4:	ea4c 0000 	orr.w	r0, ip, r0
 80013c8:	6220      	str	r0, [r4, #32]
 80013ca:	fa9e feae 	rbit	lr, lr
 80013ce:	6a20      	ldr	r0, [r4, #32]
 80013d0:	fa92 f2a2 	rbit	r2, r2
 80013d4:	fab2 f282 	clz	r2, r2
 80013d8:	f36f 000b 	bfc	r0, #0, #12
 80013dc:	fa03 f202 	lsl.w	r2, r3, r2
 80013e0:	4302      	orrs	r2, r0
 80013e2:	6222      	str	r2, [r4, #32]
}
 80013e4:	e7a6      	b.n	8001334 <BADC_Start+0x5c>
 80013e6:	bf00      	nop
 80013e8:	08007034 	.word	0x08007034
 80013ec:	0fff0000 	.word	0x0fff0000

080013f0 <BADC_StepChangeEvent>:
  if (false == pHandle->IsLoopClosed)
 80013f0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
    tempReg = LL_TIM_GetCounter(ADC_TIMER_TRIGGER) + pHandle->DemagCounterThreshold;
 80013f6:	f8d0 50b4 	ldr.w	r5, [r0, #180]	@ 0xb4
{
 80013fa:	4604      	mov	r4, r0
  if (false == pHandle->IsLoopClosed)
 80013fc:	b9cb      	cbnz	r3, 8001432 <BADC_StepChangeEvent+0x42>
  return (uint32_t)(READ_REG(TIMx->CNT));
 80013fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tempReg = LL_TIM_GetCounter(ADC_TIMER_TRIGGER) + pHandle->DemagCounterThreshold;
 8001404:	441d      	add	r5, r3
  if (true == pHandle->RequestLoopClosed)
 8001406:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 800140a:	b113      	cbz	r3, 8001412 <BADC_StepChangeEvent+0x22>
    pHandle->IsLoopClosed = true;
 800140c:	2301      	movs	r3, #1
 800140e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001416:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  BADC_Stop();
 8001418:	f7ff fde2 	bl	8000fe0 <BADC_Stop>
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) + 1U;
 800141c:	3601      	adds	r6, #1
  pHandle->SpeedTimerState = LFTIM_DEMAGNETIZATION;
 800141e:	2300      	movs	r3, #0
 8001420:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
  if (tempReg >= CounterAutoreload)
 8001424:	42b5      	cmp	r5, r6
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    tempReg -= CounterAutoreload;
 800142a:	bf28      	it	cs
 800142c:	1bad      	subcs	r5, r5, r6
 800142e:	635d      	str	r5, [r3, #52]	@ 0x34
}
 8001430:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8001432:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tempReg = LL_TIM_OC_GetCompareCH1(ADC_TIMER_TRIGGER) + pHandle->DemagCounterThreshold;
 8001438:	441d      	add	r5, r3
 800143a:	e7e4      	b.n	8001406 <BADC_StepChangeEvent+0x16>

0800143c <BADC_CalcRevUpDemagTime>:
  if (tempRevUpSpeed < 0)
 800143c:	2900      	cmp	r1, #0
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800143e:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
  if (tempRevUpSpeed < 0)
 8001442:	db03      	blt.n	800144c <BADC_CalcRevUpDemagTime+0x10>
  if (0 == tempRevUpSpeed)
 8001444:	d104      	bne.n	8001450 <BADC_CalcRevUpDemagTime+0x14>
 8001446:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
}
 800144a:	4770      	bx	lr
    tempRevUpSpeed = - tempRevUpSpeed;
 800144c:	4249      	negs	r1, r1
 800144e:	b209      	sxth	r1, r1
    pHandle->DemagCounterThreshold = (pHandle->DemagParams.RevUpDemagSpeedConv / (uint32_t)tempRevUpSpeed);
 8001450:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 8001454:	fbb2 f2f1 	udiv	r2, r2, r1
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf38      	it	cc
 800145c:	4613      	movcc	r3, r2
 800145e:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
}
 8001462:	4770      	bx	lr

08001464 <BADC_CalcRunDemagTime>:
  hSpeed = pHandle->_Super.hAvrMecSpeedUnit;
 8001464:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  if (hSpeed < (int16_t)pHandle->DemagParams.DemagMinimumSpeedUnit)
 8001468:	f9b0 10b8 	ldrsh.w	r1, [r0, #184]	@ 0xb8
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 800146c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
  if (hSpeed < 0)
 8001470:	2b00      	cmp	r3, #0
    hSpeed = - hSpeed;
 8001472:	bfbc      	itt	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	b21b      	sxthlt	r3, r3
  if (hSpeed < (int16_t)pHandle->DemagParams.DemagMinimumSpeedUnit)
 8001478:	4299      	cmp	r1, r3
 800147a:	dd06      	ble.n	800148a <BADC_CalcRunDemagTime+0x26>
    pHandle->DemagCounterThreshold = (pHandle->DemagParams.RunDemagSpeedConv / (uint32_t)hSpeed);
 800147c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	@ 0xc0
 8001480:	fbb1 f1f3 	udiv	r1, r1, r3
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8001484:	428a      	cmp	r2, r1
 8001486:	bf38      	it	cc
 8001488:	460a      	movcc	r2, r1
      pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 800148a:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
}
 800148e:	4770      	bx	lr

08001490 <BADC_SetLoopClosed>:
  pHandle->RequestLoopClosed=true;
 8001490:	2301      	movs	r3, #1
 8001492:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
}
 8001496:	4770      	bx	lr

08001498 <BADC_SetSpeedTimer>:
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_REG(TIMx->CNT));
 800149e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(ADC_TIMER_TRIGGER) + 1U;
 80014a0:	3301      	adds	r3, #1
  CC_Counter += SpeedTimerCounter;
 80014a2:	4411      	add	r1, r2
  if (CC_Counter >= CounterAutoreload)
 80014a4:	428b      	cmp	r3, r1
    CC_Counter -= CounterAutoreload;
 80014a6:	bf98      	it	ls
 80014a8:	1ac9      	subls	r1, r1, r3
  WRITE_REG(TIMx->CCR1, CompareValue);
 80014aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ae:	6359      	str	r1, [r3, #52]	@ 0x34
  }
  LL_TIM_OC_SetCompareCH1(ADC_TIMER_TRIGGER, CC_Counter);
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <BADC_CheckDetectionErrors>:
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  */
bool BADC_CheckDetectionErrors(Bemf_ADC_Handle_t *pHandle)
{
  bool retVal = false;
  uint32_t TimerCC =   LL_TIM_OC_GetCompareCH1(ADC_TIMER_TRIGGER);
  if (TimerCC == pHandle->LastOCCounter)
 80014b8:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 80014bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  {
    pHandle->ZCDetectionErrors = pHandle->ZCDetectionErrors + 10;
 80014be:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
  if (TimerCC == pHandle->LastOCCounter)
 80014c2:	4291      	cmp	r1, r2
 80014c4:	d00e      	beq.n	80014e4 <BADC_CheckDetectionErrors+0x30>
  }
  else
  {
    if (pHandle->ZCDetectionErrors > 0)
 80014c6:	b943      	cbnz	r3, 80014da <BADC_CheckDetectionErrors+0x26>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->LastOCCounter = TimerCC;
 80014c8:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  }
  if ( pHandle->ZCDetectionErrors >= pHandle->MaxZCDetectionErrors)
 80014cc:	f890 0099 	ldrb.w	r0, [r0, #153]	@ 0x99
  {
    /* Nothing to do */
  }

  return retVal;
}
 80014d0:	4298      	cmp	r0, r3
 80014d2:	bf8c      	ite	hi
 80014d4:	2000      	movhi	r0, #0
 80014d6:	2001      	movls	r0, #1
 80014d8:	4770      	bx	lr
      pHandle->ZCDetectionErrors--;
 80014da:	3b01      	subs	r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80014e2:	e7f1      	b.n	80014c8 <BADC_CheckDetectionErrors+0x14>
    pHandle->ZCDetectionErrors = pHandle->ZCDetectionErrors + 10;
 80014e4:	330a      	adds	r3, #10
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80014ec:	e7ee      	b.n	80014cc <BADC_CheckDetectionErrors+0x18>
 80014ee:	bf00      	nop

080014f0 <BADC_SetBemfSensorlessParam>:
    /* Nothing to do. */
  }
  else
  {
#endif
  pHandle->Pwm_H_L.AdcThresholdPwmPerc = BemfAdcConfig->AdcThresholdPwmPerc;
 80014f0:	f8d1 c000 	ldr.w	ip, [r1]
{
 80014f4:	b500      	push	{lr}
  pHandle->Pwm_H_L.AdcThresholdPwmPerc = BemfAdcConfig->AdcThresholdPwmPerc;
 80014f6:	f8c0 c012 	str.w	ip, [r0, #18]
  pHandle->Pwm_H_L.AdcThresholdHighPerc = BemfAdcConfig->AdcThresholdHighPerc;
  pHandle->Pwm_H_L.AdcThresholdLowPerc = BemfAdcConfig->AdcThresholdLowPerc;
 80014fa:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 80014fe:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->Pwm_H_L.SamplingPointOff = BemfAdcConfig->SamplingPointOff;
 8001502:	f8d1 100a 	ldr.w	r1, [r1, #10]
 8001506:	61c1      	str	r1, [r0, #28]
  pHandle->Pwm_H_L.SamplingPointOn = BemfAdcConfig->SamplingPointOn;
  pHandle->ZcRising2CommDelay = BemfRegIntParam->ZcRising2CommDelay;
  pHandle->ZcFalling2CommDelay = BemfRegIntParam->ZcFalling2CommDelay;
  pHandle->DemagParams.DemagMinimumSpeedUnit = BemfAdcDemagConfig->DemagMinimumSpeedUnit;
  pHandle->DemagParams.DemagMinimumThreshold = BemfAdcDemagConfig->DemagMinimumThreshold;
  pHandle->OnSensingEnThres = BemfRegIntParam->OnSensingEnThres;
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  pHandle->DemagParams.DemagMinimumSpeedUnit = BemfAdcDemagConfig->DemagMinimumSpeedUnit;
 800150e:	f8b2 e000 	ldrh.w	lr, [r2]
  pHandle->DemagParams.DemagMinimumThreshold = BemfAdcDemagConfig->DemagMinimumThreshold;
 8001512:	68d2      	ldr	r2, [r2, #12]
  pHandle->OnSensingEnThres = BemfRegIntParam->OnSensingEnThres;
 8001514:	f8c0 c02e 	str.w	ip, [r0, #46]	@ 0x2e
 8001518:	f8c0 1032 	str.w	r1, [r0, #50]	@ 0x32
  pHandle->OnSensingDisThres = BemfRegIntParam->OnSensingDisThres;
  pHandle->ComputationDelay = (uint8_t)(BemfRegIntParam->ComputationDelay);
 800151c:	891b      	ldrh	r3, [r3, #8]
  pHandle->DemagParams.DemagMinimumSpeedUnit = BemfAdcDemagConfig->DemagMinimumSpeedUnit;
 800151e:	f8a0 e0b8 	strh.w	lr, [r0, #184]	@ 0xb8
  pHandle->DemagParams.DemagMinimumThreshold = BemfAdcDemagConfig->DemagMinimumThreshold;
 8001522:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
  pHandle->ComputationDelay = (uint8_t)(BemfRegIntParam->ComputationDelay);
 8001526:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4
 800152e:	bf00      	nop

08001530 <BADC_GetBemfSensorlessParam>:
    /* Nothing to do. */
  }
  else
  {
#endif
  BemfAdcConfig->AdcThresholdPwmPerc =   pHandle->Pwm_H_L.AdcThresholdPwmPerc;
 8001530:	f8d0 c012 	ldr.w	ip, [r0, #18]
{
 8001534:	b410      	push	{r4}
  BemfAdcConfig->AdcThresholdPwmPerc =   pHandle->Pwm_H_L.AdcThresholdPwmPerc;
 8001536:	f8c1 c000 	str.w	ip, [r1]
  BemfAdcConfig->AdcThresholdHighPerc = pHandle->Pwm_H_L.AdcThresholdHighPerc;
  BemfAdcConfig->AdcThresholdLowPerc = pHandle->Pwm_H_L.AdcThresholdLowPerc;
 800153a:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 800153e:	f8a1 c004 	strh.w	ip, [r1, #4]
  BemfAdcConfig->SamplingPointOff = pHandle->Pwm_H_L.SamplingPointOff;
 8001542:	69c4      	ldr	r4, [r0, #28]
 8001544:	f8c1 400a 	str.w	r4, [r1, #10]
  BemfAdcConfig->SamplingPointOn = pHandle->Pwm_H_L.SamplingPointOn;
  BemfRegIntParam->ZcRising2CommDelay = pHandle->ZcRising2CommDelay;
 8001548:	f8b0 c032 	ldrh.w	ip, [r0, #50]	@ 0x32
  BemfRegIntParam->ZcFalling2CommDelay = pHandle->ZcFalling2CommDelay;
 800154c:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 800154e:	8059      	strh	r1, [r3, #2]
  BemfRegIntParam->ZcRising2CommDelay = pHandle->ZcRising2CommDelay;
 8001550:	f8a3 c000 	strh.w	ip, [r3]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8001554:	f8d0 10c4 	ldr.w	r1, [r0, #196]	@ 0xc4
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8001558:	f8b0 c0b8 	ldrh.w	ip, [r0, #184]	@ 0xb8
 800155c:	f8a2 c000 	strh.w	ip, [r2]
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8001560:	60d1      	str	r1, [r2, #12]
  BemfRegIntParam->OnSensingEnThres = pHandle->OnSensingEnThres;
  BemfRegIntParam->OnSensingDisThres = pHandle->OnSensingDisThres;
 8001562:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  BemfRegIntParam->OnSensingEnThres = pHandle->OnSensingEnThres;
 8001564:	8dc1      	ldrh	r1, [r0, #46]	@ 0x2e
 8001566:	8099      	strh	r1, [r3, #4]
  BemfRegIntParam->OnSensingDisThres = pHandle->OnSensingDisThres;
 8001568:	80da      	strh	r2, [r3, #6]
  BemfRegIntParam->ComputationDelay = (uint16_t) pHandle->ComputationDelay;
 800156a:	f890 2098 	ldrb.w	r2, [r0, #152]	@ 0x98
#ifdef NULL_PTR_CHECK_BADC
  }
#endif
}
 800156e:	f85d 4b04 	ldr.w	r4, [sp], #4
  BemfRegIntParam->ComputationDelay = (uint16_t) pHandle->ComputationDelay;
 8001572:	811a      	strh	r2, [r3, #8]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b530      	push	{r4, r5, lr}
 800157a:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157c:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157e:	223c      	movs	r2, #60	@ 0x3c
 8001580:	a811      	add	r0, sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	e9cd 110b 	strd	r1, r1, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001586:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800158a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f005 fc82 	bl	8006e9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159c:	2201      	movs	r2, #1
 800159e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2402      	movs	r4, #2
 80015a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a8:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b4:	950a      	str	r5, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015b6:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f003 feca 	bl	8005350 <HAL_RCC_OscConfig>
 80015bc:	b108      	cbz	r0, 80015c2 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 80015be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	4603      	mov	r3, r0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d8:	f004 f97c 	bl	80058d4 <HAL_RCC_ClockConfig>
 80015dc:	b108      	cbz	r0, 80015e2 <SystemClock_Config+0x6a>
 80015de:	b672      	cpsid	i
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80015e2:	f241 0201 	movw	r2, #4097	@ 0x1001
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80015e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ea:	a811      	add	r0, sp, #68	@ 0x44
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80015ec:	9211      	str	r2, [sp, #68]	@ 0x44
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80015ee:	9513      	str	r5, [sp, #76]	@ 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80015f0:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	f004 faab 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	b108      	cbz	r0, 80015fc <SystemClock_Config+0x84>
 80015f8:	b672      	cpsid	i
  while (1)
 80015fa:	e7fe      	b.n	80015fa <SystemClock_Config+0x82>
  HAL_RCC_EnableCSS();
 80015fc:	f004 fa3a 	bl	8005a74 <HAL_RCC_EnableCSS>
}
 8001600:	b021      	add	sp, #132	@ 0x84
 8001602:	bd30      	pop	{r4, r5, pc}

08001604 <main>:
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09e      	sub	sp, #120	@ 0x78
  HAL_Init();
 8001608:	f002 fd1e 	bl	8004048 <HAL_Init>
  SystemClock_Config();
 800160c:	f7ff ffb4 	bl	8001578 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001610:	4ba6      	ldr	r3, [pc, #664]	@ (80018ac <main+0x2a8>)
  hadc1.Instance = ADC1;
 8001612:	4ca7      	ldr	r4, [pc, #668]	@ (80018b0 <main+0x2ac>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8001622:	9202      	str	r2, [sp, #8]
 8001624:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001634:	9203      	str	r2, [sp, #12]
 8001636:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001646:	9204      	str	r2, [sp, #16]
 8001648:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	9301      	str	r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165a:	2501      	movs	r5, #1
  ADC_MultiModeTypeDef multimode = {0};
 800165c:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 800165e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001662:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001666:	2720      	movs	r7, #32
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001668:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	4620      	mov	r0, r4
  ADC_MultiModeTypeDef multimode = {0};
 800166c:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001670:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
 8001674:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
 8001678:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	e9c4 8301 	strd	r8, r3, [r4, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001680:	9901      	ldr	r1, [sp, #4]
  ADC_MultiModeTypeDef multimode = {0};
 8001682:	930e      	str	r3, [sp, #56]	@ 0x38
  hadc1.Instance = ADC1;
 8001684:	6022      	str	r2, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001686:	6123      	str	r3, [r4, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001688:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800168e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001692:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001694:	62a5      	str	r5, [r4, #40]	@ 0x28
  hadc1.Init.NbrOfConversion = 1;
 8001696:	61e5      	str	r5, [r4, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001698:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800169a:	60e7      	str	r7, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169c:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800169e:	f002 fd2d 	bl	80040fc <HAL_ADC_Init>
 80016a2:	b108      	cbz	r0, 80016a8 <main+0xa4>
 80016a4:	b672      	cpsid	i
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0xa2>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a8:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016aa:	a90c      	add	r1, sp, #48	@ 0x30
 80016ac:	4620      	mov	r0, r4
 80016ae:	f003 fb3f 	bl	8004d30 <HAL_ADCEx_MultiModeConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b108      	cbz	r0, 80016ba <main+0xb6>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0xb4>
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80016ba:	f04f 0906 	mov.w	r9, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016be:	4620      	mov	r0, r4
 80016c0:	a913      	add	r1, sp, #76	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c2:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016c6:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sConfig.Offset = 0;
 80016ca:	9318      	str	r3, [sp, #96]	@ 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80016cc:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	f002 fe5a 	bl	8004388 <HAL_ADC_ConfigChannel>
 80016d4:	b108      	cbz	r0, 80016da <main+0xd6>
 80016d6:	b672      	cpsid	i
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <main+0xd4>
  hadc3.Instance = ADC3;
 80016da:	4c76      	ldr	r4, [pc, #472]	@ (80018b4 <main+0x2b0>)
 80016dc:	4b76      	ldr	r3, [pc, #472]	@ (80018b8 <main+0x2b4>)
  ADC_MultiModeTypeDef multimode = {0};
 80016de:	900e      	str	r0, [sp, #56]	@ 0x38
 80016e0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80016e4:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
 80016e8:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
 80016ec:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016f0:	e9c4 8001 	strd	r8, r0, [r4, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f4:	e9c4 500a 	strd	r5, r0, [r4, #40]	@ 0x28
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016f8:	6120      	str	r0, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016fa:	f884 0020 	strb.w	r0, [r4, #32]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016fe:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001702:	8320      	strh	r0, [r4, #24]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001704:	4620      	mov	r0, r4
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001706:	60e7      	str	r7, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001708:	61e5      	str	r5, [r4, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170a:	6166      	str	r6, [r4, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800170c:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc3.Instance = ADC3;
 800170e:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001710:	f002 fcf4 	bl	80040fc <HAL_ADC_Init>
 8001714:	b108      	cbz	r0, 800171a <main+0x116>
 8001716:	b672      	cpsid	i
  while (1)
 8001718:	e7fe      	b.n	8001718 <main+0x114>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800171a:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800171c:	a90c      	add	r1, sp, #48	@ 0x30
 800171e:	4620      	mov	r0, r4
 8001720:	f003 fb06 	bl	8004d30 <HAL_ADCEx_MultiModeConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	b108      	cbz	r0, 800172c <main+0x128>
 8001728:	b672      	cpsid	i
  while (1)
 800172a:	e7fe      	b.n	800172a <main+0x126>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800172c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 800172e:	f04f 0a05 	mov.w	sl, #5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001732:	a913      	add	r1, sp, #76	@ 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001734:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001738:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800173c:	9514      	str	r5, [sp, #80]	@ 0x50
  sConfig.Offset = 0;
 800173e:	9318      	str	r3, [sp, #96]	@ 0x60
  sConfig.Channel = ADC_CHANNEL_5;
 8001740:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001744:	f002 fe20 	bl	8004388 <HAL_ADC_ConfigChannel>
 8001748:	4604      	mov	r4, r0
 800174a:	b108      	cbz	r0, 8001750 <main+0x14c>
 800174c:	b672      	cpsid	i
  while (1)
 800174e:	e7fe      	b.n	800174e <main+0x14a>
  hadc4.Instance = ADC4;
 8001750:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 80018c8 <main+0x2c4>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001754:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8001758:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800175c:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001760:	4601      	mov	r1, r0
 8001762:	2228      	movs	r2, #40	@ 0x28
 8001764:	a813      	add	r0, sp, #76	@ 0x4c
 8001766:	f005 fb99 	bl	8006e9c <memset>
  hadc4.Instance = ADC4;
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <main+0x2b8>)
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800176c:	f8c9 8004 	str.w	r8, [r9, #4]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001770:	4648      	mov	r0, r9
  hadc4.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001772:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001776:	f8c9 6014 	str.w	r6, [r9, #20]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800177a:	f8c9 4008 	str.w	r4, [r9, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800177e:	f8c9 4010 	str.w	r4, [r9, #16]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001782:	f889 4020 	strb.w	r4, [r9, #32]
  hadc4.Init.NbrOfConversion = 1;
 8001786:	f8c9 501c 	str.w	r5, [r9, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800178a:	f889 4030 	strb.w	r4, [r9, #48]	@ 0x30
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800178e:	f8a9 4018 	strh.w	r4, [r9, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001792:	f8c9 5034 	str.w	r5, [r9, #52]	@ 0x34
  hadc4.Instance = ADC4;
 8001796:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800179a:	f002 fcaf 	bl	80040fc <HAL_ADC_Init>
 800179e:	b108      	cbz	r0, 80017a4 <main+0x1a0>
 80017a0:	b672      	cpsid	i
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <main+0x19e>
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80017a4:	f04f 73a0 	mov.w	r3, #20971520	@ 0x1400000
  AnalogWDGConfig.LowThreshold = 0;
 80017a8:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  AnalogWDGConfig.ITMode = DISABLE;
 80017ac:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80017b0:	2403      	movs	r4, #3
  if (HAL_ADC_AnalogWDGConfig(&hadc4, &AnalogWDGConfig) != HAL_OK)
 80017b2:	a90c      	add	r1, sp, #48	@ 0x30
 80017b4:	4648      	mov	r0, r9
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80017b6:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80017ba:	950c      	str	r5, [sp, #48]	@ 0x30
  if (HAL_ADC_AnalogWDGConfig(&hadc4, &AnalogWDGConfig) != HAL_OK)
 80017bc:	f003 fa04 	bl	8004bc8 <HAL_ADC_AnalogWDGConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b108      	cbz	r0, 80017c8 <main+0x1c4>
 80017c4:	b672      	cpsid	i
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <main+0x1c2>
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 80017c8:	2280      	movs	r2, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 80017ca:	4648      	mov	r0, r9
 80017cc:	a913      	add	r1, sp, #76	@ 0x4c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80017ce:	9413      	str	r4, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80017d0:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80017d4:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80017d8:	9514      	str	r5, [sp, #80]	@ 0x50
  sConfigInjected.InjectedNbrOfConversion = 1;
 80017da:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80017dc:	9316      	str	r3, [sp, #88]	@ 0x58
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 80017de:	921c      	str	r2, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80017e0:	931b      	str	r3, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80017e2:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
  sConfigInjected.QueueInjectedContext = DISABLE;
 80017e6:	f88d 306a 	strb.w	r3, [sp, #106]	@ 0x6a
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 80017ea:	f002 ff95 	bl	8004718 <HAL_ADCEx_InjectedConfigChannel>
 80017ee:	4604      	mov	r4, r0
 80017f0:	b108      	cbz	r0, 80017f6 <main+0x1f2>
 80017f2:	b672      	cpsid	i
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <main+0x1f0>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f6:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80017fa:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80017fe:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001806:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	9008      	str	r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	9005      	str	r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	9012      	str	r0, [sp, #72]	@ 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001810:	900b      	str	r0, [sp, #44]	@ 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001812:	4601      	mov	r1, r0
 8001814:	222c      	movs	r2, #44	@ 0x2c
 8001816:	a813      	add	r0, sp, #76	@ 0x4c
 8001818:	f005 fb40 	bl	8006e9c <memset>
  htim1.Instance = TIM1;
 800181c:	4828      	ldr	r0, [pc, #160]	@ (80018c0 <main+0x2bc>)
 800181e:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <main+0x2c0>)
 8001820:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 8001822:	f242 33b6 	movw	r3, #9142	@ 0x23b6
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800182a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	6184      	str	r4, [r0, #24]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 8001830:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001832:	f004 fb0f 	bl	8005e54 <HAL_TIM_Base_Init>
 8001836:	b108      	cbz	r0, 800183c <main+0x238>
 8001838:	b672      	cpsid	i
  while (1)
 800183a:	e7fe      	b.n	800183a <main+0x236>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183c:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001840:	481f      	ldr	r0, [pc, #124]	@ (80018c0 <main+0x2bc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001844:	a908      	add	r1, sp, #32
 8001846:	f004 fc03 	bl	8006050 <HAL_TIM_ConfigClockSource>
 800184a:	b108      	cbz	r0, 8001850 <main+0x24c>
 800184c:	b672      	cpsid	i
  while (1)
 800184e:	e7fe      	b.n	800184e <main+0x24a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001850:	481b      	ldr	r0, [pc, #108]	@ (80018c0 <main+0x2bc>)
 8001852:	f004 fb7f 	bl	8005f54 <HAL_TIM_PWM_Init>
 8001856:	b108      	cbz	r0, 800185c <main+0x258>
 8001858:	b672      	cpsid	i
  while (1)
 800185a:	e7fe      	b.n	800185a <main+0x256>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800185c:	2380      	movs	r3, #128	@ 0x80
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001860:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001862:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <main+0x2bc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001864:	2370      	movs	r3, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001866:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001868:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186a:	f004 fdfb 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4602      	mov	r2, r0
 8001870:	b108      	cbz	r0, 8001876 <main+0x272>
 8001872:	b672      	cpsid	i
  while (1)
 8001874:	e7fe      	b.n	8001874 <main+0x270>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001878:	2408      	movs	r4, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	e9cd 400f 	strd	r4, r0, [sp, #60]	@ 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001884:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001886:	f44f 7300 	mov.w	r3, #512	@ 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188a:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <main+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800188c:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188e:	a90c      	add	r1, sp, #48	@ 0x30
 8001890:	f004 fcca 	bl	8006228 <HAL_TIM_PWM_ConfigChannel>
 8001894:	b108      	cbz	r0, 800189a <main+0x296>
 8001896:	b672      	cpsid	i
  while (1)
 8001898:	e7fe      	b.n	8001898 <main+0x294>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189a:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <main+0x2bc>)
 800189c:	2204      	movs	r2, #4
 800189e:	a90c      	add	r1, sp, #48	@ 0x30
 80018a0:	f004 fcc2 	bl	8006228 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	b190      	cbz	r0, 80018cc <main+0x2c8>
 80018a6:	b672      	cpsid	i
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <main+0x2a4>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	20000650 	.word	0x20000650
 80018b4:	20000600 	.word	0x20000600
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000500 	.word	0x50000500
 80018c0:	20000564 	.word	0x20000564
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	200005b0 	.word	0x200005b0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018cc:	4859      	ldr	r0, [pc, #356]	@ (8001a34 <main+0x430>)
 80018ce:	4622      	mov	r2, r4
 80018d0:	a90c      	add	r1, sp, #48	@ 0x30
 80018d2:	f004 fca9 	bl	8006228 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	b108      	cbz	r0, 80018dc <main+0x2d8>
 80018d8:	b672      	cpsid	i
  while (1)
 80018da:	e7fe      	b.n	80018da <main+0x2d6>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018dc:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018de:	220c      	movs	r2, #12
 80018e0:	4854      	ldr	r0, [pc, #336]	@ (8001a34 <main+0x430>)
 80018e2:	a90c      	add	r1, sp, #48	@ 0x30
 80018e4:	f004 fca0 	bl	8006228 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b108      	cbz	r0, 80018f0 <main+0x2ec>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <main+0x2ea>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80018f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f8:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80018fc:	226c      	movs	r2, #108	@ 0x6c
 80018fe:	e9cd 0215 	strd	r0, r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.Break2Filter = 3;
 8001902:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001904:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001908:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Filter = 3;
 800190c:	e9cd 021b 	strd	r0, r2, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001910:	a913      	add	r1, sp, #76	@ 0x4c
 8001912:	4848      	ldr	r0, [pc, #288]	@ (8001a34 <main+0x430>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001914:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001916:	f004 fdf1 	bl	80064fc <HAL_TIMEx_ConfigBreakDeadTime>
 800191a:	4604      	mov	r4, r0
 800191c:	b108      	cbz	r0, 8001922 <main+0x31e>
 800191e:	b672      	cpsid	i
  while (1)
 8001920:	e7fe      	b.n	8001920 <main+0x31c>
  htim2.Instance = TIM2;
 8001922:	4d45      	ldr	r5, [pc, #276]	@ (8001a38 <main+0x434>)
  HAL_TIM_MspPostInit(&htim1);
 8001924:	4843      	ldr	r0, [pc, #268]	@ (8001a34 <main+0x430>)
 8001926:	f001 fc31 	bl	800318c <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = LF_TIMER_PSC;
 800192a:	2364      	movs	r3, #100	@ 0x64
 800192c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001930:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001934:	4628      	mov	r0, r5
  htim2.Init.Period = LF_TIMER_ARR;
 8001936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
 800193e:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8001946:	940e      	str	r4, [sp, #56]	@ 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = LF_TIMER_ARR;
 800194e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001950:	f004 fa80 	bl	8005e54 <HAL_TIM_Base_Init>
 8001954:	b108      	cbz	r0, 800195a <main+0x356>
 8001956:	b672      	cpsid	i
  while (1)
 8001958:	e7fe      	b.n	8001958 <main+0x354>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195a:	a913      	add	r1, sp, #76	@ 0x4c
 800195c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001960:	f004 fb76 	bl	8006050 <HAL_TIM_ConfigClockSource>
 8001964:	b108      	cbz	r0, 800196a <main+0x366>
 8001966:	b672      	cpsid	i
  while (1)
 8001968:	e7fe      	b.n	8001968 <main+0x364>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800196a:	2380      	movs	r3, #128	@ 0x80
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800196c:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196e:	4832      	ldr	r0, [pc, #200]	@ (8001a38 <main+0x434>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001970:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001972:	a90c      	add	r1, sp, #48	@ 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001974:	920c      	str	r2, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001976:	f004 fd75 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	b108      	cbz	r0, 8001982 <main+0x37e>
 800197e:	b672      	cpsid	i
  while (1)
 8001980:	e7fe      	b.n	8001980 <main+0x37c>
  huart1.Instance = USART1;
 8001982:	482e      	ldr	r0, [pc, #184]	@ (8001a3c <main+0x438>)
 8001984:	4c2e      	ldr	r4, [pc, #184]	@ (8001a40 <main+0x43c>)
  huart1.Init.BaudRate = 1843200;
 8001986:	f44f 11e1 	mov.w	r1, #1843200	@ 0x1c2000
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 1843200;
 800198c:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001990:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001994:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a0:	f004 ff72 	bl	8006888 <HAL_UART_Init>
 80019a4:	4604      	mov	r4, r0
 80019a6:	b108      	cbz	r0, 80019ac <main+0x3a8>
 80019a8:	b672      	cpsid	i
  while (1)
 80019aa:	e7fe      	b.n	80019aa <main+0x3a6>
  MX_MotorControl_Init();
 80019ac:	f000 ff24 	bl	80027f8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2103      	movs	r1, #3
 80019b4:	2025      	movs	r0, #37	@ 0x25
 80019b6:	f003 fa5d 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ba:	2025      	movs	r0, #37	@ 0x25
 80019bc:	f003 fa96 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 80019c0:	4622      	mov	r2, r4
 80019c2:	2103      	movs	r1, #3
 80019c4:	200f      	movs	r0, #15
 80019c6:	f003 fa55 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f003 fa8e 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d0:	4622      	mov	r2, r4
 80019d2:	4621      	mov	r1, r4
 80019d4:	201c      	movs	r0, #28
 80019d6:	f003 fa4d 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019da:	201c      	movs	r0, #28
 80019dc:	f003 fa86 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80019e0:	4622      	mov	r2, r4
 80019e2:	2101      	movs	r1, #1
 80019e4:	2018      	movs	r0, #24
 80019e6:	f003 fa45 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019ea:	2018      	movs	r0, #24
 80019ec:	f003 fa7e 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80019f0:	4622      	mov	r2, r4
 80019f2:	2101      	movs	r1, #1
 80019f4:	2019      	movs	r0, #25
 80019f6:	f003 fa3d 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019fa:	2019      	movs	r0, #25
 80019fc:	f003 fa76 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC4_IRQn, 0, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	4621      	mov	r1, r4
 8001a04:	203d      	movs	r0, #61	@ 0x3d
 8001a06:	f003 fa35 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001a0a:	203d      	movs	r0, #61	@ 0x3d
 8001a0c:	f003 fa6e 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4621      	mov	r1, r4
 8001a14:	2012      	movs	r0, #18
 8001a16:	f003 fa2d 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a1a:	2012      	movs	r0, #18
 8001a1c:	f003 fa66 	bl	8004eec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC3_IRQn, 0, 1);
 8001a20:	202f      	movs	r0, #47	@ 0x2f
 8001a22:	2201      	movs	r2, #1
 8001a24:	4621      	mov	r1, r4
 8001a26:	f003 fa25 	bl	8004e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001a2a:	202f      	movs	r0, #47	@ 0x2f
 8001a2c:	f003 fa5e 	bl	8004eec <HAL_NVIC_EnableIRQ>
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <main+0x42c>
 8001a32:	bf00      	nop
 8001a34:	20000564 	.word	0x20000564
 8001a38:	20000518 	.word	0x20000518
 8001a3c:	20000490 	.word	0x20000490
 8001a40:	40013800 	.word	0x40013800

08001a44 <Error_Handler>:
 8001a44:	b672      	cpsid	i
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <Error_Handler+0x2>

08001a48 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001a50:	8a83      	ldrh	r3, [r0, #20]
    {
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
      pHandle->hFinalSpeed = hFinalSpeed;
      pHandle->hDurationms = hDurationms;
 8001a52:	8302      	strh	r2, [r0, #24]
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001a54:	fb13 f301 	smulbb	r3, r3, r1
 8001a58:	2b00      	cmp	r3, #0
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001a5a:	bfab      	itete	ge
 8001a5c:	2301      	movge	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
    else
    {
      pHandle->DirectCommand = MCI_STOP;
 8001a5e:	2305      	movlt	r3, #5
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001a60:	71c3      	strbge	r3, [r0, #7]
      pHandle->DirectCommand = MCI_STOP;
 8001a62:	7003      	strblt	r3, [r0, #0]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001a64:	f04f 0c01 	mov.w	ip, #1
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001a68:	2303      	movs	r3, #3
      pHandle->hFinalSpeed = hFinalSpeed;
 8001a6a:	8281      	strh	r1, [r0, #20]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001a6c:	f880 c006 	strb.w	ip, [r0, #6]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001a70:	7203      	strb	r3, [r0, #8]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001a72:	4770      	bx	lr

08001a74 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8001a74:	8843      	ldrh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8001a76:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001a80:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8001a84:	8043      	strh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8001a86:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED)
 8001a8c:	7983      	ldrb	r3, [r0, #6]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d000      	beq.n	8001a94 <MCI_ExecBufferedCommands+0x8>
 8001a92:	4770      	bx	lr
{
 8001a94:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001a96:	79c3      	ldrb	r3, [r0, #7]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	d002      	beq.n	8001aa4 <MCI_ExecBufferedCommands+0x18>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	71a3      	strb	r3, [r4, #6]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001aa2:	bd10      	pop	{r4, pc}
          SDC_SetControlMode(pHandle->pSDC, MCM_SPEED_MODE);
 8001aa4:	69c0      	ldr	r0, [r0, #28]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Mode = bMode;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	7003      	strb	r3, [r0, #0]
          pHandle->pSDC->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8001aaa:	2300      	movs	r3, #0
          commandHasBeenExecuted = SDC_ExecRamp(pHandle->pSDC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001aac:	8b22      	ldrh	r2, [r4, #24]
 8001aae:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
          pHandle->pSDC->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8001ab2:	60c3      	str	r3, [r0, #12]
          commandHasBeenExecuted = SDC_ExecRamp(pHandle->pSDC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001ab4:	f001 f8e4 	bl	8002c80 <SDC_ExecRamp>
      if (commandHasBeenExecuted)
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d0f0      	beq.n	8001a9e <MCI_ExecBufferedCommands+0x12>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001abc:	2302      	movs	r3, #2
 8001abe:	71a3      	strb	r3, [r4, #6]
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop

08001ac4 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001ac4:	7840      	ldrb	r0, [r0, #1]
 8001ac6:	4770      	bx	lr

08001ac8 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001ac8:	8880      	ldrh	r0, [r0, #4]
 8001aca:	4770      	bx	lr

08001acc <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001acc:	8840      	ldrh	r0, [r0, #2]
 8001ace:	4770      	bx	lr

08001ad0 <MCI_StartMotor>:
{
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001ad4:	f7ff fff6 	bl	8001ac4 <MCI_GetSTMState>
 8001ad8:	b108      	cbz	r0, 8001ade <MCI_StartMotor+0xe>
  bool retVal = false;
 8001ada:	2000      	movs	r0, #0
}
 8001adc:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fff2 	bl	8001ac8 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d1f8      	bne.n	8001ada <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff ffef 	bl	8001acc <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d1f3      	bne.n	8001ada <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001af2:	2001      	movs	r0, #1
 8001af4:	7020      	strb	r0, [r4, #0]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001af6:	71a0      	strb	r0, [r4, #6]
}
 8001af8:	bd10      	pop	{r4, pc}
 8001afa:	bf00      	nop

08001afc <MCI_StopMotor>:
{
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001b00:	f7ff ffe0 	bl	8001ac4 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001b04:	4604      	mov	r4, r0
 8001b06:	b118      	cbz	r0, 8001b10 <MCI_StopMotor+0x14>
 8001b08:	f1b0 040c 	subs.w	r4, r0, #12
 8001b0c:	bf18      	it	ne
 8001b0e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001b10:	4628      	mov	r0, r5
 8001b12:	f7ff ffd9 	bl	8001ac8 <MCI_GetOccurredFaults>
 8001b16:	b110      	cbz	r0, 8001b1e <MCI_StopMotor+0x22>
  bool retVal = false;
 8001b18:	2400      	movs	r4, #0
}
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f7ff ffd4 	bl	8001acc <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d1f7      	bne.n	8001b18 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001b28:	2c00      	cmp	r4, #0
 8001b2a:	d0f5      	beq.n	8001b18 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	702b      	strb	r3, [r5, #0]
      retVal = true;
 8001b30:	e7f3      	b.n	8001b1a <MCI_StopMotor+0x1e>
 8001b32:	bf00      	nop

08001b34 <MCI_FaultAcknowledged>:
{
 8001b34:	b510      	push	{r4, lr}
 8001b36:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001b38:	f7ff ffc4 	bl	8001ac4 <MCI_GetSTMState>
 8001b3c:	280b      	cmp	r0, #11
 8001b3e:	d001      	beq.n	8001b44 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001b40:	2000      	movs	r0, #0
}
 8001b42:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ffc1 	bl	8001acc <MCI_GetCurrentFaults>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1f8      	bne.n	8001b40 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	7023      	strb	r3, [r4, #0]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001b52:	80a0      	strh	r0, [r4, #4]
      reVal = true;
 8001b54:	2001      	movs	r0, #1
}
 8001b56:	bd10      	pop	{r4, pc}

08001b58 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001b58:	8883      	ldrh	r3, [r0, #4]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001b5a:	8840      	ldrh	r0, [r0, #2]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001b5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001b64:	7a00      	ldrb	r0, [r0, #8]
 8001b66:	4770      	bx	lr

08001b68 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001b68:	79c3      	ldrb	r3, [r0, #7]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <MCI_GetImposedMotorDirection+0xa>
  int16_t retVal = 1;
 8001b6e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001b70:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001b72:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
  int16_t retVal = 1;
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bfb4      	ite	lt
 8001b7a:	f04f 30ff 	movlt.w	r0, #4294967295
 8001b7e:	2001      	movge	r0, #1
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001b84:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop

08001b8c <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001b8c:	8b00      	ldrh	r0, [r0, #24]
 8001b8e:	4770      	bx	lr

08001b90 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    SDC_StopRamp(pHandle->pSDC);
 8001b90:	69c3      	ldr	r3, [r0, #28]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8001b96:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_6S_Handle_t *SDC_GetSpeedSensor(const SpeednDutyCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SDC
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8001b9c:	69c3      	ldr	r3, [r0, #28]
  }
  else
  {
#endif
    SpeednPosFdbk_6S_Handle_t * SpeedSensor = SDC_GetSpeedSensor(pHandle->pSDC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001b9e:	6958      	ldr	r0, [r3, #20]
 8001ba0:	f005 b956 	b.w	8006e50 <SPD_GetAvrgMecSpeedUnit>

08001ba4 <MCI_GetMecSpeedRefUnit>:
    tempMecSpeedRefUnit = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8001ba4:	69c3      	ldr	r3, [r0, #28]
 8001ba6:	6858      	ldr	r0, [r3, #4]
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	bfbc      	itt	lt
 8001bac:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8001bb0:	30ff      	addlt	r0, #255	@ 0xff
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : SDC_GetMecSpeedRefUnit(pHandle->pSDC));
#else
  return (SDC_GetMecSpeedRefUnit(pHandle->pSDC));
#endif
}
 8001bb2:	1400      	asrs	r0, r0, #16
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <MCI_Clear_PerfMeasure>:
    /* Nothing to do */
  }
  else
  {
#endif
    MC_Perf_Clear(pHandle->pPerfMeasure,bMotor);
 8001bb8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001bba:	f000 b82b 	b.w	8001c14 <MC_Perf_Clear>
 8001bbe:	bf00      	nop

08001bc0 <MCI_GetDutyCycleRef>:
__weak uint16_t MCI_GetDutyCycleRef(const MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0U: pHandle->pSixStepVars->DutyCycleRef);
#else
  return (pHandle->pSixStepVars->DutyCycleRef);
 8001bc0:	6a03      	ldr	r3, [r0, #32]
#endif
}
 8001bc2:	8818      	ldrh	r0, [r3, #0]
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <MC_Perf_Measure_Init>:
#endif
  uint8_t  i;
  Perf_Handle_t *pHdl;

  /* Set Debug mod for DWT IP Enabling. */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001bc8:	4910      	ldr	r1, [pc, #64]	@ (8001c0c <MC_Perf_Measure_Init+0x44>)

  if (DWT->CTRL != 0U)
 8001bca:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <MC_Perf_Measure_Init+0x48>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001bcc:	f8d1 30fc 	ldr.w	r3, [r1, #252]	@ 0xfc
 8001bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd4:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
  if (DWT->CTRL != 0U)
 8001bd8:	6813      	ldr	r3, [r2, #0]
 8001bda:	b12b      	cbz	r3, 8001be8 <MC_Perf_Measure_Init+0x20>
  {                                        /* Check if DWT is present. */
    DWT->CYCCNT  = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6053      	str	r3, [r2, #4]
    DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk; /* Enable Cycle Counter. */
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]
  }

    for (i = 0U; i < MC_PERF_NB_TRACES; i++)
    {
      pHdl = &pHandle->MC_Perf_TraceLog[i];
      pHdl->StartMeasure = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001bf2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001bf6:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001bfa:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8001bfe:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8001c02:	e9c0 230c 	strd	r2, r3, [r0, #48]	@ 0x30
      pHdl->DeltaTimeInCycle = 0;
      pHdl->min = UINT32_MAX;
      pHdl->max = 0;
    }
    pHandle->BG_Task_OnGoing = false;
 8001c06:	7003      	strb	r3, [r0, #0]
    pHandle->AccHighFreqTasksCnt = 0;
 8001c08:	6043      	str	r3, [r0, #4]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	e0001000 	.word	0xe0001000

08001c14 <MC_Perf_Clear>:
    Perf_Handle_t  *pHdl;

    for (i = 0U; i < 2U; i++)
    {
      pHdl = &pHandle->MC_Perf_TraceLog[(2U * bMotor) + i];
      pHdl->DeltaTimeInCycle = 0U;
 8001c14:	014b      	lsls	r3, r1, #5
 8001c16:	f103 0208 	add.w	r2, r3, #8
 8001c1a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 8001c1e:	b410      	push	{r4}
      pHdl->DeltaTimeInCycle = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f04f 34ff 	mov.w	r4, #4294967295
 8001c26:	4402      	add	r2, r0
 8001c28:	e9c2 3401 	strd	r3, r4, [r2, #4]
 8001c2c:	e9c1 3407 	strd	r3, r4, [r1, #28]
      pHdl->min = UINT32_MAX;
      pHdl->max = 0U;
 8001c30:	614b      	str	r3, [r1, #20]
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001c32:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHdl->max = 0U;
 8001c36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop

08001c3c <MC_BG_Perf_Measure_Start>:
  }
  else
  {
#endif
    pHandle->BG_Task_OnGoing = true;
    pHandle->AccHighFreqTasksCnt = 0;
 8001c3c:	2200      	movs	r2, #0
    uint32_t StartMeasure = DWT->CYCCNT;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <MC_BG_Perf_Measure_Start+0x14>)
    pHandle->AccHighFreqTasksCnt = 0;
 8001c40:	6042      	str	r2, [r0, #4]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8001c42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    uint32_t StartMeasure = DWT->CYCCNT;
 8001c46:	685b      	ldr	r3, [r3, #4]
    pHandle->BG_Task_OnGoing = true;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	7002      	strb	r2, [r0, #0]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8001c4c:	608b      	str	r3, [r1, #8]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001c4e:	4770      	bx	lr
 8001c50:	e0001000 	.word	0xe0001000

08001c54 <MC_Perf_Measure_Stop>:
  {
#endif
    uint32_t StopMeasure;
    Perf_Handle_t *pHdl;

    StopMeasure = DWT->CYCCNT;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <MC_Perf_Measure_Stop+0x40>)
    pHdl = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases. */
    if (StopMeasure < pHdl->StartMeasure)
 8001c56:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 8001c5a:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 8001c5c:	689b      	ldr	r3, [r3, #8]
    StopMeasure = DWT->CYCCNT;
 8001c5e:	6854      	ldr	r4, [r2, #4]
    if (StopMeasure < pHdl->StartMeasure)
 8001c60:	42a3      	cmp	r3, r4
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 8001c62:	bf88      	it	hi
 8001c64:	f104 34ff 	addhi.w	r4, r4, #4294967295
    if (StopMeasure < pHdl->StartMeasure)
 8001c68:	010a      	lsls	r2, r1, #4
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 8001c6a:	1ae3      	subs	r3, r4, r3
 8001c6c:	4402      	add	r2, r0
    }

    if(pHandle->BG_Task_OnGoing)
 8001c6e:	7804      	ldrb	r4, [r0, #0]
 8001c70:	60d3      	str	r3, [r2, #12]
 8001c72:	b114      	cbz	r4, 8001c7a <MC_Perf_Measure_Stop+0x26>
    {
      pHandle->AccHighFreqTasksCnt += pHdl->DeltaTimeInCycle;
 8001c74:	6842      	ldr	r2, [r0, #4]
 8001c76:	441a      	add	r2, r3
 8001c78:	6042      	str	r2, [r0, #4]
    else
    {
      /* Nothing to do. */
    }

    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8001c7a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
      /* Nothing to do. */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8001c82:	6942      	ldr	r2, [r0, #20]
 8001c84:	429a      	cmp	r2, r3
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001c86:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 8001c88:	bf38      	it	cc
 8001c8a:	6143      	strcc	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001c8c:	429a      	cmp	r2, r3
      pHdl->min = pHdl->DeltaTimeInCycle;
 8001c8e:	bf88      	it	hi
 8001c90:	6103      	strhi	r3, [r0, #16]
}
 8001c92:	4770      	bx	lr
 8001c94:	e0001000 	.word	0xe0001000

08001c98 <MC_BG_Perf_Measure_Stop>:
  }
  else
  {
#endif
    Perf_Handle_t *pHdl;
    uint32_t StopMeasure = DWT->CYCCNT;
 8001c98:	4a11      	ldr	r2, [pc, #68]	@ (8001ce0 <MC_BG_Perf_Measure_Stop+0x48>)
    pHandle->BG_Task_OnGoing = false;

    pHdl  = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases. */
    if (StopMeasure < pHdl->StartMeasure)
 8001c9a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 8001c9e:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 8001ca0:	689b      	ldr	r3, [r3, #8]
    uint32_t StopMeasure = DWT->CYCCNT;
 8001ca2:	6854      	ldr	r4, [r2, #4]
    pHandle->BG_Task_OnGoing = false;
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	7002      	strb	r2, [r0, #0]
    if (StopMeasure < pHdl->StartMeasure)
 8001ca8:	42a3      	cmp	r3, r4
 8001caa:	ea4f 1201 	mov.w	r2, r1, lsl #4
 8001cae:	4402      	add	r2, r0
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 8001cb0:	bf88      	it	hi
 8001cb2:	f104 34ff 	addhi.w	r4, r4, #4294967295
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 8001cb6:	1ae3      	subs	r3, r4, r3
 8001cb8:	60d3      	str	r3, [r2, #12]
    }

    if (pHdl->DeltaTimeInCycle > pHandle->AccHighFreqTasksCnt)
 8001cba:	6844      	ldr	r4, [r0, #4]
 8001cbc:	429c      	cmp	r4, r3
    {
      pHdl->DeltaTimeInCycle -= pHandle->AccHighFreqTasksCnt;
 8001cbe:	bf38      	it	cc
 8001cc0:	1b1b      	subcc	r3, r3, r4
 8001cc2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8001cc6:	bf38      	it	cc
 8001cc8:	60d3      	strcc	r3, [r2, #12]
    else
    {
      /* Nothing to do. */
    }

    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8001cca:	6942      	ldr	r2, [r0, #20]
      /* Nothing to do. */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8001ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8001cd0:	4293      	cmp	r3, r2
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001cd2:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 8001cd4:	bf88      	it	hi
 8001cd6:	6143      	strhi	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8001cd8:	4293      	cmp	r3, r2
      pHdl->min = pHdl->DeltaTimeInCycle;
 8001cda:	bf38      	it	cc
 8001cdc:	6103      	strcc	r3, [r0, #16]
}
 8001cde:	4770      	bx	lr
 8001ce0:	e0001000 	.word	0xe0001000

08001ce4 <MC_Perf_GetCPU_Load>:
  {
#endif
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
            / (float_t)SYSCLK_FREQ) * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <MC_Perf_GetCPU_Load+0x64>)
                    /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001ce6:	edd0 7a07 	vldr	s15, [r0, #28]
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001cea:	681b      	ldr	r3, [r3, #0]
             * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001cec:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001d4c <MC_Perf_GetCPU_Load+0x68>
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001cf0:	695b      	ldr	r3, [r3, #20]
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001cf2:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8001d50 <MC_Perf_GetCPU_Load+0x6c>
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001cf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */

    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 8001cfa:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001d54 <MC_Perf_GetCPU_Load+0x70>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001d02:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
             * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001d06:	ee27 7a26 	vmul.f32	s14, s14, s13
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001d58 <MC_Perf_GetCPU_Load+0x74>
 8001d12:	eea7 7aa6 	vfma.f32	s14, s15, s13
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d16:	ee07 3a90 	vmov	s15, r3
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 8001d1a:	edd0 6a03 	vldr	s13, [r0, #12]
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 8001d22:	eef8 6a66 	vcvt.f32.u32	s13, s13
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001d26:	ee67 7a87 	vmul.f32	s15, s15, s14
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8001d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].DeltaTimeInCycle / (float_t)SYSCLK_FREQ)\
 8001d2e:	eee6 7a86 	vfma.f32	s15, s13, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	bf88      	it	hi
 8001d3c:	eef0 7a47 	vmovhi.f32	s15, s14
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 8001d40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000028 	.word	0x20000028
 8001d4c:	337a8a2f 	.word	0x337a8a2f
 8001d50:	37690453 	.word	0x37690453
 8001d54:	42c80000 	.word	0x42c80000
 8001d58:	33fa8a2f 	.word	0x33fa8a2f

08001d5c <MC_Perf_GetMaxCPU_Load>:
  {
#endif
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
            * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].max / (float_t)SYSCLK_FREQ)\
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MC_Perf_GetMaxCPU_Load+0x64>)
                    /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d5e:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d62:	681b      	ldr	r3, [r3, #0]
              * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001d64:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001dc4 <MC_Perf_GetMaxCPU_Load+0x68>
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d68:	695b      	ldr	r3, [r3, #20]
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d6a:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8001dc8 <MC_Perf_GetMaxCPU_Load+0x6c>
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
             /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 8001d72:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001dcc <MC_Perf_GetMaxCPU_Load+0x70>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d7a:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
              * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001d7e:	ee27 7a26 	vmul.f32	s14, s14, s13
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d86:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001dd0 <MC_Perf_GetMaxCPU_Load+0x74>
 8001d8a:	eea7 7aa6 	vfma.f32	s14, s15, s13
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d8e:	ee07 3a90 	vmov	s15, r3
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001d92:	edd0 6a05 	vldr	s13, [r0, #20]
             * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    cpuLoad = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8001d9a:	eef8 6a66 	vcvt.f32.u32	s13, s13
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8001da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].max / (float_t)SYSCLK_FREQ)\
 8001da6:	eee6 7a86 	vfma.f32	s15, s13, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	bf88      	it	hi
 8001db4:	eef0 7a47 	vmovhi.f32	s15, s14
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 8001db8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	337a8a2f 	.word	0x337a8a2f
 8001dc8:	37690453 	.word	0x37690453
 8001dcc:	42c80000 	.word	0x42c80000
 8001dd0:	33fa8a2f 	.word	0x33fa8a2f

08001dd4 <MC_Perf_GetMinCPU_Load>:
    /* Nothing to do. */
  }
  else
  {
#endif
    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min != UINT32_MAX)
 8001dd4:	6903      	ldr	r3, [r0, #16]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	d041      	beq.n	8001e5e <MC_Perf_GetMinCPU_Load+0x8a>
    {
      cpu_load_acc = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001e64 <MC_Perf_GetMinCPU_Load+0x90>
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
                   * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    }

    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].min != UINT32_MAX)
 8001dea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001dec:	1c59      	adds	r1, r3, #1
 8001dee:	d012      	beq.n	8001e16 <MC_Perf_GetMinCPU_Load+0x42>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].min / (float_t)SYSCLK_FREQ)\
                     * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <MC_Perf_GetMinCPU_Load+0x94>)
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001df2:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001e6c <MC_Perf_GetMinCPU_Load+0x98>
                     * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001df6:	6812      	ldr	r2, [r2, #0]
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001df8:	ee07 3a10 	vmov	s14, r3
                     * (2.0f * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ)));
 8001dfc:	6953      	ldr	r3, [r2, #20]
 8001dfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e02:	ee06 3a90 	vmov	s13, r3
 8001e06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_SpeedTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001e0a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e0e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001e12:	eee7 7a26 	vfma.f32	s15, s14, s13
                            /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */
    }

    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].min != UINT32_MAX)
 8001e16:	6a03      	ldr	r3, [r0, #32]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	d012      	beq.n	8001e42 <MC_Perf_GetMinCPU_Load+0x6e>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].min / (float_t)SYSCLK_FREQ)\
                    * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MC_Perf_GetMinCPU_Load+0x94>)
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001e1e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8001e70 <MC_Perf_GetMinCPU_Load+0x9c>
                    * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001e22:	6812      	ldr	r2, [r2, #0]
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001e24:	ee07 3a10 	vmov	s14, r3
                    * ((6.0f * (float)pSDC[M1]->SPD->hAvrMecSpeedUnit * (float_t)POLE_PAIR_NUM) / (float_t)U_01HZ));
 8001e28:	6953      	ldr	r3, [r2, #20]
 8001e2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e2e:	ee06 3a90 	vmov	s13, r3
 8001e32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_ADCTimerM1].min / (float_t)SYSCLK_FREQ)\
 8001e36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001e3e:	eee7 7a26 	vfma.f32	s15, s14, s13
                   /* (nb steps x (frequency mec in 0.1Hz) x POLE_PAIR_NUM) / U_01HZ */
    }

    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 8001e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cpu_load_acc *= 100.0f;
 8001e4e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001e74 <MC_Perf_GetMinCPU_Load+0xa0>
    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 8001e52:	bf88      	it	hi
 8001e54:	eef0 7a47 	vmovhi.f32	s15, s14
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpu_load_acc);
}
 8001e58:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e5c:	4770      	bx	lr
  float_t cpu_load_acc = 0.0f;
 8001e5e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001e78 <MC_Perf_GetMinCPU_Load+0xa4>
 8001e62:	e7c2      	b.n	8001dea <MC_Perf_GetMinCPU_Load+0x16>
 8001e64:	37690453 	.word	0x37690453
 8001e68:	20000028 	.word	0x20000028
 8001e6c:	33fa8a2f 	.word	0x33fa8a2f
 8001e70:	337a8a2f 	.word	0x337a8a2f
 8001e74:	42c80000 	.word	0x42c80000
 8001e78:	00000000 	.word	0x00000000

08001e7c <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8001e7c:	b310      	cbz	r0, 8001ec4 <MCboot+0x48>
{
 8001e7e:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8001e80:	4c11      	ldr	r4, [pc, #68]	@ (8001ec8 <MCboot+0x4c>)

    /*************************************************/
    /*    SIX_STEP initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 8001e82:	4d12      	ldr	r5, [pc, #72]	@ (8001ecc <MCboot+0x50>)
 8001e84:	6005      	str	r5, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	7023      	strb	r3, [r4, #0]
    SIX_STEP_Init();
 8001e8a:	f000 f9af 	bl	80021ec <SIX_STEP_Init>

    ASPEP_start(&aspepOverUartA);
 8001e8e:	4810      	ldr	r0, [pc, #64]	@ (8001ed0 <MCboot+0x54>)
 8001e90:	f7fe fcca 	bl	8000828 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001e94:	480f      	ldr	r0, [pc, #60]	@ (8001ed4 <MCboot+0x58>)
 8001e96:	f004 fe4f 	bl	8006b38 <PID_HandleInit>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001e9a:	480f      	ldr	r0, [pc, #60]	@ (8001ed8 <MCboot+0x5c>)
 8001e9c:	f000 fdf6 	bl	8002a8c <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001ea0:	480e      	ldr	r0, [pc, #56]	@ (8001edc <MCboot+0x60>)
 8001ea2:	f004 fed1 	bl	8006c48 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8001ea6:	480e      	ldr	r0, [pc, #56]	@ (8001ee0 <MCboot+0x64>)
 8001ea8:	f000 fdf0 	bl	8002a8c <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8001eac:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <MCboot+0x68>)
 8001eae:	f004 fdf9 	bl	8006aa4 <NTC_Init>

    Mci[M1].pPerfMeasure = &PerfTraces;
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MCboot+0x6c>)
 8001eb4:	6268      	str	r0, [r5, #36]	@ 0x24
    MC_Perf_Measure_Init(&PerfTraces);
 8001eb6:	f7ff fe87 	bl	8001bc8 <MC_Perf_Measure_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8001eba:	f7ff fdc5 	bl	8001a48 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	7023      	strb	r3, [r4, #0]
  }
}
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200006e0 	.word	0x200006e0
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	2000036c 	.word	0x2000036c
 8001ed4:	200001c8 	.word	0x200001c8
 8001ed8:	20000208 	.word	0x20000208
 8001edc:	200001f4 	.word	0x200001f4
 8001ee0:	20000230 	.word	0x20000230
 8001ee4:	20000218 	.word	0x20000218
 8001ee8:	200006a8 	.word	0x200006a8

08001eec <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001eec:	4b01      	ldr	r3, [pc, #4]	@ (8001ef4 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001eee:	8018      	strh	r0, [r3, #0]
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	200006e4 	.word	0x200006e4

08001ef8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001efa:	8818      	ldrh	r0, [r3, #0]
 8001efc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001efe:	fab0 f080 	clz	r0, r0
 8001f02:	0940      	lsrs	r0, r0, #5
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200006e4 	.word	0x200006e4

08001f0c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001f0c:	4b01      	ldr	r3, [pc, #4]	@ (8001f14 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001f0e:	8018      	strh	r0, [r3, #0]
}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200006e2 	.word	0x200006e2

08001f18 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001f1a:	8818      	ldrh	r0, [r3, #0]
 8001f1c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001f1e:	fab0 f080 	clz	r0, r0
 8001f22:	0940      	lsrs	r0, r0, #5
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200006e2 	.word	0x200006e2

08001f2c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b198      	cbz	r0, 8001f5a <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f32:	4e1a      	ldr	r6, [pc, #104]	@ (8001f9c <TSK_SafetyTask_PWMOFF+0x70>)
 8001f34:	6830      	ldr	r0, [r6, #0]
 8001f36:	f000 fd61 	bl	80029fc <PWMC_IsFaultOccurred>
 8001f3a:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001f3c:	4d18      	ldr	r5, [pc, #96]	@ (8001fa0 <TSK_SafetyTask_PWMOFF+0x74>)
 8001f3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001f42:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001f46:	43ca      	mvns	r2, r1
 8001f48:	4628      	mov	r0, r5
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f7ff fd92 	bl	8001a74 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001f50:	4628      	mov	r0, r5
 8001f52:	f7ff fe01 	bl	8001b58 <MCI_GetFaultState>
 8001f56:	b9b8      	cbnz	r0, 8001f88 <TSK_SafetyTask_PWMOFF+0x5c>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline uint16_t RCM_GetRegularConv(const RegConv_t *regConv)
{
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  return ((MC_NULL == regConv) ? 0U : regConv->data);
#else
  return (regConv->data);
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <TSK_SafetyTask_PWMOFF+0x78>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001f5c:	4812      	ldr	r0, [pc, #72]	@ (8001fa8 <TSK_SafetyTask_PWMOFF+0x7c>)
 8001f5e:	8959      	ldrh	r1, [r3, #10]
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f60:	4e0e      	ldr	r6, [pc, #56]	@ (8001f9c <TSK_SafetyTask_PWMOFF+0x70>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001f62:	f004 fdb1 	bl	8006ac8 <NTC_CalcAvTemp>
 8001f66:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001f68:	6830      	ldr	r0, [r6, #0]
 8001f6a:	f000 fd47 	bl	80029fc <PWMC_IsFaultOccurred>
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <TSK_SafetyTask_PWMOFF+0x80>)
 8001f70:	4605      	mov	r5, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001f72:	8959      	ldrh	r1, [r3, #10]
 8001f74:	480e      	ldr	r0, [pc, #56]	@ (8001fb0 <TSK_SafetyTask_PWMOFF+0x84>)
 8001f76:	f004 fe6d 	bl	8006c54 <RVBS_CalcAvVbus>
 8001f7a:	4307      	orrs	r7, r0
 8001f7c:	f007 070e 	and.w	r7, r7, #14
 8001f80:	ea45 0107 	orr.w	r1, r5, r7
 8001f84:	b289      	uxth	r1, r1
 8001f86:	e7d9      	b.n	8001f3c <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001f88:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001f8c:	f000 fd10 	bl	80029b0 <PWMC_SwitchOffPWM>
    SIX_STEP_Clear(bMotor);
 8001f90:	4620      	mov	r0, r4
}
 8001f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SIX_STEP_Clear(bMotor);
 8001f96:	f000 b8ef 	b.w	8002178 <SIX_STEP_Clear>
 8001f9a:	bf00      	nop
 8001f9c:	200006a4 	.word	0x200006a4
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000230 	.word	0x20000230
 8001fa8:	20000218 	.word	0x20000218
 8001fac:	20000208 	.word	0x20000208
 8001fb0:	200001f4 	.word	0x200001f4

08001fb4 <TSK_SafetyTask>:
{
 8001fb4:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001fb6:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <TSK_SafetyTask+0x14>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d000      	beq.n	8001fc0 <TSK_SafetyTask+0xc>
}
 8001fbe:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ffb3 	bl	8001f2c <TSK_SafetyTask_PWMOFF>
}
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	200006e0 	.word	0x200006e0

08001fcc <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MC_RunMotorControlTasks+0x8c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b1cb      	cbz	r3, 8002006 <MC_RunMotorControlTasks+0x3a>
{
 8001fd2:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001fd4:	4d21      	ldr	r5, [pc, #132]	@ (800205c <MC_RunMotorControlTasks+0x90>)
 8001fd6:	882c      	ldrh	r4, [r5, #0]
 8001fd8:	b1b4      	cbz	r4, 8002008 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8001fda:	3c01      	subs	r4, #1
 8001fdc:	b2a4      	uxth	r4, r4
    if(hBootCapDelayCounterM1 > 0U)
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <MC_RunMotorControlTasks+0x94>)
      hMFTaskCounterM1--;
 8001fe0:	802c      	strh	r4, [r5, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001fe2:	8813      	ldrh	r3, [r2, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b11b      	cbz	r3, 8001ff0 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8001fe8:	8813      	ldrh	r3, [r2, #0]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <MC_RunMotorControlTasks+0x98>)
 8001ff2:	8813      	ldrh	r3, [r2, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b11b      	cbz	r3, 8002000 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8001ff8:	8813      	ldrh	r3, [r2, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8002000:	f7ff ffd8 	bl	8001fb4 <TSK_SafetyTask>
}
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	4770      	bx	lr
      MC_BG_Perf_Measure_Start(&PerfTraces, (uint8_t)MEASURE_TSK_MediumFrequencyTaskM1);
 8002008:	4621      	mov	r1, r4
 800200a:	4817      	ldr	r0, [pc, #92]	@ (8002068 <MC_RunMotorControlTasks+0x9c>)
 800200c:	f7ff fe16 	bl	8001c3c <MC_BG_Perf_Measure_Start>
      TSK_MediumFrequencyTaskM1();
 8002010:	f000 f912 	bl	8002238 <TSK_MediumFrequencyTaskM1>
      MC_BG_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_MediumFrequencyTaskM1);
 8002014:	4621      	mov	r1, r4
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002016:	4c15      	ldr	r4, [pc, #84]	@ (800206c <MC_RunMotorControlTasks+0xa0>)
      MC_BG_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_MediumFrequencyTaskM1);
 8002018:	4813      	ldr	r0, [pc, #76]	@ (8002068 <MC_RunMotorControlTasks+0x9c>)
 800201a:	f7ff fe3d 	bl	8001c98 <MC_BG_Perf_Measure_Stop>
      MC_APP_PostMediumFrequencyHook_M1();
 800201e:	f7ff fd15 	bl	8001a4c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002022:	4621      	mov	r1, r4
 8002024:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002028:	6883      	ldr	r3, [r0, #8]
 800202a:	4798      	blx	r3
 800202c:	6060      	str	r0, [r4, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800202e:	b130      	cbz	r0, 800203e <MC_RunMotorControlTasks+0x72>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002030:	4621      	mov	r1, r4
 8002032:	220a      	movs	r2, #10
 8002034:	f851 0b08 	ldr.w	r0, [r1], #8
 8002038:	6803      	ldr	r3, [r0, #0]
 800203a:	4798      	blx	r3
 800203c:	b908      	cbnz	r0, 8002042 <MC_RunMotorControlTasks+0x76>
{
 800203e:	2401      	movs	r4, #1
 8002040:	e7cd      	b.n	8001fde <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002042:	4620      	mov	r0, r4
 8002044:	f000 fb1e 	bl	8002684 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	89e2      	ldrh	r2, [r4, #14]
 800204c:	6846      	ldr	r6, [r0, #4]
 800204e:	68a1      	ldr	r1, [r4, #8]
 8002050:	230a      	movs	r3, #10
 8002052:	47b0      	blx	r6
 8002054:	e7f3      	b.n	800203e <MC_RunMotorControlTasks+0x72>
 8002056:	bf00      	nop
 8002058:	200006e0 	.word	0x200006e0
 800205c:	200006e6 	.word	0x200006e6
 8002060:	200006e4 	.word	0x200006e4
 8002064:	200006e2 	.word	0x200006e2
 8002068:	200006a8 	.word	0x200006a8
 800206c:	2000035c 	.word	0x2000035c

08002070 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   SIX_STEP_Clear(M1);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f880 	bl	8002178 <SIX_STEP_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TSK_HardwareFaultTask+0x18>)
 800207e:	2200      	movs	r2, #0
 8002080:	2180      	movs	r1, #128	@ 0x80
 8002082:	f7ff bcf7 	b.w	8001a74 <MCI_FaultProcessing>
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 800208c:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <mc_lock_pins+0xdc>)
 8002090:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002094:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002098:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800209c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800209e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020a0:	69d3      	ldr	r3, [r2, #28]
 80020a2:	930b      	str	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020a4:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a8:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 80020ac:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ae:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020b4:	69d3      	ldr	r3, [r2, #28]
 80020b6:	930a      	str	r3, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b8:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020bc:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
  (void) temp;
 80020c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c2:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020c4:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020c6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020c8:	69d3      	ldr	r3, [r2, #28]
 80020ca:	9309      	str	r3, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020cc:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d0:	f44f 3390 	mov.w	r3, #73728	@ 0x12000
  (void) temp;
 80020d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d6:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020d8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020da:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020dc:	69d4      	ldr	r4, [r2, #28]
 80020de:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 80020e4:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e6:	4c21      	ldr	r4, [pc, #132]	@ (800216c <mc_lock_pins+0xe0>)
 80020e8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ea:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80020ee:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020f2:	69dc      	ldr	r4, [r3, #28]
 80020f4:	9407      	str	r4, [sp, #28]
  (void) temp;
 80020f6:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f8:	f44f 3481 	mov.w	r4, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020fc:	f44f 7500 	mov.w	r5, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002100:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002102:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002104:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002106:	69dc      	ldr	r4, [r3, #28]
 8002108:	9406      	str	r4, [sp, #24]
  (void) temp;
 800210a:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210c:	f44f 3482 	mov.w	r4, #66560	@ 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002110:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002114:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002116:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002118:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800211a:	69dc      	ldr	r4, [r3, #28]
 800211c:	9405      	str	r4, [sp, #20]
  (void) temp;
 800211e:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002122:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002124:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800212a:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212c:	4910      	ldr	r1, [pc, #64]	@ (8002170 <mc_lock_pins+0xe4>)
  (void) temp;
 800212e:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002130:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002132:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002134:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002136:	69d2      	ldr	r2, [r2, #28]
 8002138:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800213a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800213e:	f44f 3284 	mov.w	r2, #67584	@ 0x10800
  (void) temp;
 8002142:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002144:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002146:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002148:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800214e:	2108      	movs	r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002150:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <mc_lock_pins+0xe8>)
  (void) temp;
 8002152:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002154:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002156:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002158:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800215e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8002160:	b00c      	add	sp, #48	@ 0x30
 8002162:	bc30      	pop	{r4, r5}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	48000400 	.word	0x48000400
 800216c:	00010100 	.word	0x00010100
 8002170:	00010002 	.word	0x00010002
 8002174:	00010008 	.word	0x00010008

08002178 <SIX_STEP_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SIX_STEP_Clear(uint8_t bMotor)
{
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN SixStep_Clear 0 */

  /* USER CODE END SixStep_Clear 0 */
  SDC_Clear(pSDC[bMotor]);
 800217a:	4d15      	ldr	r5, [pc, #84]	@ (80021d0 <SIX_STEP_Clear+0x58>)
  SixStepVars[bMotor].DutyCycleRef = SDC_GetDutyCycleRef(pSDC[bMotor]);
  BADC_Stop();
  BADC_Clear(&Bemf_ADC_M1);
 800217c:	4e15      	ldr	r6, [pc, #84]	@ (80021d4 <SIX_STEP_Clear+0x5c>)
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
  RUC_6S_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 800217e:	4f16      	ldr	r7, [pc, #88]	@ (80021d8 <SIX_STEP_Clear+0x60>)
{
 8002180:	4604      	mov	r4, r0
  SDC_Clear(pSDC[bMotor]);
 8002182:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8002186:	f000 fd69 	bl	8002c5c <SDC_Clear>
    tempDutyCycleRef = (uint16_t)(pHandle->DutyCycleRef / 65536U);
 800218a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  SixStepVars[bMotor].DutyCycleRef = SDC_GetDutyCycleRef(pSDC[bMotor]);
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <SIX_STEP_Clear+0x64>)
 8002190:	8952      	ldrh	r2, [r2, #10]
 8002192:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
  BADC_Stop();
 8002196:	f7fe ff23 	bl	8000fe0 <BADC_Stop>
  BADC_Clear(&Bemf_ADC_M1);
 800219a:	4630      	mov	r0, r6
 800219c:	f7fe fef0 	bl	8000f80 <BADC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <SIX_STEP_Clear+0x68>)
 80021a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80021a6:	f000 fc03 	bl	80029b0 <PWMC_SwitchOffPWM>
  RUC_6S_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 80021aa:	480e      	ldr	r0, [pc, #56]	@ (80021e4 <SIX_STEP_Clear+0x6c>)
 80021ac:	f7ff fcdc 	bl	8001b68 <MCI_GetImposedMotorDirection>
 80021b0:	4601      	mov	r1, r0
 80021b2:	4638      	mov	r0, r7
 80021b4:	f004 fd86 	bl	8006cc4 <RUC_6S_Clear>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80021b8:	682a      	ldr	r2, [r5, #0]
  SDC_SetSpeedSensor(pSDC[M1], &RevUpControlM1._Super);
  Bemf_ADC_M1.SpeedTimerState = LFTIM_IDLE;

  MC_Perf_Clear(&PerfTraces,bMotor);
 80021ba:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <SIX_STEP_Clear+0x70>)
 80021bc:	6157      	str	r7, [r2, #20]
  Bemf_ADC_M1.SpeedTimerState = LFTIM_IDLE;
 80021be:	2302      	movs	r3, #2
 80021c0:	f886 30c8 	strb.w	r3, [r6, #200]	@ 0xc8
  MC_Perf_Clear(&PerfTraces,bMotor);
 80021c4:	4621      	mov	r1, r4
  /* USER CODE BEGIN SixStep_Clear 1 */

  /* USER CODE END SixStep_Clear 1 */
}
 80021c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  MC_Perf_Clear(&PerfTraces,bMotor);
 80021ca:	f7ff bd23 	b.w	8001c14 <MC_Perf_Clear>
 80021ce:	bf00      	nop
 80021d0:	20000028 	.word	0x20000028
 80021d4:	2000005c 	.word	0x2000005c
 80021d8:	20000128 	.word	0x20000128
 80021dc:	200006a0 	.word	0x200006a0
 80021e0:	200006a4 	.word	0x200006a4
 80021e4:	20000000 	.word	0x20000000
 80021e8:	200006a8 	.word	0x200006a8

080021ec <SIX_STEP_Init>:
{
 80021ec:	b508      	push	{r3, lr}
    pwmcHandle[M1] = &PWM_Handle_M1;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <SIX_STEP_Init+0x34>)
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <SIX_STEP_Init+0x38>)
 80021f2:	6018      	str	r0, [r3, #0]
    PWMC_Init(&PWM_Handle_M1);
 80021f4:	f000 fb1e 	bl	8002834 <PWMC_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80021f8:	480b      	ldr	r0, [pc, #44]	@ (8002228 <SIX_STEP_Init+0x3c>)
 80021fa:	f004 fc9d 	bl	8006b38 <PID_HandleInit>
    BADC_Init(&Bemf_ADC_M1);
 80021fe:	480b      	ldr	r0, [pc, #44]	@ (800222c <SIX_STEP_Init+0x40>)
 8002200:	f7fe fe18 	bl	8000e34 <BADC_Init>
    SIX_STEP_Clear(M1);
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff ffb7 	bl	8002178 <SIX_STEP_Clear>
    SDC_GetMecSpeedRefUnitDefault(pSDC[M1]),0); /* First command to SDC */
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <SIX_STEP_Init+0x44>)
 800220c:	6819      	ldr	r1, [r3, #0]
  * @retval int16_t It returns the Default mechanical rotor speed.
  *         Expressed in the unit defined by #SPEED_UNIT
  */
static inline int16_t SDC_GetMecSpeedRefUnitDefault(const SpeednDutyCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 800220e:	b109      	cbz	r1, 8002214 <SIX_STEP_Init+0x28>
 8002210:	f9b1 102a 	ldrsh.w	r1, [r1, #42]	@ 0x2a
    MCI_ExecSpeedRamp(&Mci[M1],
 8002214:	4807      	ldr	r0, [pc, #28]	@ (8002234 <SIX_STEP_Init+0x48>)
}
 8002216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 800221a:	2200      	movs	r2, #0
 800221c:	f7ff bc18 	b.w	8001a50 <MCI_ExecSpeedRamp>
 8002220:	200006a4 	.word	0x200006a4
 8002224:	2000002c 	.word	0x2000002c
 8002228:	200001c8 	.word	0x200001c8
 800222c:	2000005c 	.word	0x2000005c
 8002230:	20000028 	.word	0x20000028
 8002234:	20000000 	.word	0x20000000

08002238 <TSK_MediumFrequencyTaskM1>:
{
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool IsSpeedReliable = BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1);
 800223a:	4877      	ldr	r0, [pc, #476]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800223c:	4c77      	ldr	r4, [pc, #476]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
  bool IsSpeedReliable = BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1);
 800223e:	f7fe ffad 	bl	800119c <BADC_CalcAvrgMecSpeedUnit>
 8002242:	4605      	mov	r5, r0
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff fc41 	bl	8001acc <MCI_GetCurrentFaults>
 800224a:	b110      	cbz	r0, 8002252 <TSK_MediumFrequencyTaskM1+0x1a>
    Mci[M1].State = FAULT_NOW;
 800224c:	230a      	movs	r3, #10
 800224e:	7063      	strb	r3, [r4, #1]
}
 8002250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fc38 	bl	8001ac8 <MCI_GetOccurredFaults>
 8002258:	bb40      	cbnz	r0, 80022ac <TSK_MediumFrequencyTaskM1+0x74>
      switch (Mci[M1].State)
 800225a:	7863      	ldrb	r3, [r4, #1]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d8f7      	bhi.n	8002250 <TSK_MediumFrequencyTaskM1+0x18>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <TSK_MediumFrequencyTaskM1+0x30>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	080023a7 	.word	0x080023a7
 800226c:	08002251 	.word	0x08002251
 8002270:	08002251 	.word	0x08002251
 8002274:	08002251 	.word	0x08002251
 8002278:	0800233f 	.word	0x0800233f
 800227c:	08002251 	.word	0x08002251
 8002280:	0800230d 	.word	0x0800230d
 8002284:	08002251 	.word	0x08002251
 8002288:	080022f9 	.word	0x080022f9
 800228c:	08002251 	.word	0x08002251
 8002290:	080022ad 	.word	0x080022ad
 8002294:	080022ed 	.word	0x080022ed
 8002298:	08002251 	.word	0x08002251
 800229c:	08002251 	.word	0x08002251
 80022a0:	08002251 	.word	0x08002251
 80022a4:	08002251 	.word	0x08002251
 80022a8:	080022b3 	.word	0x080022b3
      Mci[M1].State = FAULT_OVER;
 80022ac:	230b      	movs	r3, #11
 80022ae:	7063      	strb	r3, [r4, #1]
}
 80022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80022b2:	7823      	ldrb	r3, [r4, #0]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	f000 8089 	beq.w	80023cc <TSK_MediumFrequencyTaskM1+0x194>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80022ba:	f7ff fe1d 	bl	8001ef8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d0c6      	beq.n	8002250 <TSK_MediumFrequencyTaskM1+0x18>
              PWMC_SwitchOffPWM(pwmcHandle[M1]);
 80022c2:	4d57      	ldr	r5, [pc, #348]	@ (8002420 <TSK_MediumFrequencyTaskM1+0x1e8>)
 80022c4:	6828      	ldr	r0, [r5, #0]
 80022c6:	f000 fb73 	bl	80029b0 <PWMC_SwitchOffPWM>
              BADC_SetDirection(&Bemf_ADC_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80022ca:	4854      	ldr	r0, [pc, #336]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
 80022cc:	f7ff fc4c 	bl	8001b68 <MCI_GetImposedMotorDirection>
 80022d0:	b241      	sxtb	r1, r0
 80022d2:	4851      	ldr	r0, [pc, #324]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
 80022d4:	f7fe ffa4 	bl	8001220 <BADC_SetDirection>
              SIX_STEP_Clear(M1);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff ff4d 	bl	8002178 <SIX_STEP_Clear>
              Mci[M1].State = START;
 80022de:	2304      	movs	r3, #4
 80022e0:	7063      	strb	r3, [r4, #1]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80022e2:	6828      	ldr	r0, [r5, #0]
}
 80022e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80022e8:	f000 bb3a 	b.w	8002960 <PWMC_SwitchOnPWM>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80022ec:	7823      	ldrb	r3, [r4, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d1ae      	bne.n	8002250 <TSK_MediumFrequencyTaskM1+0x18>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80022f2:	2300      	movs	r3, #0
 80022f4:	8023      	strh	r3, [r4, #0]
}
 80022f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80022f8:	f7ff fe0e 	bl	8001f18 <TSK_StopPermanencyTimeHasElapsedM1>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d0a7      	beq.n	8002250 <TSK_MediumFrequencyTaskM1+0x18>
            BADC_Clear(&Bemf_ADC_M1);
 8002300:	4845      	ldr	r0, [pc, #276]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
 8002302:	f7fe fe3d 	bl	8000f80 <BADC_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002306:	2300      	movs	r3, #0
 8002308:	8023      	strh	r3, [r4, #0]
}
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800230c:	7823      	ldrb	r3, [r4, #0]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d05c      	beq.n	80023cc <TSK_MediumFrequencyTaskM1+0x194>
            MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002312:	4842      	ldr	r0, [pc, #264]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
 8002314:	f7ff fbba 	bl	8001a8c <MCI_ExecBufferedCommands>
            SixStepVars[M1].DutyCycleRef = SDC_CalcSpeedReference(pSDC[M1]);
 8002318:	4b42      	ldr	r3, [pc, #264]	@ (8002424 <TSK_MediumFrequencyTaskM1+0x1ec>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f000 fcf6 	bl	8002d0c <SDC_CalcSpeedReference>
 8002320:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <TSK_MediumFrequencyTaskM1+0x1f0>)
 8002322:	4602      	mov	r2, r0
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8002324:	483c      	ldr	r0, [pc, #240]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
            SixStepVars[M1].DutyCycleRef = SDC_CalcSpeedReference(pSDC[M1]);
 8002326:	801a      	strh	r2, [r3, #0]
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8002328:	f7ff f89c 	bl	8001464 <BADC_CalcRunDemagTime>
            if(!IsSpeedReliable)
 800232c:	2d00      	cmp	r5, #0
 800232e:	d18f      	bne.n	8002250 <TSK_MediumFrequencyTaskM1+0x18>
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002330:	462a      	mov	r2, r5
 8002332:	483a      	ldr	r0, [pc, #232]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
}
 8002334:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002338:	2120      	movs	r1, #32
 800233a:	f7ff bb9b 	b.w	8001a74 <MCI_FaultProcessing>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800233e:	7823      	ldrb	r3, [r4, #0]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d043      	beq.n	80023cc <TSK_MediumFrequencyTaskM1+0x194>
              if(! RUC_6S_Exec(&RevUpControlM1))
 8002344:	4839      	ldr	r0, [pc, #228]	@ (800242c <TSK_MediumFrequencyTaskM1+0x1f4>)
 8002346:	f004 fcfb 	bl	8006d40 <RUC_6S_Exec>
 800234a:	4602      	mov	r2, r0
 800234c:	2800      	cmp	r0, #0
 800234e:	d147      	bne.n	80023e0 <TSK_MediumFrequencyTaskM1+0x1a8>
                MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8002350:	4832      	ldr	r0, [pc, #200]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
 8002352:	2110      	movs	r1, #16
 8002354:	f7ff fb8e 	bl	8001a74 <MCI_FaultProcessing>
              if (true == RUC_6S_ObserverSpeedReached(&RevUpControlM1))
 8002358:	4834      	ldr	r0, [pc, #208]	@ (800242c <TSK_MediumFrequencyTaskM1+0x1f4>)
 800235a:	f004 fd6f 	bl	8006e3c <RUC_6S_ObserverSpeedReached>
 800235e:	2800      	cmp	r0, #0
 8002360:	f43f af76 	beq.w	8002250 <TSK_MediumFrequencyTaskM1+0x18>
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002364:	4f30      	ldr	r7, [pc, #192]	@ (8002428 <TSK_MediumFrequencyTaskM1+0x1f0>)
 8002366:	4832      	ldr	r0, [pc, #200]	@ (8002430 <TSK_MediumFrequencyTaskM1+0x1f8>)
 8002368:	883d      	ldrh	r5, [r7, #0]
                SixStepVars[M1].DutyCycleRef = SDC_CalcSpeedReference(pSDC[M1]);
 800236a:	4e2e      	ldr	r6, [pc, #184]	@ (8002424 <TSK_MediumFrequencyTaskM1+0x1ec>)
                                    (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 800236c:	f004 fc02 	bl	8006b74 <PID_GetKIDivisor>
 8002370:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002372:	fb05 f101 	mul.w	r1, r5, r1
 8002376:	482e      	ldr	r0, [pc, #184]	@ (8002430 <TSK_MediumFrequencyTaskM1+0x1f8>)
                BADC_SetLoopClosed(&Bemf_ADC_M1);
 8002378:	4d27      	ldr	r5, [pc, #156]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 800237a:	f004 fbf1 	bl	8006b60 <PID_SetIntegralTerm>
                SixStepVars[M1].DutyCycleRef = SDC_CalcSpeedReference(pSDC[M1]);
 800237e:	6830      	ldr	r0, [r6, #0]
 8002380:	f000 fcc4 	bl	8002d0c <SDC_CalcSpeedReference>
 8002384:	8038      	strh	r0, [r7, #0]
                BADC_SetLoopClosed(&Bemf_ADC_M1);
 8002386:	4628      	mov	r0, r5
 8002388:	f7ff f882 	bl	8001490 <BADC_SetLoopClosed>
                SDC_SetSpeedSensor(pSDC[M1], &Bemf_ADC_M1._Super);
 800238c:	6836      	ldr	r6, [r6, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800238e:	4628      	mov	r0, r5
    pHandle->SPD = SPD_Handle;
 8002390:	6175      	str	r5, [r6, #20]
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8002392:	f004 fd5d 	bl	8006e50 <SPD_GetAvrgMecSpeedUnit>
 8002396:	0403      	lsls	r3, r0, #16
 8002398:	6073      	str	r3, [r6, #4]
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 800239a:	4820      	ldr	r0, [pc, #128]	@ (800241c <TSK_MediumFrequencyTaskM1+0x1e4>)
 800239c:	f7ff fb76 	bl	8001a8c <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80023a0:	2306      	movs	r3, #6
 80023a2:	7063      	strb	r3, [r4, #1]
}
 80023a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (MCI_START == Mci[M1].DirectCommand)
 80023a6:	7823      	ldrb	r3, [r4, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f47f af51 	bne.w	8002250 <TSK_MediumFrequencyTaskM1+0x18>
            RUC_6S_UpdatePulse(&RevUpControlM1, &BusVoltageSensor_M1._Super);
 80023ae:	4921      	ldr	r1, [pc, #132]	@ (8002434 <TSK_MediumFrequencyTaskM1+0x1fc>)
 80023b0:	481e      	ldr	r0, [pc, #120]	@ (800242c <TSK_MediumFrequencyTaskM1+0x1f4>)
 80023b2:	f004 fcb9 	bl	8006d28 <RUC_6S_UpdatePulse>
            PWMC_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <TSK_MediumFrequencyTaskM1+0x1e8>)
 80023b8:	2100      	movs	r1, #0
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	f000 fab0 	bl	8002920 <PWMC_TurnOnLowSides>
            TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80023c0:	2014      	movs	r0, #20
 80023c2:	f7ff fd93 	bl	8001eec <TSK_SetChargeBootCapDelayM1>
            Mci[M1].State = CHARGE_BOOT_CAP;
 80023c6:	2310      	movs	r3, #16
 80023c8:	7063      	strb	r3, [r4, #1]
}
 80023ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SIX_STEP_Clear(motor);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fed3 	bl	8002178 <SIX_STEP_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80023d2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80023d6:	f7ff fd99 	bl	8001f0c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80023da:	2308      	movs	r3, #8
 80023dc:	7063      	strb	r3, [r4, #1]
}
 80023de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (true == RUC_6S_IsAlignStageNow(&RevUpControlM1))
 80023e0:	4812      	ldr	r0, [pc, #72]	@ (800242c <TSK_MediumFrequencyTaskM1+0x1f4>)
                  PWMC_SetPhaseVoltage(pwmcHandle[M1], SixStepVars[M1].DutyCycleRef);
 80023e2:	4d11      	ldr	r5, [pc, #68]	@ (8002428 <TSK_MediumFrequencyTaskM1+0x1f0>)
                if (true == RUC_6S_IsAlignStageNow(&RevUpControlM1))
 80023e4:	f004 fd22 	bl	8006e2c <RUC_6S_IsAlignStageNow>
 80023e8:	b960      	cbnz	r0, 8002404 <TSK_MediumFrequencyTaskM1+0x1cc>
                (void) BADC_CalcRevUpDemagTime (&Bemf_ADC_M1, SPD_GetAvrgMecSpeedUnit(&RevUpControlM1._Super));
 80023ea:	4810      	ldr	r0, [pc, #64]	@ (800242c <TSK_MediumFrequencyTaskM1+0x1f4>)
 80023ec:	f004 fd30 	bl	8006e50 <SPD_GetAvrgMecSpeedUnit>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4809      	ldr	r0, [pc, #36]	@ (8002418 <TSK_MediumFrequencyTaskM1+0x1e0>)
 80023f4:	f7ff f822 	bl	800143c <BADC_CalcRevUpDemagTime>
                SixStepVars[M1].DutyCycleRef = SDC_CalcSpeedReference(pSDC[M1]);
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <TSK_MediumFrequencyTaskM1+0x1ec>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f000 fc86 	bl	8002d0c <SDC_CalcSpeedReference>
 8002400:	8028      	strh	r0, [r5, #0]
 8002402:	e7a9      	b.n	8002358 <TSK_MediumFrequencyTaskM1+0x120>
                  PWMC_SetPhaseVoltage(pwmcHandle[M1], SixStepVars[M1].DutyCycleRef);
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <TSK_MediumFrequencyTaskM1+0x1e8>)
 8002406:	8829      	ldrh	r1, [r5, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	f000 fa35 	bl	8002878 <PWMC_SetPhaseVoltage>
                  PWMC_LoadNextStep(&PWM_Handle_M1);
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <TSK_MediumFrequencyTaskM1+0x200>)
 8002410:	f000 fa3a 	bl	8002888 <PWMC_LoadNextStep>
 8002414:	e7e9      	b.n	80023ea <TSK_MediumFrequencyTaskM1+0x1b2>
 8002416:	bf00      	nop
 8002418:	2000005c 	.word	0x2000005c
 800241c:	20000000 	.word	0x20000000
 8002420:	200006a4 	.word	0x200006a4
 8002424:	20000028 	.word	0x20000028
 8002428:	200006a0 	.word	0x200006a0
 800242c:	20000128 	.word	0x20000128
 8002430:	200001c8 	.word	0x200001c8
 8002434:	200001f4 	.word	0x200001f4
 8002438:	2000002c 	.word	0x2000002c

0800243c <TSK_SpeedTIM_task>:
  * @brief  This is the 6step commutation task. It configures the demagnetization period and
  * manages ADC regular conversions when motor is both running and stopped.
  */

__weak void TSK_SpeedTIM_task()
{
 800243c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SpeedTimerTask 0 */

  /* USER CODE END SpeedTimerTask 0 */
  if (true == BADC_CheckDetectionErrors(&Bemf_ADC_M1))
 800243e:	482f      	ldr	r0, [pc, #188]	@ (80024fc <TSK_SpeedTIM_task+0xc0>)
 8002440:	f7ff f838 	bl	80014b4 <BADC_CheckDetectionErrors>
 8002444:	2800      	cmp	r0, #0
 8002446:	d149      	bne.n	80024dc <TSK_SpeedTIM_task+0xa0>
  else
  {
    /* Nothing to do */
  }

  switch (Bemf_ADC_M1.SpeedTimerState)
 8002448:	4c2c      	ldr	r4, [pc, #176]	@ (80024fc <TSK_SpeedTIM_task+0xc0>)
 800244a:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d035      	beq.n	80024be <TSK_SpeedTIM_task+0x82>
 8002452:	2b01      	cmp	r3, #1
 8002454:	d012      	beq.n	800247c <TSK_SpeedTIM_task+0x40>
    }

    case LFTIM_IDLE:
    default:
    {
      RCM_ExecNextConv();
 8002456:	f000 fb93 	bl	8002b80 <RCM_ExecNextConv>
      RCM_WaitForConv();
 800245a:	f000 fbeb 	bl	8002c34 <RCM_WaitForConv>
      RCM_ReadOngoingConv();
 800245e:	f000 fbc7 	bl	8002bf0 <RCM_ReadOngoingConv>
      BADC_SetSpeedTimer(&Bemf_ADC_M1, SPEED_TIMER_IDLE_RATE_TICKS);
 8002462:	4620      	mov	r0, r4
 8002464:	f640 51ec 	movw	r1, #3564	@ 0xdec
 8002468:	f7ff f816 	bl	8001498 <BADC_SetSpeedTimer>
      if (false == RUC_6S_IsAlignStageNow(&RevUpControlM1))
 800246c:	4824      	ldr	r0, [pc, #144]	@ (8002500 <TSK_SpeedTIM_task+0xc4>)
 800246e:	f004 fcdd 	bl	8006e2c <RUC_6S_IsAlignStageNow>
 8002472:	b910      	cbnz	r0, 800247a <TSK_SpeedTIM_task+0x3e>
      {
       Bemf_ADC_M1.SpeedTimerState = LFTIM_COMMUTATION;
 8002474:	2301      	movs	r3, #1
 8002476:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
  }

  /* USER CODE BEGIN SpeedTimerTask 1 */

  /* USER CODE END SpeedTimerTask 1 */
}
 800247a:	bd10      	pop	{r4, pc}
      BADC_StepChangeEvent(&Bemf_ADC_M1);
 800247c:	4620      	mov	r0, r4
 800247e:	f7fe ffb7 	bl	80013f0 <BADC_StepChangeEvent>
__attribute__((section (".ccmram")))
#endif
#endif
inline void SixStep_StepCommution(void)
{
  PWMC_SetPhaseVoltage(pwmcHandle[M1], SixStepVars[M1].DutyCycleRef);
 8002482:	4a20      	ldr	r2, [pc, #128]	@ (8002504 <TSK_SpeedTIM_task+0xc8>)
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <TSK_SpeedTIM_task+0xcc>)
 8002486:	8811      	ldrh	r1, [r2, #0]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f000 f9f5 	bl	8002878 <PWMC_SetPhaseVoltage>
static inline int16_t RUC_6S_GetDirection(const RevUpCtrl_6S_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  return ((MC_NULL == pHandle) ? 0 : (int16_t)pHandle->hDirection);
#else
  return ((int16_t)pHandle->hDirection);
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <TSK_SpeedTIM_task+0xc4>)
  PWMC_ForceNextStep(&PWM_Handle_M1, RUC_6S_GetDirection(&RevUpControlM1), 0u);
 8002490:	481e      	ldr	r0, [pc, #120]	@ (800250c <TSK_SpeedTIM_task+0xd0>)
 8002492:	f993 1014 	ldrsb.w	r1, [r3, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	f000 fa9a 	bl	80029d0 <PWMC_ForceNextStep>
  PWMC_LoadNextStep(&PWM_Handle_M1);
 800249c:	481b      	ldr	r0, [pc, #108]	@ (800250c <TSK_SpeedTIM_task+0xd0>)
 800249e:	f000 f9f3 	bl	8002888 <PWMC_LoadNextStep>
      RCM_ExecNextConv();
 80024a2:	f000 fb6d 	bl	8002b80 <RCM_ExecNextConv>
      BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1, &BusVoltageSensor_M1._Super);
 80024a6:	4620      	mov	r0, r4
 80024a8:	4918      	ldr	r1, [pc, #96]	@ (800250c <TSK_SpeedTIM_task+0xd0>)
 80024aa:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <TSK_SpeedTIM_task+0xd4>)
 80024ac:	f7fe fdaa 	bl	8001004 <BADC_SetSamplingPoint>
      PWMC_SetADCTriggerChannel(&PWM_Handle_M1, *Bemf_ADC_M1.pSensing_Point);
 80024b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024b2:	4816      	ldr	r0, [pc, #88]	@ (800250c <TSK_SpeedTIM_task+0xd0>)
 80024b4:	8819      	ldrh	r1, [r3, #0]
}
 80024b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      PWMC_SetADCTriggerChannel(&PWM_Handle_M1, *Bemf_ADC_M1.pSensing_Point);
 80024ba:	f000 ba6f 	b.w	800299c <PWMC_SetADCTriggerChannel>
      RCM_ReadOngoingConv();
 80024be:	f000 fb97 	bl	8002bf0 <RCM_ReadOngoingConv>
      if (false == Bemf_ADC_M1.IsLoopClosed)
 80024c2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80024c6:	b17b      	cbz	r3, 80024e8 <TSK_SpeedTIM_task+0xac>
      BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1.Step, PWM_Handle_M1.LSModArray);
 80024c8:	4a10      	ldr	r2, [pc, #64]	@ (800250c <TSK_SpeedTIM_task+0xd0>)
 80024ca:	480c      	ldr	r0, [pc, #48]	@ (80024fc <TSK_SpeedTIM_task+0xc0>)
 80024cc:	7ad1      	ldrb	r1, [r2, #11]
 80024ce:	320c      	adds	r2, #12
 80024d0:	f7fe ff02 	bl	80012d8 <BADC_Start>
      Bemf_ADC_M1.SpeedTimerState = LFTIM_COMMUTATION;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
}
 80024da:	bd10      	pop	{r4, pc}
    MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80024dc:	480d      	ldr	r0, [pc, #52]	@ (8002514 <TSK_SpeedTIM_task+0xd8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	2120      	movs	r1, #32
 80024e2:	f7ff fac7 	bl	8001a74 <MCI_FaultProcessing>
 80024e6:	e7af      	b.n	8002448 <TSK_SpeedTIM_task+0xc>
        BADC_SetSpeedTimer(&Bemf_ADC_M1, RevUpControlM1.ElSpeedTimerDpp - Bemf_ADC_M1.DemagCounterThreshold);
 80024e8:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <TSK_SpeedTIM_task+0xc4>)
 80024ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80024ee:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80024f0:	4620      	mov	r0, r4
 80024f2:	1ac9      	subs	r1, r1, r3
 80024f4:	f7fe ffd0 	bl	8001498 <BADC_SetSpeedTimer>
 80024f8:	e7e6      	b.n	80024c8 <TSK_SpeedTIM_task+0x8c>
 80024fa:	bf00      	nop
 80024fc:	2000005c 	.word	0x2000005c
 8002500:	20000128 	.word	0x20000128
 8002504:	200006a0 	.word	0x200006a0
 8002508:	200006a4 	.word	0x200006a4
 800250c:	2000002c 	.word	0x2000002c
 8002510:	200001f4 	.word	0x200001f4
 8002514:	20000000 	.word	0x20000000

08002518 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251c:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 800251e:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002520:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <RI_SetRegCommandParser+0xd8>)
 8002522:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8002524:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002528:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 800252a:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 800252c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8002530:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8002534:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002536:	f8a0 800e 	strh.w	r8, [r0, #14]
 800253a:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 800253c:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002540:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002542:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002546:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 800254a:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800254c:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002550:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002554:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8002558:	dd36      	ble.n	80025c8 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 800255a:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800255e:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 8002562:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002566:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 800256a:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800256e:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 8002570:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002572:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002576:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 800257a:	d12d      	bne.n	80025d8 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800257c:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8002580:	f8cd e000 	str.w	lr, [sp]
 8002584:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8002586:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800258a:	eb05 0309 	add.w	r3, r5, r9
 800258e:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8002590:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002594:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8002596:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8002598:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 800259a:	d012      	beq.n	80025c2 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 800259c:	42bd      	cmp	r5, r7
 800259e:	d021      	beq.n	80025e4 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 80025a0:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 80025a4:	89f3      	ldrh	r3, [r6, #14]
 80025a6:	3301      	adds	r3, #1
 80025a8:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d0cb      	beq.n	8002546 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80025ae:	2807      	cmp	r0, #7
 80025b0:	d012      	beq.n	80025d8 <RI_SetRegCommandParser+0xc0>
 80025b2:	2301      	movs	r3, #1
 80025b4:	280a      	cmp	r0, #10
 80025b6:	9303      	str	r3, [sp, #12]
 80025b8:	d1c5      	bne.n	8002546 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80025ba:	9803      	ldr	r0, [sp, #12]
 80025bc:	b009      	add	sp, #36	@ 0x24
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d1ea      	bne.n	800259c <RI_SetRegCommandParser+0x84>
 80025c6:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 80025c8:	9b03      	ldr	r3, [sp, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f5      	bne.n	80025ba <RI_SetRegCommandParser+0xa2>
}
 80025ce:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 80025d0:	81f3      	strh	r3, [r6, #14]
}
 80025d2:	b009      	add	sp, #36	@ 0x24
 80025d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 80025d8:	2301      	movs	r3, #1
 80025da:	9303      	str	r3, [sp, #12]
}
 80025dc:	9803      	ldr	r0, [sp, #12]
 80025de:	b009      	add	sp, #36	@ 0x24
 80025e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80025e4:	2308      	movs	r3, #8
 80025e6:	9303      	str	r3, [sp, #12]
}
 80025e8:	9803      	ldr	r0, [sp, #12]
 80025ea:	b009      	add	sp, #36	@ 0x24
 80025ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f0:	08003301 	.word	0x08003301
 80025f4:	08003401 	.word	0x08003401

080025f8 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80025f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025fc:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8002604:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002606:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800260a:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <RI_GetRegCommandParser+0x84>)
 800260c:	9304      	str	r3, [sp, #16]
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002610:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002614:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002616:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002618:	f1b8 0f00 	cmp.w	r8, #0
 800261c:	d029      	beq.n	8002672 <RI_GetRegCommandParser+0x7a>
 800261e:	4607      	mov	r7, r0
 8002620:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002622:	464d      	mov	r5, r9
 8002624:	e012      	b.n	800264c <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002626:	f85e ac08 	ldr.w	sl, [lr, #-8]
 800262a:	9400      	str	r4, [sp, #0]
 800262c:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 800262e:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 8002632:	fa19 f383 	uxtah	r3, r9, r3
 8002636:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8002638:	b9e0      	cbnz	r0, 8002674 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 800263a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 800263e:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002640:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 8002642:	440a      	add	r2, r1
          txData = txData+size;
 8002644:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002646:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002648:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 800264a:	b19b      	cbz	r3, 8002674 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 800264c:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002650:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8002654:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002658:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 800265c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002660:	f10d 030e 	add.w	r3, sp, #14
 8002664:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002666:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002668:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800266c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8002670:	d0d9      	beq.n	8002626 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 8002672:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002674:	b006      	add	sp, #24
 8002676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800267a:	bf00      	nop
 800267c:	080037d1 	.word	0x080037d1
 8002680:	08003969 	.word	0x08003969

08002684 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002688:	6845      	ldr	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800268a:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800268c:	f835 3b02 	ldrh.w	r3, [r5], #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002690:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002692:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002694:	3a01      	subs	r2, #1
 8002696:	b291      	uxth	r1, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002698:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800269c:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800269e:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80026a2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
{
 80026a6:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80026a8:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80026aa:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80026ae:	d03d      	beq.n	800272c <MCP_ReceivedPacket+0xa8>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80026b0:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80026b2:	4e4f      	ldr	r6, [pc, #316]	@ (80027f0 <MCP_ReceivedPacket+0x16c>)
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80026b4:	6065      	str	r5, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80026be:	2500      	movs	r5, #0

    switch (command)
 80026c0:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80026c4:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0U;
 80026c6:	81e5      	strh	r5, [r4, #14]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80026c8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    switch (command)
 80026cc:	d872      	bhi.n	80027b4 <MCP_ReceivedPacket+0x130>
 80026ce:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 80026d2:	d822      	bhi.n	800271a <MCP_ReceivedPacket+0x96>
 80026d4:	e8df f00c 	tbb	[pc, ip]
 80026d8:	2121214c 	.word	0x2121214c
 80026dc:	21212121 	.word	0x21212121
 80026e0:	21212154 	.word	0x21212154
 80026e4:	21212121 	.word	0x21212121
 80026e8:	21212147 	.word	0x21212147
 80026ec:	21212121 	.word	0x21212121
 80026f0:	2121213f 	.word	0x2121213f
 80026f4:	21212121 	.word	0x21212121
 80026f8:	21212139 	.word	0x21212139
 80026fc:	21212121 	.word	0x21212121
 8002700:	21212159 	.word	0x21212159
 8002704:	21212121 	.word	0x21212121
 8002708:	21212135 	.word	0x21212135
 800270c:	21212121 	.word	0x21212121
 8002710:	21212161 	.word	0x21212161
 8002714:	21212121 	.word	0x21212121
 8002718:	67          	.byte	0x67
 8002719:	00          	.byte	0x00
 800271a:	2300      	movs	r3, #0
 800271c:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800271e:	68a2      	ldr	r2, [r4, #8]
 8002720:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002722:	89e3      	ldrh	r3, [r4, #14]
 8002724:	3301      	adds	r3, #1
 8002726:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002728:	b002      	add	sp, #8
 800272a:	bd70      	pop	{r4, r5, r6, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 800272c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8002730:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002732:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002736:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002738:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 800273a:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800273c:	d942      	bls.n	80027c4 <MCP_ReceivedPacket+0x140>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800273e:	200d      	movs	r0, #13
 8002740:	e7ed      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002742:	4630      	mov	r0, r6
 8002744:	f7ff f9be 	bl	8001ac4 <MCI_GetSTMState>
 8002748:	b128      	cbz	r0, 8002756 <MCP_ReceivedPacket+0xd2>
          (void)MCI_StopMotor(pMCI);
 800274a:	4630      	mov	r0, r6
 800274c:	f7ff f9d6 	bl	8001afc <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002750:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002752:	2000      	movs	r0, #0
 8002754:	e7e3      	b.n	800271e <MCP_ReceivedPacket+0x9a>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002756:	4630      	mov	r0, r6
 8002758:	f7ff f9ba 	bl	8001ad0 <MCI_StartMotor>
 800275c:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002760:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002762:	b2c0      	uxtb	r0, r0
 8002764:	e7db      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ff46 	bl	80025f8 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800276c:	89e3      	ldrh	r3, [r4, #14]
        break;
 800276e:	e7d6      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        *pHandle->txBuffer = MCP_VERSION;
 8002770:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002772:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002774:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002776:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002778:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800277a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800277c:	2000      	movs	r0, #0
        break;
 800277e:	e7ce      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff fec9 	bl	8002518 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002786:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002788:	e7c9      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        if (RUN == MCI_GetSTMState(pMCI))
 800278a:	4630      	mov	r0, r6
 800278c:	f7ff f99a 	bl	8001ac4 <MCI_GetSTMState>
 8002790:	2806      	cmp	r0, #6
 8002792:	d024      	beq.n	80027de <MCP_ReceivedPacket+0x15a>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002794:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002796:	2000      	movs	r0, #0
 8002798:	e7c1      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        (void)MCI_FaultAcknowledged(pMCI);
 800279a:	4630      	mov	r0, r6
 800279c:	f7ff f9ca 	bl	8001b34 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80027a0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80027a2:	2000      	movs	r0, #0
        break;
 80027a4:	e7bb      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        MCI_Clear_PerfMeasure(pMCI,M1);
 80027a6:	4630      	mov	r0, r6
 80027a8:	2100      	movs	r1, #0
 80027aa:	f7ff fa05 	bl	8001bb8 <MCI_Clear_PerfMeasure>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80027ae:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80027b0:	2000      	movs	r0, #0
        break;
 80027b2:	e7b4      	b.n	800271e <MCP_ReceivedPacket+0x9a>
    switch (command)
 80027b4:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 80027b8:	d1af      	bne.n	800271a <MCP_ReceivedPacket+0x96>
        HAL_NVIC_SystemReset();
 80027ba:	f002 fba5 	bl	8004f08 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80027be:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80027c0:	4628      	mov	r0, r5
        break;
 80027c2:	e7ac      	b.n	800271e <MCP_ReceivedPacket+0x9a>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <MCP_ReceivedPacket+0x170>)
 80027c6:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 80027ca:	b176      	cbz	r6, 80027ea <MCP_ReceivedPacket+0x166>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80027cc:	68a3      	ldr	r3, [r4, #8]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	b20a      	sxth	r2, r1
 80027d2:	f104 030e 	add.w	r3, r4, #14
 80027d6:	4629      	mov	r1, r5
 80027d8:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80027da:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80027dc:	e79f      	b.n	800271e <MCP_ReceivedPacket+0x9a>
          MCI_StopRamp(pMCI);
 80027de:	4630      	mov	r0, r6
 80027e0:	f7ff f9d6 	bl	8001b90 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80027e4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80027e6:	2000      	movs	r0, #0
 80027e8:	e799      	b.n	800271e <MCP_ReceivedPacket+0x9a>
 80027ea:	4633      	mov	r3, r6
 80027ec:	e7a7      	b.n	800273e <MCP_ReceivedPacket+0xba>
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000
 80027f4:	200006e8 	.word	0x200006e8

080027f8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80027f8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80027fa:	f003 f971 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <MX_MotorControl_Init+0x30>)
 8002800:	fba3 3000 	umull	r3, r0, r3, r0
 8002804:	09c0      	lsrs	r0, r0, #7
 8002806:	f002 fb91 	bl	8004f2c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <MX_MotorControl_Init+0x34>)
 800280c:	2200      	movs	r2, #0
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f002 fb2e 	bl	8004e74 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002818:	4805      	ldr	r0, [pc, #20]	@ (8002830 <MX_MotorControl_Init+0x38>)
 800281a:	f7ff fb2f 	bl	8001e7c <MCboot>
  mc_lock_pins();
}
 800281e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002822:	f7ff bc33 	b.w	800208c <mc_lock_pins>
 8002826:	bf00      	nop
 8002828:	10624dd3 	.word	0x10624dd3
 800282c:	200003e8 	.word	0x200003e8
 8002830:	200007fc 	.word	0x200007fc

08002834 <PWMC_Init>:
  }
  else
  {
#endif
    /* Clear TIMx break flag. */
    LL_TIM_ClearFlag_BRK(pHandle->pParams_str->TIMx);
 8002834:	6983      	ldr	r3, [r0, #24]

    /* Enable PWM channel. */
    LL_TIM_CC_EnableChannel(pHandle->pParams_str->TIMx, TIMxCCER_MASK_CH123);

    LL_TIM_EnableCounter(pHandle->pParams_str->TIMx);
    pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 8002836:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    LL_TIM_ClearFlag_BRK(pHandle->pParams_str->TIMx);
 8002838:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800283a:	f06f 0180 	mvn.w	r1, #128	@ 0x80
{
 800283e:	b430      	push	{r4, r5}
 8002840:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8002842:	68dc      	ldr	r4, [r3, #12]
 8002844:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8002848:	60dc      	str	r4, [r3, #12]
    pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 800284a:	f102 0584 	add.w	r5, r2, #132	@ 0x84
    pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
 800284e:	f102 019c 	add.w	r1, r2, #156	@ 0x9c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002858:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8002860:	f042 0205 	orr.w	r2, r2, #5
 8002864:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e9c0 5108 	strd	r5, r1, [r0, #32]
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002872:	bc30      	pop	{r4, r5}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <PWMC_SetPhaseVoltage>:
  }
  else
  {
#endif
    pHandle->CntPh = DutyCycle;
    LL_TIM_WriteReg(TIM1, CCR1, (uint32_t)DutyCycle);
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <PWMC_SetPhaseVoltage+0xc>)
    pHandle->CntPh = DutyCycle;
 800287a:	8001      	strh	r1, [r0, #0]
    LL_TIM_WriteReg(TIM1, CCR1, (uint32_t)DutyCycle);
 800287c:	6359      	str	r1, [r3, #52]	@ 0x34
    LL_TIM_WriteReg(TIM1, CCR2, (uint32_t)DutyCycle);
 800287e:	6399      	str	r1, [r3, #56]	@ 0x38
    LL_TIM_WriteReg(TIM1, CCR3, (uint32_t)DutyCycle);
 8002880:	63d9      	str	r1, [r3, #60]	@ 0x3c
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00

08002888 <PWMC_LoadNextStep>:
* @brief  It writes the duty cycle into timer shadow registers.
* @param  pHandle Pointer on the target component instance.
* @retval none
*/
__weak void PWMC_LoadNextStep(PWMC_Handle_t *pHandle)
{
 8002888:	b530      	push	{r4, r5, lr}
    else
    {
      if (pHandle->QuasiSynchDecay)
      {
        pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_QuasiSynch_cfg[0]);
        LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
 800288a:	7ac1      	ldrb	r1, [r0, #11]
    TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800288c:	6983      	ldr	r3, [r0, #24]
    if (pHandle->AlignFlag != 0)
 800288e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002892:	681b      	ldr	r3, [r3, #0]
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_Align_cfg);
 8002894:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
 8002896:	fa0f fe81 	sxth.w	lr, r1
    if (pHandle->AlignFlag != 0)
 800289a:	b1fd      	cbz	r5, 80028dc <PWMC_LoadNextStep+0x54>
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_Align_cfg);
 800289c:	f102 0118 	add.w	r1, r2, #24
      if (pHandle->AlignFlag == -1)
 80028a0:	3501      	adds	r5, #1
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_Align_cfg);
 80028a2:	61c1      	str	r1, [r0, #28]
        pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_CCW_Align_cfg[0]);
 80028a4:	bf07      	ittee	eq
 80028a6:	f102 0454 	addeq.w	r4, r2, #84	@ 0x54
        pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_CCW_Align_cfg[0]);
 80028aa:	f102 016c 	addeq.w	r1, r2, #108	@ 0x6c
        pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_CW_Align_cfg[0]);
 80028ae:	f102 0424 	addne.w	r4, r2, #36	@ 0x24
        pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_CW_Align_cfg[0]);
 80028b2:	f102 013c 	addne.w	r1, r2, #60	@ 0x3c
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg));
 80028b6:	6992      	ldr	r2, [r2, #24]
 80028b8:	e9c0 4108 	strd	r4, r1, [r0, #32]
 80028bc:	621a      	str	r2, [r3, #32]
          pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
        }
      }
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
    }
    LL_TIM_WriteReg(TIMx, CCMR1, *(pHandle->pCCMR1_cfg + pHandle->Step));
 80028be:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
 80028c2:	619a      	str	r2, [r3, #24]
    LL_TIM_WriteReg(TIMx, CCMR2, *(pHandle->pCCMR2_cfg + pHandle->Step));
 80028c4:	f851 202e 	ldr.w	r2, [r1, lr, lsl #2]
 80028c8:	61da      	str	r2, [r3, #28]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	615a      	str	r2, [r3, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
    LL_TIM_GenerateEvent_COM(TIMx);
    LL_TIM_GenerateEvent_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 80028da:	bd30      	pop	{r4, r5, pc}
      if (pHandle->QuasiSynchDecay)
 80028dc:	7d45      	ldrb	r5, [r0, #21]
 80028de:	008c      	lsls	r4, r1, #2
 80028e0:	b9a5      	cbnz	r5, 800290c <PWMC_LoadNextStep+0x84>
        if (1U == pHandle->LSModArray[pHandle->Step])
 80028e2:	4401      	add	r1, r0
        pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_cfg[0]);
 80028e4:	61c2      	str	r2, [r0, #28]
        if (1U == pHandle->LSModArray[pHandle->Step])
 80028e6:	7b09      	ldrb	r1, [r1, #12]
 80028e8:	2901      	cmp	r1, #1
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
 80028ea:	eb02 0c04 	add.w	ip, r2, r4
          pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_LSMod_cfg[0]);
 80028ee:	bf07      	ittee	eq
 80028f0:	f102 01cc 	addeq.w	r1, r2, #204	@ 0xcc
          pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_LSMod_cfg[0]);
 80028f4:	f102 04b4 	addeq.w	r4, r2, #180	@ 0xb4
          pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 80028f8:	f102 0484 	addne.w	r4, r2, #132	@ 0x84
          pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
 80028fc:	f102 019c 	addne.w	r1, r2, #156	@ 0x9c
 8002900:	e9c0 4108 	strd	r4, r1, [r0, #32]
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
 8002904:	f8dc 2000 	ldr.w	r2, [ip]
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	e7d8      	b.n	80028be <PWMC_LoadNextStep+0x36>
        pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_QuasiSynch_cfg[0]);
 800290c:	32e4      	adds	r2, #228	@ 0xe4
 800290e:	61c2      	str	r2, [r0, #28]
        LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->Step));
 8002910:	eb02 0c04 	add.w	ip, r2, r4
 8002914:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8002918:	621a      	str	r2, [r3, #32]
    LL_TIM_WriteReg(TIMx, CCMR2, *(pHandle->pCCMR2_cfg + pHandle->Step));
 800291a:	e9d0 4108 	ldrd	r4, r1, [r0, #32]
 800291e:	e7f1      	b.n	8002904 <PWMC_LoadNextStep+0x7c>

08002920 <PWMC_TurnOnLowSides>:
    /* Nothing to do. */
  }
  else
  {
#endif
    TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002920:	6983      	ldr	r3, [r0, #24]
    pHandle->TurnOnLowSidesAction = true;  /* Set the Flag. */
    /* Turn on the three low side switches. */
    LL_TIM_OC_SetCompareCH1(TIMx, ticks);
    LL_TIM_OC_SetCompareCH2(TIMx, ticks);
    LL_TIM_OC_SetCompareCH3(TIMx, ticks);
    LL_TIM_WriteReg(TIMx, CCMR1, pHandle->TimerCfg->CCMR1_BootCharge);
 8002922:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002924:	681b      	ldr	r3, [r3, #0]
    pHandle->TurnOnLowSidesAction = true;  /* Set the Flag. */
 8002926:	f04f 0c01 	mov.w	ip, #1
{
 800292a:	b410      	push	{r4}
    LL_TIM_WriteReg(TIMx, CCMR1, pHandle->TimerCfg->CCMR1_BootCharge);
 800292c:	69d4      	ldr	r4, [r2, #28]
    pHandle->TurnOnLowSidesAction = true;  /* Set the Flag. */
 800292e:	f880 c016 	strb.w	ip, [r0, #22]
    LL_TIM_WriteReg(TIMx, CCMR2, pHandle->TimerCfg->CCMR2_BootCharge);
 8002932:	6a10      	ldr	r0, [r2, #32]
    LL_TIM_WriteReg(TIMx, CCER, pHandle->TimerCfg->CCER_Align_cfg);
 8002934:	6992      	ldr	r2, [r2, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002936:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002938:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800293a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    LL_TIM_WriteReg(TIMx, CCMR1, pHandle->TimerCfg->CCMR1_BootCharge);
 800293c:	619c      	str	r4, [r3, #24]
    LL_TIM_WriteReg(TIMx, CCMR2, pHandle->TimerCfg->CCMR2_BootCharge);
 800293e:	61d8      	str	r0, [r3, #28]
    LL_TIM_WriteReg(TIMx, CCER, pHandle->TimerCfg->CCER_Align_cfg);
 8002940:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002942:	695a      	ldr	r2, [r3, #20]
    LL_TIM_EnableAllOutputs(TIMx);

#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002948:	ea42 020c 	orr.w	r2, r2, ip
 800294c:	615a      	str	r2, [r3, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	f042 0220 	orr.w	r2, r2, #32
 8002954:	615a      	str	r2, [r3, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44
 800295e:	4770      	bx	lr

08002960 <PWMC_SwitchOnPWM>:
    /* Nothing to do. */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002960:	6983      	ldr	r3, [r0, #24]

    pHandle->Step = pHandle->AlignStep;
 8002962:	7a81      	ldrb	r1, [r0, #10]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002964:	681b      	ldr	r3, [r3, #0]
    pHandle->Step = pHandle->AlignStep;
 8002966:	72c1      	strb	r1, [r0, #11]
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 8002968:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800296a:	2200      	movs	r2, #0
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 800296c:	f041 0101 	orr.w	r1, r1, #1
 8002970:	6059      	str	r1, [r3, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002972:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002976:	63da      	str	r2, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	615a      	str	r2, [r3, #20]
    LL_TIM_OC_SetCompareCH3(TIMx, 0u);

    LL_TIM_GenerateEvent_COM(TIMx);

    /* Main PWM Output Enable. */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002982:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002986:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800298a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298e:	645a      	str	r2, [r3, #68]	@ 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8002996:	605a      	str	r2, [r3, #4]

    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <PWMC_SetADCTriggerChannel>:
    /* Nothing to do. */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800299c:	6983      	ldr	r3, [r0, #24]
 800299e:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCTriggerCnt = SamplingPoint;
 80029a0:	8081      	strh	r1, [r0, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a8:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80029aa:	6419      	str	r1, [r3, #64]	@ 0x40
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH4(TIMx, pHandle->ADCTriggerCnt);
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <PWMC_SwitchOffPWM>:
    /* Nothing to do. */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80029b0:	6983      	ldr	r3, [r0, #24]
 80029b2:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80029b4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  WRITE_REG(TIMx->CCR1, CompareValue);
 80029b6:	2200      	movs	r2, #0
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80029b8:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80029bc:	6459      	str	r1, [r3, #68]	@ 0x44
  WRITE_REG(TIMx->CCR1, CompareValue);
 80029be:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80029c0:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80029c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029c4:	6859      	ldr	r1, [r3, #4]
    /* Main PWM Output Disable. */
    LL_TIM_DisableAllOutputs(TIMx);
    LL_TIM_OC_SetCompareCH1(TIMx, 0u);
    LL_TIM_OC_SetCompareCH2(TIMx, 0u);
    LL_TIM_OC_SetCompareCH3(TIMx, 0u);
    pHandle->CntPh = 0;
 80029c6:	8002      	strh	r2, [r0, #0]
 80029c8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80029cc:	6059      	str	r1, [r3, #4]

    LL_TIM_SetTriggerOutput(pHandle->pParams_str->TIMx, LL_TIM_TRGO_RESET);
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 80029ce:	4770      	bx	lr

080029d0 <PWMC_ForceNextStep>:
    /* Nothing to do. */
  }
  else
  {
#endif
    if (Direction > 0)
 80029d0:	2900      	cmp	r1, #0
 80029d2:	dd09      	ble.n	80029e8 <PWMC_ForceNextStep+0x18>
    {
      if (pHandle->Step == 5U)
 80029d4:	7ac2      	ldrb	r2, [r0, #11]
 80029d6:	2a05      	cmp	r2, #5
 80029d8:	d003      	beq.n	80029e2 <PWMC_ForceNextStep+0x12>
      {
        pHandle->Step = 0U;
      }
      else
      {
        pHandle->Step++;
 80029da:	3201      	adds	r2, #1
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	72c2      	strb	r2, [r0, #11]
      pHandle->Step = tStep;
    }
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 80029e0:	4770      	bx	lr
 80029e2:	2200      	movs	r2, #0
        pHandle->Step++;
 80029e4:	72c2      	strb	r2, [r0, #11]
}
 80029e6:	4770      	bx	lr
    else if (Direction < 0)
 80029e8:	d0f9      	beq.n	80029de <PWMC_ForceNextStep+0xe>
      if (pHandle->Step == 0U)
 80029ea:	7ac2      	ldrb	r2, [r0, #11]
 80029ec:	b912      	cbnz	r2, 80029f4 <PWMC_ForceNextStep+0x24>
 80029ee:	2205      	movs	r2, #5
        pHandle->Step++;
 80029f0:	72c2      	strb	r2, [r0, #11]
}
 80029f2:	4770      	bx	lr
        pHandle->Step--;
 80029f4:	3a01      	subs	r2, #1
 80029f6:	b2d2      	uxtb	r2, r2
        pHandle->Step++;
 80029f8:	72c2      	strb	r2, [r0, #11]
}
 80029fa:	4770      	bx	lr

080029fc <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80029fc:	4603      	mov	r3, r0
    retVal = MC_SW_ERROR;
  }
  else
  {
#endif
    if (true == pHandle->OverVoltageFlag)
 80029fe:	7cc0      	ldrb	r0, [r0, #19]
 8002a00:	b180      	cbz	r0, 8002a24 <PWMC_IsFaultOccurred+0x28>
    {
      retVal = MC_OVER_VOLT;
      pHandle->OverVoltageFlag = false;
 8002a02:	2200      	movs	r2, #0
 8002a04:	74da      	strb	r2, [r3, #19]
 8002a06:	2142      	movs	r1, #66	@ 0x42
      retVal = MC_OVER_VOLT;
 8002a08:	2002      	movs	r0, #2
    else
    {
      /* Nothing to do. */
    }

    if (true == pHandle->OverCurrentFlag)
 8002a0a:	7c9a      	ldrb	r2, [r3, #18]
 8002a0c:	b112      	cbz	r2, 8002a14 <PWMC_IsFaultOccurred+0x18>
    {
      retVal |= MC_OVER_CURR;
      pHandle->OverCurrentFlag = false;
 8002a0e:	2200      	movs	r2, #0
 8002a10:	749a      	strb	r2, [r3, #18]
      retVal |= MC_OVER_CURR;
 8002a12:	4608      	mov	r0, r1
    else
    {
      /* Nothing to do. */
    }

    if (true == pHandle->driverProtectionFlag)
 8002a14:	7d1a      	ldrb	r2, [r3, #20]
 8002a16:	b122      	cbz	r2, 8002a22 <PWMC_IsFaultOccurred+0x26>
    {
      retVal |= MC_DP_FAULT;
 8002a18:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
      pHandle->driverProtectionFlag = false;
 8002a1c:	2200      	movs	r2, #0
      retVal |= MC_DP_FAULT;
 8002a1e:	b280      	uxth	r0, r0
      pHandle->driverProtectionFlag = false;
 8002a20:	751a      	strb	r2, [r3, #20]
    }
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
  return (retVal);
}
 8002a22:	4770      	bx	lr
 8002a24:	2140      	movs	r1, #64	@ 0x40
 8002a26:	e7f0      	b.n	8002a0a <PWMC_IsFaultOccurred+0xe>

08002a28 <PWMC_GetLSModConfig>:
  else
  {
#endif
    for (uint8_t i = 0U; i < 6U; i++)
    {
      retVal |= pHandle->LSModArray[i] << i;
 8002a28:	7b83      	ldrb	r3, [r0, #14]
 8002a2a:	7b41      	ldrb	r1, [r0, #13]
 8002a2c:	7b02      	ldrb	r2, [r0, #12]
 8002a2e:	f890 c00f 	ldrb.w	ip, [r0, #15]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	7c01      	ldrb	r1, [r0, #16]
 8002a3c:	7c42      	ldrb	r2, [r0, #17]
 8002a3e:	ea43 00cc 	orr.w	r0, r3, ip, lsl #3
 8002a42:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8002a46:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
    }
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
  return (retVal);
}
 8002a4a:	b2c0      	uxtb	r0, r0
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <PWMC_SetLSModConfig>:
  {
#endif
    uint8_t temp;
    for (int8_t i = 5; i >= 0; i--)
    {
      temp = ((newConfig >> (uint8_t)i) & 0x01U);
 8002a50:	2300      	movs	r3, #0
 8002a52:	104a      	asrs	r2, r1, #1
 8002a54:	f361 0307 	bfi	r3, r1, #0, #8
 8002a58:	f362 230f 	bfi	r3, r2, #8, #8
 8002a5c:	108a      	asrs	r2, r1, #2
 8002a5e:	f362 4317 	bfi	r3, r2, #16, #8
 8002a62:	10ca      	asrs	r2, r1, #3
 8002a64:	f362 631f 	bfi	r3, r2, #24, #8
 8002a68:	f003 3301 	and.w	r3, r3, #16843009	@ 0x1010101
 8002a6c:	f3c1 1240 	ubfx	r2, r1, #5, #1
 8002a70:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8002a74:	7442      	strb	r2, [r0, #17]
      if (1U == temp)
 8002a76:	7401      	strb	r1, [r0, #16]
 8002a78:	60c3      	str	r3, [r0, #12]
      }
    }
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002a7a:	4770      	bx	lr

08002a7c <PWMC_SetQuasiSynchState>:
    /* Nothing to do. */
  }
  else
  {
#endif
    if (1U == State)
 8002a7c:	f1a1 0101 	sub.w	r1, r1, #1
 8002a80:	fab1 f181 	clz	r1, r1
 8002a84:	0949      	lsrs	r1, r1, #5
 8002a86:	7541      	strb	r1, [r0, #21]
      pHandle->QuasiSynchDecay = false;
    }
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  }
#endif
}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <RCM_RegisterRegConv>:
  }
  else
  {
#endif

    if (RCM_conversion_nb < RCM_MAX_CONV)
 8002a8c:	4939      	ldr	r1, [pc, #228]	@ (8002b74 <RCM_RegisterRegConv+0xe8>)
 8002a8e:	780a      	ldrb	r2, [r1, #0]
 8002a90:	2a03      	cmp	r2, #3
 8002a92:	d867      	bhi.n	8002b64 <RCM_RegisterRegConv+0xd8>
{
 8002a94:	b530      	push	{r4, r5, lr}
    {
      RCM_handle_array[RCM_conversion_nb] = regConv;
 8002a96:	4c38      	ldr	r4, [pc, #224]	@ (8002b78 <RCM_RegisterRegConv+0xec>)
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
      RCM_conversion_nb++;

      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002a98:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array[RCM_conversion_nb] = regConv;
 8002a9a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
 8002a9e:	7302      	strb	r2, [r0, #12]
      RCM_conversion_nb++;
 8002aa0:	3201      	adds	r2, #1
 8002aa2:	700a      	strb	r2, [r1, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002aa4:	689a      	ldr	r2, [r3, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002aa6:	07d4      	lsls	r4, r2, #31
 8002aa8:	d422      	bmi.n	8002af0 <RCM_RegisterRegConv+0x64>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002aaa:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002aac:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002ab4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002ab6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002ab8:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002aba:	f022 0220 	bic.w	r2, r2, #32
 8002abe:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002ac0:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002ac8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002acc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ad0:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002ad2:	689a      	ldr	r2, [r3, #8]
        LL_ADC_ClearFlag_EOC(regConv->regADC);
        LL_ADC_DisableIT_JEOC(regConv->regADC);
        LL_ADC_ClearFlag_JEOC(regConv->regADC);

        LL_ADC_StartCalibration(regConv->regADC, LL_ADC_SINGLE_ENDED);
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	dbfc      	blt.n	8002ad2 <RCM_RegisterRegConv+0x46>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002ad8:	681a      	ldr	r2, [r3, #0]
        /* ADC Enable (must be done after calibration) */
        /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
        * following a calibration phase, could have no effect on ADC
        * within certain AHB/ADC clock ratio
        */
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 8002ada:	07d1      	lsls	r1, r2, #31
 8002adc:	d408      	bmi.n	8002af0 <RCM_RegisterRegConv+0x64>
  MODIFY_REG(ADCx->CR,
 8002ade:	4927      	ldr	r1, [pc, #156]	@ (8002b7c <RCM_RegisterRegConv+0xf0>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	07d2      	lsls	r2, r2, #31
 8002aee:	d5f7      	bpl.n	8002ae0 <RCM_RegisterRegConv+0x54>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002af0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002af2:	f021 010f 	bic.w	r1, r1, #15
 8002af6:	6319      	str	r1, [r3, #48]	@ 0x30
      {
        /* Nothing to do */
      }
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
      /* Configure the sampling time (should already be configured by for non user conversions) */
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002af8:	7a01      	ldrb	r1, [r0, #8]
 8002afa:	2202      	movs	r2, #2
 8002afc:	408a      	lsls	r2, r1
 8002afe:	2909      	cmp	r1, #9
 8002b00:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002b04:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002b08:	d92e      	bls.n	8002b68 <RCM_RegisterRegConv+0xdc>
 8002b0a:	3c1e      	subs	r4, #30
 8002b0c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8002b10:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002b14:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b1c:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002b20:	fab1 f181 	clz	r1, r1
 8002b24:	fa2e fe01 	lsr.w	lr, lr, r1
 8002b28:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8002b2a:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 8002b2e:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 8002b32:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002b36:	fa91 fca1 	rbit	ip, r1
 8002b3a:	fabc fc8c 	clz	ip, ip
 8002b3e:	fa91 f1a1 	rbit	r1, r1
 8002b42:	6845      	ldr	r5, [r0, #4]
 8002b44:	fab1 f181 	clz	r1, r1
 8002b48:	fa22 f00c 	lsr.w	r0, r2, ip
 8002b4c:	40ca      	lsrs	r2, r1
 8002b4e:	fa05 f102 	lsl.w	r1, r5, r2
 8002b52:	2207      	movs	r2, #7
 8002b54:	4082      	lsls	r2, r0
 8002b56:	ea24 0202 	bic.w	r2, r4, r2
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	f843 202e 	str.w	r2, [r3, lr, lsl #2]
  bool retVal = true;
 8002b60:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  return retVal;
}
 8002b62:	bd30      	pop	{r4, r5, pc}
      retVal = false;
 8002b64:	2000      	movs	r0, #0
}
 8002b66:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002b68:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8002b6c:	f04f 0e00 	mov.w	lr, #0
 8002b70:	e7d2      	b.n	8002b18 <RCM_RegisterRegConv+0x8c>
 8002b72:	bf00      	nop
 8002b74:	20000800 	.word	0x20000800
 8002b78:	20000804 	.word	0x20000804
 8002b7c:	7fffffc0 	.word	0x7fffffc0

08002b80 <RCM_ExecNextConv>:
 *
 * @note: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (RCM_conversion_nb > 0u)
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <RCM_ExecNextConv+0x64>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b36b      	cbz	r3, 8002be2 <RCM_ExecNextConv+0x62>
  {

    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <RCM_ExecNextConv+0x68>)
 8002b88:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <RCM_ExecNextConv+0x6c>)
 8002b8a:	7819      	ldrb	r1, [r3, #0]
 8002b8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 8002b90:	7a11      	ldrb	r1, [r2, #8]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8002b92:	6812      	ldr	r2, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 8002b94:	2302      	movs	r3, #2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8002b96:	2909      	cmp	r1, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 8002b98:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8002b9c:	fa03 f301 	lsl.w	r3, r3, r1
 8002ba0:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002ba4:	bf85      	ittet	hi
 8002ba6:	381e      	subhi	r0, #30
 8002ba8:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8002bac:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 8002bb0:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002bb8:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8002bbc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002bbe:	0d1b      	lsrs	r3, r3, #20
 8002bc0:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8002bc4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6313      	str	r3, [r2, #48]	@ 0x30
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002bcc:	2304      	movs	r3, #4
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8002bce:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002bd0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002bd2:	6893      	ldr	r3, [r2, #8]
 8002bd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6093      	str	r3, [r2, #8]
  }
  else
  {
     /* no conversion registered */
  }
}
 8002be2:	4770      	bx	lr
 8002be4:	20000800 	.word	0x20000800
 8002be8:	20000801 	.word	0x20000801
 8002bec:	20000804 	.word	0x20000804

08002bf0 <RCM_ReadOngoingConv>:
 */
void RCM_ReadOngoingConv(void)
{
  uint32_t result;

  if (RCM_conversion_nb > 0u)
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <RCM_ReadOngoingConv+0x38>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b193      	cbz	r3, 8002c1c <RCM_ReadOngoingConv+0x2c>
{
 8002bf6:	b430      	push	{r4, r5}
  {
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_array_index]->regADC);
 8002bf8:	490c      	ldr	r1, [pc, #48]	@ (8002c2c <RCM_ReadOngoingConv+0x3c>)
 8002bfa:	480d      	ldr	r0, [pc, #52]	@ (8002c30 <RCM_ReadOngoingConv+0x40>)
 8002bfc:	780a      	ldrb	r2, [r1, #0]
 8002bfe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8002c02:	6804      	ldr	r4, [r0, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002c04:	6825      	ldr	r5, [r4, #0]
    if ( 0U == result )
 8002c06:	076d      	lsls	r5, r5, #29
 8002c08:	d409      	bmi.n	8002c1e <RCM_ReadOngoingConv+0x2e>
      RCM_handle_array[RCM_array_index]->data
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_array_index]->regADC);
    }

    /* Prepare next conversion */
    if (RCM_array_index == (RCM_conversion_nb - 1U))
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	429a      	cmp	r2, r3
    {
      RCM_array_index = 0U;
 8002c0e:	bf0b      	itete	eq
 8002c10:	2300      	moveq	r3, #0
    }
    else
    {
      RCM_array_index++;
 8002c12:	3201      	addne	r2, #1
      RCM_array_index = 0U;
 8002c14:	700b      	strbeq	r3, [r1, #0]
      RCM_array_index++;
 8002c16:	700a      	strbne	r2, [r1, #0]
  }
  else
  {
     /* no conversion registered */
  }
}
 8002c18:	bc30      	pop	{r4, r5}
 8002c1a:	4770      	bx	lr
 8002c1c:	4770      	bx	lr
 8002c1e:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8002c20:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_array_index]->regADC);
 8002c24:	8144      	strh	r4, [r0, #10]
 8002c26:	e7f0      	b.n	8002c0a <RCM_ReadOngoingConv+0x1a>
 8002c28:	20000800 	.word	0x20000800
 8002c2c:	20000801 	.word	0x20000801
 8002c30:	20000804 	.word	0x20000804

08002c34 <RCM_WaitForConv>:
 * @note: This shall be used only right after a call to RCM_ExecNextConv routine.
 *
 */
void RCM_WaitForConv(void)
{
  if (RCM_conversion_nb > 0u)
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <RCM_WaitForConv+0x1c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b143      	cbz	r3, 8002c4c <RCM_WaitForConv+0x18>
  {
    while (LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_array_index]->regADC) == 0U )
 8002c3a:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <RCM_WaitForConv+0x20>)
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <RCM_WaitForConv+0x24>)
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	075b      	lsls	r3, r3, #29
 8002c4a:	d5fc      	bpl.n	8002c46 <RCM_WaitForConv+0x12>
  }
  else
  {
     /* no conversion registered */
  }
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000800 	.word	0x20000800
 8002c54:	20000801 	.word	0x20000801
 8002c58:	20000804 	.word	0x20000804

08002c5c <SDC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednDutyCtrl component
  * @retval none.
  */
__weak void SDC_Clear(SpeednDutyCtrl_Handle_t *pHandle)
{
 8002c5c:	b510      	push	{r4, lr}
  }
  else
  {
#endif

    if (MCM_SPEED_MODE == pHandle->Mode)
 8002c5e:	7803      	ldrb	r3, [r0, #0]
 8002c60:	2b03      	cmp	r3, #3
{
 8002c62:	4604      	mov	r4, r0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002c64:	d003      	beq.n	8002c6e <SDC_Clear+0x12>
    }
    else
    {
      /* Nothing to do. */
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536U;
 8002c66:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	60a3      	str	r3, [r4, #8]
#ifdef NULL_PTR_CHECK_SDC
  }
#endif
}
 8002c6c:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8002c6e:	6900      	ldr	r0, [r0, #16]
 8002c70:	2100      	movs	r1, #0
 8002c72:	f003 ff75 	bl	8006b60 <PID_SetIntegralTerm>
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536U;
 8002c76:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	60a3      	str	r3, [r4, #8]
}
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	bf00      	nop

08002c80 <SDC_ExecRamp>:
  *         the boundary of the application (Above max application speed or below min
  *         application speed in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool SDC_ExecRamp(SpeednDutyCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8002c80:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_DUTY_MODE == pHandle->Mode)
 8002c82:	7803      	ldrb	r3, [r0, #0]
 8002c84:	2b09      	cmp	r3, #9
 8002c86:	d01a      	beq.n	8002cbe <SDC_ExecRamp+0x3e>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8002c88:	8bc4      	ldrh	r4, [r0, #30]
 8002c8a:	428c      	cmp	r4, r1
 8002c8c:	da03      	bge.n	8002c96 <SDC_ExecRamp+0x16>
      {
        allowedRange = false;
 8002c8e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SDC
  }
#endif
  return (allowedRange);
}
 8002c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c94:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8002c96:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 8002c9a:	428c      	cmp	r4, r1
 8002c9c:	dcf7      	bgt.n	8002c8e <SDC_ExecRamp+0xe>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8002c9e:	8c04      	ldrh	r4, [r0, #32]
 8002ca0:	428c      	cmp	r4, r1
 8002ca2:	dd03      	ble.n	8002cac <SDC_ExecRamp+0x2c>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8002ca4:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 8002ca8:	428c      	cmp	r4, r1
 8002caa:	dbf0      	blt.n	8002c8e <SDC_ExecRamp+0xe>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8002cac:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 8002cae:	b1fa      	cbz	r2, 8002cf0 <SDC_ExecRamp+0x70>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8002cb0:	1e23      	subs	r3, r4, #0
 8002cb2:	bfbc      	itt	lt
 8002cb4:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8002cb8:	33ff      	addlt	r3, #255	@ 0xff
 8002cba:	141b      	asrs	r3, r3, #16
 8002cbc:	e005      	b.n	8002cca <SDC_ExecRamp+0x4a>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 8002cbe:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	dbe4      	blt.n	8002c8e <SDC_ExecRamp+0xe>
      if (0U == hDurationms)
 8002cc4:	b1b2      	cbz	r2, 8002cf4 <SDC_ExecRamp+0x74>
      hCurrentReference = (int16_t)SDC_GetDutyCycleRef(pHandle);
 8002cc6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->SDCFrequencyHz);
 8002cca:	8b84      	ldrh	r4, [r0, #28]
        pHandle->TargetFinal = hTargetFinal;
 8002ccc:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->SDCFrequencyHz);
 8002cce:	fb04 f202 	mul.w	r2, r4, r2
        wAux /= 1000U;
 8002cd2:	4c0d      	ldr	r4, [pc, #52]	@ (8002d08 <SDC_ExecRamp+0x88>)
 8002cd4:	fba4 4202 	umull	r4, r2, r4, r2
 8002cd8:	0992      	lsrs	r2, r2, #6
        pHandle->RampRemainingStep++;
 8002cda:	3201      	adds	r2, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8002cdc:	1acb      	subs	r3, r1, r3
 8002cde:	041b      	lsls	r3, r3, #16
        pHandle->RampRemainingStep++;
 8002ce0:	60c2      	str	r2, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8002ce2:	fb93 f3f2 	sdiv	r3, r3, r2
        pHandle->IncDecAmount = wAux1;
 8002ce6:	6183      	str	r3, [r0, #24]
        allowedRange = false;
 8002ce8:	2001      	movs	r0, #1
}
 8002cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cee:	4770      	bx	lr
        if (MCM_SPEED_MODE == pHandle->Mode)
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d005      	beq.n	8002d00 <SDC_ExecRamp+0x80>
          pHandle->DutyCycleRef = ((uint32_t)hTargetFinal) * 65536U;
 8002cf4:	0409      	lsls	r1, r1, #16
 8002cf6:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 8002cfc:	6183      	str	r3, [r0, #24]
 8002cfe:	e7f3      	b.n	8002ce8 <SDC_ExecRamp+0x68>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8002d00:	0409      	lsls	r1, r1, #16
 8002d02:	6041      	str	r1, [r0, #4]
 8002d04:	e7f8      	b.n	8002cf8 <SDC_ExecRamp+0x78>
 8002d06:	bf00      	nop
 8002d08:	10624dd3 	.word	0x10624dd3

08002d0c <SDC_CalcSpeedReference>:
  * @param  pHandle: handler of the current instance of the SpeednDutyCtrl component
  * @retval int16_t motor dutycycle reference. This value represents actually the
  *         dutycycle expressed in digit.
  */
__weak uint16_t SDC_CalcSpeedReference(SpeednDutyCtrl_Handle_t *pHandle)
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_DUTY_MODE == pHandle->Mode)
 8002d0e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8002d10:	68c3      	ldr	r3, [r0, #12]
    if (MCM_DUTY_MODE == pHandle->Mode)
 8002d12:	2a09      	cmp	r2, #9
{
 8002d14:	4604      	mov	r4, r0
    if (MCM_DUTY_MODE == pHandle->Mode)
 8002d16:	d017      	beq.n	8002d48 <SDC_CalcSpeedReference+0x3c>
    if (pHandle->RampRemainingStep > 1U)
 8002d18:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8002d1a:	6846      	ldr	r6, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8002d1c:	d90c      	bls.n	8002d38 <SDC_CalcSpeedReference+0x2c>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8002d1e:	6981      	ldr	r1, [r0, #24]
 8002d20:	440e      	add	r6, r1

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8002d22:	3b01      	subs	r3, #1
      /* Compute speed error */
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_DUTY_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8002d24:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 8002d26:	60c3      	str	r3, [r0, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8002d28:	4633      	mov	r3, r6
 8002d2a:	db09      	blt.n	8002d40 <SDC_CalcSpeedReference+0x34>
 8002d2c:	141b      	asrs	r3, r3, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002d2e:	2a03      	cmp	r2, #3
 8002d30:	d016      	beq.n	8002d60 <SDC_CalcSpeedReference+0x54>
      pHandle->DutyCycleRef = (uint32_t)wCurrentReference;
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_DUTY_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hDutyCycleReference = (uint16_t)((int16_t)(wCurrentReference >> 16));
#else
      hDutyCycleReference = (uint16_t)((int16_t)(wCurrentReference / 65536));
 8002d32:	b298      	uxth	r0, r3
      pHandle->DutyCycleRef = ((uint32_t)hDutyCycleReference) * 65536U;
 8002d34:	60a6      	str	r6, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SDC
  }
#endif
  return (hDutyCycleReference);
}
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8002d38:	d026      	beq.n	8002d88 <SDC_CalcSpeedReference+0x7c>
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 8002d3a:	2e00      	cmp	r6, #0
 8002d3c:	4633      	mov	r3, r6
 8002d3e:	daf5      	bge.n	8002d2c <SDC_CalcSpeedReference+0x20>
 8002d40:	f506 437f 	add.w	r3, r6, #65280	@ 0xff00
 8002d44:	33ff      	adds	r3, #255	@ 0xff
 8002d46:	e7f1      	b.n	8002d2c <SDC_CalcSpeedReference+0x20>
    if (pHandle->RampRemainingStep > 1U)
 8002d48:	2b01      	cmp	r3, #1
      wCurrentReference = (int32_t)pHandle->DutyCycleRef;
 8002d4a:	6886      	ldr	r6, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8002d4c:	d922      	bls.n	8002d94 <SDC_CalcSpeedReference+0x88>
      wCurrentReference += pHandle->IncDecAmount;
 8002d4e:	6982      	ldr	r2, [r0, #24]
      pHandle->DutyCycleRef = (uint32_t)wCurrentReference;
 8002d50:	4416      	add	r6, r2
      pHandle->RampRemainingStep--;
 8002d52:	3b01      	subs	r3, #1
      hDutyCycleReference = (uint16_t)((int16_t)(wCurrentReference / 65536));
 8002d54:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 8002d56:	60c3      	str	r3, [r0, #12]
      hDutyCycleReference = (uint16_t)((int16_t)(wCurrentReference / 65536));
 8002d58:	4633      	mov	r3, r6
 8002d5a:	db1f      	blt.n	8002d9c <SDC_CalcSpeedReference+0x90>
 8002d5c:	141b      	asrs	r3, r3, #16
 8002d5e:	e7e8      	b.n	8002d32 <SDC_CalcSpeedReference+0x26>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8002d60:	6960      	ldr	r0, [r4, #20]
        hError = hMeasuredSpeed - hTargetSpeed;
 8002d62:	b29d      	uxth	r5, r3
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8002d64:	f004 f874 	bl	8006e50 <SPD_GetAvrgMecSpeedUnit>
      if (hTargetSpeed < 0)
 8002d68:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
        hError = hTargetSpeed - hMeasuredSpeed;
 8002d6c:	bfcd      	iteet	gt
 8002d6e:	1a2b      	subgt	r3, r5, r0
        hError = hMeasuredSpeed - hTargetSpeed;
 8002d70:	1b40      	suble	r0, r0, r5
 8002d72:	b201      	sxthle	r1, r0
        hError = hTargetSpeed - hMeasuredSpeed;
 8002d74:	b219      	sxthgt	r1, r3
      hDutyCycleReference = (uint16_t)PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8002d76:	6920      	ldr	r0, [r4, #16]
 8002d78:	f003 ff26 	bl	8006bc8 <PI_Controller>
 8002d7c:	4603      	mov	r3, r0
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8002d7e:	6066      	str	r6, [r4, #4]
      pHandle->DutyCycleRef = ((uint32_t)hDutyCycleReference) * 65536U;
 8002d80:	041e      	lsls	r6, r3, #16
      hDutyCycleReference = (uint16_t)PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8002d82:	b280      	uxth	r0, r0
      pHandle->DutyCycleRef = ((uint32_t)hDutyCycleReference) * 65536U;
 8002d84:	60a6      	str	r6, [r4, #8]
}
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002d88:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8002d8c:	2100      	movs	r1, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002d8e:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 8002d90:	60c1      	str	r1, [r0, #12]
 8002d92:	e7cc      	b.n	8002d2e <SDC_CalcSpeedReference+0x22>
    else if (1U == pHandle->RampRemainingStep)
 8002d94:	d007      	beq.n	8002da6 <SDC_CalcSpeedReference+0x9a>
      hDutyCycleReference = (uint16_t)((int16_t)(wCurrentReference / 65536));
 8002d96:	2e00      	cmp	r6, #0
 8002d98:	4633      	mov	r3, r6
 8002d9a:	dadf      	bge.n	8002d5c <SDC_CalcSpeedReference+0x50>
 8002d9c:	f506 437f 	add.w	r3, r6, #65280	@ 0xff00
 8002da0:	33ff      	adds	r3, #255	@ 0xff
 8002da2:	141b      	asrs	r3, r3, #16
 8002da4:	e7c5      	b.n	8002d32 <SDC_CalcSpeedReference+0x26>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002da6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8002daa:	2200      	movs	r2, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002dac:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 8002dae:	60c2      	str	r2, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002db0:	e7bf      	b.n	8002d32 <SDC_CalcSpeedReference+0x26>
 8002db2:	bf00      	nop

08002db4 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002db4:	4b42      	ldr	r3, [pc, #264]	@ (8002ec0 <USART1_IRQHandler+0x10c>)
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	0652      	lsls	r2, r2, #25
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART1_IRQHandler(void)
{
 8002dba:	b510      	push	{r4, lr}
 8002dbc:	d509      	bpl.n	8002dd2 <USART1_IRQHandler+0x1e>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002dbe:	4941      	ldr	r1, [pc, #260]	@ (8002ec4 <USART1_IRQHandler+0x110>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8002dc0:	4841      	ldr	r0, [pc, #260]	@ (8002ec8 <USART1_IRQHandler+0x114>)
 8002dc2:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002dc4:	2440      	movs	r4, #64	@ 0x40
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	644a      	str	r2, [r1, #68]	@ 0x44
 8002dcc:	621c      	str	r4, [r3, #32]
 8002dce:	f7fd fe4d 	bl	8000a6c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <USART1_IRQHandler+0x10c>)
 8002dd4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002dd6:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002dd8:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002dda:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002ddc:	074c      	lsls	r4, r1, #29
 8002dde:	d565      	bpl.n	8002eac <USART1_IRQHandler+0xf8>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002de0:	07d8      	lsls	r0, r3, #31
 8002de2:	d51c      	bpl.n	8002e1e <USART1_IRQHandler+0x6a>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NCF);
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <USART1_IRQHandler+0x10c>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	4a39      	ldr	r2, [pc, #228]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002de8:	210e      	movs	r1, #14
 8002dea:	6219      	str	r1, [r3, #32]
 8002dec:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8002df0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 8002dfc:	e840 3100 	strex	r1, r3, [r0]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d1f3      	bne.n	8002dec <USART1_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002e06:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002e0e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	f502 6000 	add.w	r0, r2, #2048	@ 0x800
 8002e16:	e840 3100 	strex	r1, r3, [r0]
 8002e1a:	2900      	cmp	r1, #0
 8002e1c:	d1f3      	bne.n	8002e06 <USART1_IRQHandler+0x52>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <USART1_IRQHandler+0x10c>)
 8002e20:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002e22:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002e24:	06d2      	lsls	r2, r2, #27
 8002e26:	d540      	bpl.n	8002eaa <USART1_IRQHandler+0xf6>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002e28:	06db      	lsls	r3, r3, #27
 8002e2a:	d53e      	bpl.n	8002eaa <USART1_IRQHandler+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002e2e:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
 8002e32:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002e36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	f502 6000 	add.w	r0, r2, #2048	@ 0x800
 8002e3e:	e840 3100 	strex	r1, r3, [r0]
 8002e42:	2900      	cmp	r1, #0
 8002e44:	d1f3      	bne.n	8002e2e <USART1_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	4a21      	ldr	r2, [pc, #132]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002e48:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002e50:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 8002e58:	e840 3100 	strex	r1, r3, [r0]
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	d1f3      	bne.n	8002e48 <USART1_IRQHandler+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002e62:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8002e66:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 8002e72:	e840 3100 	strex	r1, r3, [r0]
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d1f3      	bne.n	8002e62 <USART1_IRQHandler+0xae>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <USART1_IRQHandler+0x10c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ecc <USART1_IRQHandler+0x118>)
 8002e7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002e80:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8002e84:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 8002e90:	e840 3100 	strex	r1, r3, [r0]
 8002e94:	2900      	cmp	r1, #0
 8002e96:	d1f3      	bne.n	8002e80 <USART1_IRQHandler+0xcc>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <USART1_IRQHandler+0x110>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8002e9a:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <USART1_IRQHandler+0x114>)
 8002e9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  }

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8002ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea4:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8002ea6:	f7fd bfbb 	b.w	8000e20 <ASPEP_HWReset>
}
 8002eaa:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002eac:	07d9      	lsls	r1, r3, #31
 8002eae:	d5b6      	bpl.n	8002e1e <USART1_IRQHandler+0x6a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002eb0:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002eb4:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	d193      	bne.n	8002de4 <USART1_IRQHandler+0x30>
 8002ebc:	e7af      	b.n	8002e1e <USART1_IRQHandler+0x6a>
 8002ebe:	bf00      	nop
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	2000036c 	.word	0x2000036c
 8002ecc:	40013000 	.word	0x40013000

08002ed0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8002ed0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8002ed2:	f7ff f8cd 	bl	8002070 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x6>

08002ed8 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8002ed8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002eda:	4c0d      	ldr	r4, [pc, #52]	@ (8002f10 <SysTick_Handler+0x38>)
 8002edc:	7823      	ldrb	r3, [r4, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d010      	beq.n	8002f04 <SysTick_Handler+0x2c>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <SysTick_Handler+0x3c>)
 8002ee8:	7023      	strb	r3, [r4, #0]
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	039b      	lsls	r3, r3, #14
 8002eee:	d505      	bpl.n	8002efc <SysTick_Handler+0x24>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8002ef4:	4808      	ldr	r0, [pc, #32]	@ (8002f18 <SysTick_Handler+0x40>)
 8002ef6:	6053      	str	r3, [r2, #4]
 8002ef8:	f7fd ff42 	bl	8000d80 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8002efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002f00:	f7ff b864 	b.w	8001fcc <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002f04:	f001 f8b2 	bl	800406c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002f08:	f002 f82c 	bl	8004f64 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e7ea      	b.n	8002ee6 <SysTick_Handler+0xe>
 8002f10:	200003dc 	.word	0x200003dc
 8002f14:	40020000 	.word	0x40020000
 8002f18:	2000036c 	.word	0x2000036c

08002f1c <ADC4_IRQHandler>:
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <ADC4_IRQHandler+0x34>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
{
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 4 */

  /* USER CODE END CURRENT_REGULATION_IRQn 4 */

  if (LL_ADC_IsActiveFlag_AWD1(ADC4) != 0U)
 8002f20:	0611      	lsls	r1, r2, #24
 8002f22:	d502      	bpl.n	8002f2a <ADC4_IRQHandler+0xe>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_AWD1(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->IER, LL_ADC_IT_AWD1) == (LL_ADC_IT_AWD1));
 8002f24:	685a      	ldr	r2, [r3, #4]
  {
    if (LL_ADC_IsEnabledIT_AWD1(ADC4) != 0U)
 8002f26:	0612      	lsls	r2, r2, #24
 8002f28:	d400      	bmi.n	8002f2c <ADC4_IRQHandler+0x10>
 8002f2a:	4770      	bx	lr
{
 8002f2c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t StartMeasure = DWT->CYCCNT;
 8002f2e:	4909      	ldr	r1, [pc, #36]	@ (8002f54 <ADC4_IRQHandler+0x38>)
    {
      /* Clear Flags. */
      LL_ADC_ClearFlag_AWD1(ADC4);
      MC_Perf_Measure_Start(&PerfTraces, (uint8_t)MEASURE_TSK_ADCTimerM1);
      BADC_IsZcDetected(&Bemf_ADC_M1, PWM_Handle_M1.Step);
 8002f30:	4a09      	ldr	r2, [pc, #36]	@ (8002f58 <ADC4_IRQHandler+0x3c>)
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002f32:	4c0a      	ldr	r4, [pc, #40]	@ (8002f5c <ADC4_IRQHandler+0x40>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002f34:	2080      	movs	r0, #128	@ 0x80
 8002f36:	6018      	str	r0, [r3, #0]
    uint32_t StartMeasure = DWT->CYCCNT;
 8002f38:	684b      	ldr	r3, [r1, #4]
 8002f3a:	4809      	ldr	r0, [pc, #36]	@ (8002f60 <ADC4_IRQHandler+0x44>)
 8002f3c:	7ad1      	ldrb	r1, [r2, #11]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002f3e:	61a3      	str	r3, [r4, #24]
 8002f40:	f7fe f8a2 	bl	8001088 <BADC_IsZcDetected>
      MC_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_ADCTimerM1);
 8002f44:	4620      	mov	r0, r4
 8002f46:	2101      	movs	r1, #1
  }

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 5 */

  /* USER CODE END CURRENT_REGULATION_IRQn 5 */
}
 8002f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MC_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_ADCTimerM1);
 8002f4c:	f7fe be82 	b.w	8001c54 <MC_Perf_Measure_Stop>
 8002f50:	50000500 	.word	0x50000500
 8002f54:	e0001000 	.word	0xe0001000
 8002f58:	2000002c 	.word	0x2000002c
 8002f5c:	200006a8 	.word	0x200006a8
 8002f60:	2000005c 	.word	0x2000005c

08002f64 <TIM2_IRQHandler>:
/**
  * @brief     LFtimer interrupt handler.
  * @param[in] None
  */
void PERIOD_COMM_IRQHandler(void)
{
 8002f64:	b508      	push	{r3, lr}
    uint32_t StartMeasure = DWT->CYCCNT;
 8002f66:	4a0b      	ldr	r2, [pc, #44]	@ (8002f94 <TIM2_IRQHandler+0x30>)
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002f68:	490b      	ldr	r1, [pc, #44]	@ (8002f98 <TIM2_IRQHandler+0x34>)
    uint32_t StartMeasure = DWT->CYCCNT;
 8002f6a:	6850      	ldr	r0, [r2, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f70:	691a      	ldr	r2, [r3, #16]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002f72:	6288      	str	r0, [r1, #40]	@ 0x28
 8002f74:	0791      	lsls	r1, r2, #30
 8002f76:	d507      	bpl.n	8002f88 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_CC1IE) == (TIM_DIER_CC1IE)) ? 1UL : 0UL);
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	0792      	lsls	r2, r2, #30
 8002f7c:	d504      	bpl.n	8002f88 <TIM2_IRQHandler+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002f7e:	f06f 0202 	mvn.w	r2, #2
 8002f82:	611a      	str	r2, [r3, #16]
  if (LL_TIM_IsActiveFlag_CC1(TIM2) != 0U)
  {
    if (LL_TIM_IsEnabledIT_CC1(TIM2) != 0U)
    {
      LL_TIM_ClearFlag_CC1(TIM2);
      TSK_SpeedTIM_task();
 8002f84:	f7ff fa5a 	bl	800243c <TSK_SpeedTIM_task>
  {
    /* Nothing to do. */
  }

  MC_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_SpeedTimerM1);
}
 8002f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Perf_Measure_Stop(&PerfTraces, (uint8_t)MEASURE_TSK_SpeedTimerM1);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <TIM2_IRQHandler+0x34>)
 8002f8e:	2102      	movs	r1, #2
 8002f90:	f7fe be60 	b.w	8001c54 <MC_Perf_Measure_Stop>
 8002f94:	e0001000 	.word	0xe0001000
 8002f98:	200006a8 	.word	0x200006a8

08002f9c <TIM1_BRK_TIM15_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <TIM1_BRK_TIM15_IRQHandler+0x2c>)
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	0611      	lsls	r1, r2, #24
 8002fa2:	d505      	bpl.n	8002fb0 <TIM1_BRK_TIM15_IRQHandler+0x14>
    /* Nothing to do. */
  }
  else
  {
#endif
    pHandle->OverCurrentFlag = true;
 8002fa4:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <TIM1_BRK_TIM15_IRQHandler+0x30>)
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002fa6:	f06f 0080 	mvn.w	r0, #128	@ 0x80
 8002faa:	2101      	movs	r1, #1
 8002fac:	6118      	str	r0, [r3, #16]
 8002fae:	7491      	strb	r1, [r2, #18]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <TIM1_BRK_TIM15_IRQHandler+0x2c>)
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	05d2      	lsls	r2, r2, #23
 8002fb6:	d505      	bpl.n	8002fc4 <TIM1_BRK_TIM15_IRQHandler+0x28>
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <TIM1_BRK_TIM15_IRQHandler+0x30>)
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002fba:	f46f 7080 	mvn.w	r0, #256	@ 0x100
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	6118      	str	r0, [r3, #16]
 8002fc2:	7491      	strb	r1, [r2, #18]
  {
    /* Nothing to do. */
  }

  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here. */
  MC_RunMotorControlTasks();
 8002fc4:	f7ff b802 	b.w	8001fcc <MC_RunMotorControlTasks>
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	2000002c 	.word	0x2000002c

08002fd0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_MspInit+0x30>)
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
{
 8002fd8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	619a      	str	r2, [r3, #24]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	f002 0201 	and.w	r2, r2, #1
 8002fe2:	9200      	str	r2, [sp, #0]
 8002fe4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002fec:	61da      	str	r2, [r3, #28]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002ff8:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002ffc:	f001 bf28 	b.w	8004e50 <HAL_NVIC_SetPriorityGrouping>
 8003000:	40021000 	.word	0x40021000
 8003004:	00000000 	.word	0x00000000

08003008 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003008:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800300a:	6802      	ldr	r2, [r0, #0]
{
 800300c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003010:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003018:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800301c:	930a      	str	r3, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 800301e:	d053      	beq.n	80030c8 <HAL_ADC_MspInit+0xc0>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003020:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_ADC_MspInit+0x120>)
 8003022:	429a      	cmp	r2, r3
 8003024:	d005      	beq.n	8003032 <HAL_ADC_MspInit+0x2a>

    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 8003026:	4b41      	ldr	r3, [pc, #260]	@ (800312c <HAL_ADC_MspInit+0x124>)
 8003028:	429a      	cmp	r2, r3
 800302a:	d01d      	beq.n	8003068 <HAL_ADC_MspInit+0x60>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 800302c:	b00d      	add	sp, #52	@ 0x34
 800302e:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003032:	4a3f      	ldr	r2, [pc, #252]	@ (8003130 <HAL_ADC_MspInit+0x128>)
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	3301      	adds	r3, #1
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003038:	2b01      	cmp	r3, #1
    HAL_RCC_ADC34_CLK_ENABLED++;
 800303a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800303c:	d039      	beq.n	80030b2 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_ADC_MspInit+0x12c>)
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003040:	483d      	ldr	r0, [pc, #244]	@ (8003138 <HAL_ADC_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 800304c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8003110 <HAL_ADC_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003054:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003056:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003058:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800305e:	f001 ffc7 	bl	8004ff0 <HAL_GPIO_Init>
}
 8003062:	b00d      	add	sp, #52	@ 0x34
 8003064:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003068:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_ADC_MspInit+0x128>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800306e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003070:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003072:	d109      	bne.n	8003088 <HAL_ADC_MspInit+0x80>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003074:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <HAL_ADC_MspInit+0x12c>)
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003084:	9304      	str	r3, [sp, #16]
 8003086:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	4b2a      	ldr	r3, [pc, #168]	@ (8003134 <HAL_ADC_MspInit+0x12c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	482b      	ldr	r0, [pc, #172]	@ (8003138 <HAL_ADC_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003092:	615a      	str	r2, [r3, #20]
 8003094:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 8003096:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8003118 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BEMF_U_Pin|M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 80030a2:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a8:	f001 ffa2 	bl	8004ff0 <HAL_GPIO_Init>
}
 80030ac:	b00d      	add	sp, #52	@ 0x34
 80030ae:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC34_CLK_ENABLE();
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_ADC_MspInit+0x12c>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80030ba:	615a      	str	r2, [r3, #20]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	9b02      	ldr	r3, [sp, #8]
 80030c6:	e7ba      	b.n	800303e <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030cc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80030d0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8003120 <HAL_ADC_MspInit+0x118>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80030da:	615a      	str	r2, [r3, #20]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80030e2:	9200      	str	r2, [sp, #0]
 80030e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80030ec:	615a      	str	r2, [r3, #20]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80030f6:	a906      	add	r1, sp, #24
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80030fc:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003100:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003102:	f001 ff75 	bl	8004ff0 <HAL_GPIO_Init>
}
 8003106:	b00d      	add	sp, #52	@ 0x34
 8003108:	f85d fb04 	ldr.w	pc, [sp], #4
 800310c:	f3af 8000 	nop.w
 8003110:	00002000 	.word	0x00002000
 8003114:	00000003 	.word	0x00000003
 8003118:	0000d000 	.word	0x0000d000
 800311c:	00000003 	.word	0x00000003
 8003120:	00000008 	.word	0x00000008
 8003124:	00000003 	.word	0x00000003
 8003128:	50000400 	.word	0x50000400
 800312c:	50000500 	.word	0x50000500
 8003130:	20000814 	.word	0x20000814
 8003134:	40021000 	.word	0x40021000
 8003138:	48000400 	.word	0x48000400

0800313c <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800313c:	4a11      	ldr	r2, [pc, #68]	@ (8003184 <HAL_TIM_Base_MspInit+0x48>)
 800313e:	6803      	ldr	r3, [r0, #0]
 8003140:	4293      	cmp	r3, r2
{
 8003142:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8003144:	d011      	beq.n	800316a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_MspInit+0x14>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800314c:	b002      	add	sp, #8
 800314e:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003150:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	61da      	str	r2, [r3, #28]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	9b01      	ldr	r3, [sp, #4]
}
 8003166:	b002      	add	sp, #8
 8003168:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316a:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <HAL_TIM_Base_MspInit+0x4c>)
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003172:	619a      	str	r2, [r3, #24]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	9b00      	ldr	r3, [sp, #0]
}
 800317e:	b002      	add	sp, #8
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800318c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800318e:	4a27      	ldr	r2, [pc, #156]	@ (800322c <HAL_TIM_MspPostInit+0xa0>)
 8003190:	6801      	ldr	r1, [r0, #0]
{
 8003192:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003196:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800319c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80031a0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80031a2:	d001      	beq.n	80031a8 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031a4:	b008      	add	sp, #32
 80031a6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031ac:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031b0:	2002      	movs	r0, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80031b8:	615a      	str	r2, [r3, #20]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031ca:	615a      	str	r2, [r3, #20]
 80031cc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031ce:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031d8:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031dc:	2601      	movs	r6, #1
 80031de:	2703      	movs	r7, #3
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80031e0:	a902      	add	r1, sp, #8
 80031e2:	4813      	ldr	r0, [pc, #76]	@ (8003230 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031e6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80031ec:	f001 ff00 	bl	8004ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80031f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031f4:	2302      	movs	r3, #2
 80031f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80031fc:	2202      	movs	r2, #2
 80031fe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003204:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003208:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f001 fef1 	bl	8004ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 800320e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003212:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	a902      	add	r1, sp, #8
 8003216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 800321a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800321e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003222:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f001 fee4 	bl	8004ff0 <HAL_GPIO_Init>
}
 8003228:	b008      	add	sp, #32
 800322a:	bdd0      	pop	{r4, r6, r7, pc}
 800322c:	40012c00 	.word	0x40012c00
 8003230:	48000400 	.word	0x48000400

08003234 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003234:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003236:	4b2c      	ldr	r3, [pc, #176]	@ (80032e8 <HAL_UART_MspInit+0xb4>)
 8003238:	6802      	ldr	r2, [r0, #0]
{
 800323a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800323e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003244:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003248:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 800324a:	d001      	beq.n	8003250 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800324c:	b008      	add	sp, #32
 800324e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003250:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003254:	4e25      	ldr	r6, [pc, #148]	@ (80032ec <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800325c:	619a      	str	r2, [r3, #24]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800326e:	615a      	str	r2, [r3, #20]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003276:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003278:	22c0      	movs	r2, #192	@ 0xc0
 800327a:	2302      	movs	r3, #2
 800327c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003280:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003282:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	481a      	ldr	r0, [pc, #104]	@ (80032f0 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003288:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328a:	a902      	add	r1, sp, #8
 800328c:	f001 feb0 	bl	8004ff0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003290:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003292:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003294:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003296:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800329a:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800329e:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032a2:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032a6:	f001 fe61 	bl	8004f6c <HAL_DMA_Init>
 80032aa:	b9b0      	cbnz	r0, 80032da <HAL_UART_MspInit+0xa6>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80032ac:	4c12      	ldr	r4, [pc, #72]	@ (80032f8 <HAL_UART_MspInit+0xc4>)
 80032ae:	4913      	ldr	r1, [pc, #76]	@ (80032fc <HAL_UART_MspInit+0xc8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80032b0:	676e      	str	r6, [r5, #116]	@ 0x74
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b2:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b4:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b6:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032ba:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032bc:	2280      	movs	r2, #128	@ 0x80
 80032be:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032c2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c6:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80032ca:	6275      	str	r5, [r6, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032cc:	f001 fe4e 	bl	8004f6c <HAL_DMA_Init>
 80032d0:	b930      	cbnz	r0, 80032e0 <HAL_UART_MspInit+0xac>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032d2:	672c      	str	r4, [r5, #112]	@ 0x70
 80032d4:	6265      	str	r5, [r4, #36]	@ 0x24
}
 80032d6:	b008      	add	sp, #32
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80032da:	f7fe fbb3 	bl	8001a44 <Error_Handler>
 80032de:	e7e5      	b.n	80032ac <HAL_UART_MspInit+0x78>
      Error_Handler();
 80032e0:	f7fe fbb0 	bl	8001a44 <Error_Handler>
 80032e4:	e7f5      	b.n	80032d2 <HAL_UART_MspInit+0x9e>
 80032e6:	bf00      	nop
 80032e8:	40013800 	.word	0x40013800
 80032ec:	2000044c 	.word	0x2000044c
 80032f0:	48000400 	.word	0x48000400
 80032f4:	40020058 	.word	0x40020058
 80032f8:	20000408 	.word	0x20000408
 80032fc:	40020044 	.word	0x40020044

08003300 <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003300:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8003302:	3908      	subs	r1, #8
{
 8003304:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003308:	2920      	cmp	r1, #32
 800330a:	d812      	bhi.n	8003332 <RI_SetRegisterGlobal+0x32>
 800330c:	e8df f001 	tbb	[pc, r1]
 8003310:	11111117 	.word	0x11111117
 8003314:	11111111 	.word	0x11111111
 8003318:	11111121 	.word	0x11111121
 800331c:	11111111 	.word	0x11111111
 8003320:	1111112f 	.word	0x1111112f
 8003324:	11111111 	.word	0x11111111
 8003328:	11111139 	.word	0x11111139
 800332c:	11111111 	.word	0x11111111
 8003330:	4d          	.byte	0x4d
 8003331:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003332:	2200      	movs	r2, #0
 8003334:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003336:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800333c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800333e:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8003340:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8003344:	bf14      	ite	ne
 8003346:	2005      	movne	r0, #5
 8003348:	2004      	moveq	r0, #4
}
 800334a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 800334e:	801a      	strh	r2, [r3, #0]
}
 8003350:	4770      	bx	lr
      switch (regID)
 8003352:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003356:	d039      	beq.n	80033cc <RI_SetRegisterGlobal+0xcc>
 8003358:	d942      	bls.n	80033e0 <RI_SetRegisterGlobal+0xe0>
 800335a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800335e:	d035      	beq.n	80033cc <RI_SetRegisterGlobal+0xcc>
 8003360:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003364:	4290      	cmp	r0, r2
 8003366:	bf14      	ite	ne
 8003368:	2005      	movne	r0, #5
 800336a:	2004      	moveq	r0, #4
 800336c:	e02f      	b.n	80033ce <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 800336e:	2818      	cmp	r0, #24
      *size = 4;
 8003370:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8003374:	bf14      	ite	ne
 8003376:	2005      	movne	r0, #5
 8003378:	4610      	moveq	r0, r2
}
 800337a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 800337e:	801a      	strh	r2, [r3, #0]
}
 8003380:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8003382:	2101      	movs	r1, #1
 8003384:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003386:	f992 0000 	ldrsb.w	r0, [r2]
 800338a:	b328      	cbz	r0, 80033d8 <RI_SetRegisterGlobal+0xd8>
 800338c:	fa1f f08c 	uxth.w	r0, ip
 8003390:	e003      	b.n	800339a <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8003392:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003394:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003398:	b1f4      	cbz	r4, 80033d8 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 800339a:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800339e:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80033a0:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80033a4:	d3f5      	bcc.n	8003392 <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 80033a6:	2004      	movs	r0, #4
 80033a8:	e7c6      	b.n	8003338 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	3202      	adds	r2, #2
 80033ae:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80033b0:	fa1f fc8c 	uxth.w	ip, ip
 80033b4:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80033b6:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80033b8:	d81a      	bhi.n	80033f0 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 80033ba:	28a8      	cmp	r0, #168	@ 0xa8
 80033bc:	d0f3      	beq.n	80033a6 <RI_SetRegisterGlobal+0xa6>
 80033be:	d81b      	bhi.n	80033f8 <RI_SetRegisterGlobal+0xf8>
 80033c0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80033c4:	2828      	cmp	r0, #40	@ 0x28
 80033c6:	d0ee      	beq.n	80033a6 <RI_SetRegisterGlobal+0xa6>
 80033c8:	2005      	movs	r0, #5
 80033ca:	e7b5      	b.n	8003338 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 80033cc:	2000      	movs	r0, #0
      *size = 2;
 80033ce:	2202      	movs	r2, #2
}
 80033d0:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80033d4:	801a      	strh	r2, [r3, #0]
}
 80033d6:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80033d8:	2300      	movs	r3, #0
 80033da:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80033dc:	2004      	movs	r0, #4
 80033de:	e7ab      	b.n	8003338 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 80033e0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80033e4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80033e8:	bf14      	ite	ne
 80033ea:	2005      	movne	r0, #5
 80033ec:	2004      	moveq	r0, #4
 80033ee:	e7ee      	b.n	80033ce <RI_SetRegisterGlobal+0xce>
        *size = 0;
 80033f0:	2200      	movs	r2, #0
 80033f2:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80033f4:	200a      	movs	r0, #10
 80033f6:	e79f      	b.n	8003338 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 80033f8:	28e8      	cmp	r0, #232	@ 0xe8
 80033fa:	d1e5      	bne.n	80033c8 <RI_SetRegisterGlobal+0xc8>
 80033fc:	e7d3      	b.n	80033a6 <RI_SetRegisterGlobal+0xa6>
 80033fe:	bf00      	nop

08003400 <RI_SetRegisterMotor1>:
{
 8003400:	b530      	push	{r4, r5, lr}
 8003402:	b08d      	sub	sp, #52	@ 0x34
  switch(typeID)
 8003404:	3908      	subs	r1, #8
{
 8003406:	f9bd e040 	ldrsh.w	lr, [sp, #64]	@ 0x40
 800340a:	4694      	mov	ip, r2
 800340c:	461c      	mov	r4, r3
  switch(typeID)
 800340e:	2920      	cmp	r1, #32
 8003410:	d812      	bhi.n	8003438 <RI_SetRegisterMotor1+0x38>
 8003412:	e8df f001 	tbb	[pc, r1]
 8003416:	1116      	.short	0x1116
 8003418:	11111111 	.word	0x11111111
 800341c:	11261111 	.word	0x11261111
 8003420:	11111111 	.word	0x11111111
 8003424:	11561111 	.word	0x11561111
 8003428:	11111111 	.word	0x11111111
 800342c:	11411111 	.word	0x11411111
 8003430:	11111111 	.word	0x11111111
 8003434:	1111      	.short	0x1111
 8003436:	64          	.byte	0x64
 8003437:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003438:	2300      	movs	r3, #0
 800343a:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800343c:	2007      	movs	r0, #7
}
 800343e:	b00d      	add	sp, #52	@ 0x34
 8003440:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003442:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 8003446:	f000 816b 	beq.w	8003720 <RI_SetRegisterMotor1+0x320>
 800344a:	f200 80d9 	bhi.w	8003600 <RI_SetRegisterMotor1+0x200>
 800344e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
            retVal = MCP_ERROR_RO_REG;
 8003452:	2848      	cmp	r0, #72	@ 0x48
 8003454:	bf14      	ite	ne
 8003456:	2005      	movne	r0, #5
 8003458:	2004      	moveq	r0, #4
      *size = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	8023      	strh	r3, [r4, #0]
}
 800345e:	b00d      	add	sp, #52	@ 0x34
 8003460:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003462:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003466:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8003468:	d011      	beq.n	800348e <RI_SetRegisterMotor1+0x8e>
 800346a:	f200 80ba 	bhi.w	80035e2 <RI_SetRegisterMotor1+0x1e2>
 800346e:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003472:	f000 8175 	beq.w	8003760 <RI_SetRegisterMotor1+0x360>
 8003476:	f200 80df 	bhi.w	8003638 <RI_SetRegisterMotor1+0x238>
 800347a:	2890      	cmp	r0, #144	@ 0x90
 800347c:	f000 8179 	beq.w	8003772 <RI_SetRegisterMotor1+0x372>
 8003480:	28d0      	cmp	r0, #208	@ 0xd0
 8003482:	f040 819c 	bne.w	80037be <RI_SetRegisterMotor1+0x3be>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003486:	48bd      	ldr	r0, [pc, #756]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 8003488:	b209      	sxth	r1, r1
 800348a:	f003 fb5f 	bl	8006b4c <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 800348e:	2000      	movs	r0, #0
      *size = 2;
 8003490:	2302      	movs	r3, #2
 8003492:	8023      	strh	r3, [r4, #0]
}
 8003494:	b00d      	add	sp, #52	@ 0x34
 8003496:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 8003498:	2201      	movs	r2, #1
 800349a:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800349c:	f99c 3000 	ldrsb.w	r3, [ip]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8099 	beq.w	80035d8 <RI_SetRegisterMotor1+0x1d8>
 80034a6:	fa1f f38e 	uxth.w	r3, lr
 80034aa:	e005      	b.n	80034b8 <RI_SetRegisterMotor1+0xb8>
    *size = *size + 1U;
 80034ac:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80034ae:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80034b2:	2900      	cmp	r1, #0
 80034b4:	f000 8090 	beq.w	80035d8 <RI_SetRegisterMotor1+0x1d8>
    *size = *size + 1U;
 80034b8:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80034ba:	4293      	cmp	r3, r2
    *size = *size + 1U;
 80034bc:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80034be:	d8f5      	bhi.n	80034ac <RI_SetRegisterMotor1+0xac>
 80034c0:	e08d      	b.n	80035de <RI_SetRegisterMotor1+0x1de>
      switch (regID)
 80034c2:	2858      	cmp	r0, #88	@ 0x58
 80034c4:	f000 813c 	beq.w	8003740 <RI_SetRegisterMotor1+0x340>
 80034c8:	2898      	cmp	r0, #152	@ 0x98
 80034ca:	f000 80a7 	beq.w	800361c <RI_SetRegisterMotor1+0x21c>
          retVal = MCP_ERROR_RO_REG;
 80034ce:	2818      	cmp	r0, #24
 80034d0:	bf14      	ite	ne
 80034d2:	2005      	movne	r0, #5
 80034d4:	2004      	moveq	r0, #4
      *size = 4;
 80034d6:	2304      	movs	r3, #4
 80034d8:	8023      	strh	r3, [r4, #0]
}
 80034da:	b00d      	add	sp, #52	@ 0x34
 80034dc:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80034de:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 80034e0:	1c8a      	adds	r2, r1, #2
 80034e2:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80034e4:	fa1f f38e 	uxth.w	r3, lr
 80034e8:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 80034ea:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80034ec:	f200 8092 	bhi.w	8003614 <RI_SetRegisterMotor1+0x214>
        switch (regID)
 80034f0:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80034f4:	f000 8126 	beq.w	8003744 <RI_SetRegisterMotor1+0x344>
 80034f8:	f240 8117 	bls.w	800372a <RI_SetRegisterMotor1+0x32a>
 80034fc:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003500:	f000 80b1 	beq.w	8003666 <RI_SetRegisterMotor1+0x266>
 8003504:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 8003508:	f040 8118 	bne.w	800373c <RI_SetRegisterMotor1+0x33c>
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800350c:	f8bc 3008 	ldrh.w	r3, [ip, #8]
 8003510:	499b      	ldr	r1, [pc, #620]	@ (8003780 <RI_SetRegisterMotor1+0x380>)
            bemfRegIntParam.OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8003512:	f8bc e014 	ldrh.w	lr, [ip, #20]
            bemfRegIntParam.ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8003516:	f8bc 200c 	ldrh.w	r2, [ip, #12]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 800351a:	4d9a      	ldr	r5, [pc, #616]	@ (8003784 <RI_SetRegisterMotor1+0x384>)
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800351c:	f242 30b6 	movw	r0, #9142	@ 0x23b6
 8003520:	fb00 f303 	mul.w	r3, r0, r3
 8003524:	fba1 4303 	umull	r4, r3, r1, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	f8ad 301a 	strh.w	r3, [sp, #26]
            BemfAdcConfig.SamplingPointOn = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800352e:	f8bc 300a 	ldrh.w	r3, [ip, #10]
            BemfAdcConfig.AdcThresholdHighPerc = *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8003532:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 8003536:	f8ad 4012 	strh.w	r4, [sp, #18]
            BemfAdcConfig.SamplingPointOn = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	fba1 4303 	umull	r4, r3, r1, r3
 8003542:	095b      	lsrs	r3, r3, #5
            bemfRegIntParam.OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8003544:	fb00 fe0e 	mul.w	lr, r0, lr
            BemfAdcConfig.SamplingPointOn = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8003548:	f8ad 301c 	strh.w	r3, [sp, #28]
            bemfRegIntParam.OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800354c:	fba1 3e0e 	umull	r3, lr, r1, lr
            bemfRegIntParam.ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8003550:	4b8d      	ldr	r3, [pc, #564]	@ (8003788 <RI_SetRegisterMotor1+0x388>)
 8003552:	0252      	lsls	r2, r2, #9
 8003554:	fba3 4202 	umull	r4, r2, r3, r2
 8003558:	f3c2 144f 	ubfx	r4, r2, #5, #16
            bemfRegIntParam.ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 800355c:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 8003560:	0252      	lsls	r2, r2, #9
 8003562:	fba3 3202 	umull	r3, r2, r3, r2
            bemfRegIntParam.OnSensingDisThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8003566:	f8bc 3016 	ldrh.w	r3, [ip, #22]
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	fba1 1303 	umull	r1, r3, r1, r3
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8003572:	f8bc 1012 	ldrh.w	r1, [ip, #18]
 8003576:	fba5 5101 	umull	r5, r1, r5, r1
            bemfRegIntParam.ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 800357a:	2000      	movs	r0, #0
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 800357c:	0889      	lsrs	r1, r1, #2
            bemfRegIntParam.OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800357e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8003582:	f8ad 1020 	strh.w	r1, [sp, #32]
            bemfRegIntParam.ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8003586:	4601      	mov	r1, r0
            bemfRegIntParam.ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8003588:	f3c2 124f 	ubfx	r2, r2, #5, #16
            bemfRegIntParam.OnSensingDisThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800358c:	095b      	lsrs	r3, r3, #5
            bemfRegIntParam.ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 800358e:	f364 000f 	bfi	r0, r4, #0, #16
 8003592:	f36e 010f 	bfi	r1, lr, #0, #16
 8003596:	f362 401f 	bfi	r0, r2, #16, #16
 800359a:	f363 411f 	bfi	r1, r3, #16, #16
 800359e:	e9cd 0100 	strd	r0, r1, [sp]
            BemfAdcConfig.AdcThresholdPwmPerc = *(uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 80035a2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
            BemfAdcConfig.AWDfiltering = *(uint16_t *)&rawData[22]; //cstat !MISRAC2012-Rule-11.3
 80035a6:	f8bc 2018 	ldrh.w	r2, [ip, #24]
            bemfRegIntParam.ComputationDelay = *(uint16_t *)&rawData[24];
 80035aa:	f8bc 401a 	ldrh.w	r4, [ip, #26]
            BemfAdcConfig.AdcThresholdPwmPerc = *(uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 80035ae:	f8ad 1010 	strh.w	r1, [sp, #16]
            BemfAdcConfig.AdcThresholdLowPerc = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 80035b2:	f8bc 1006 	ldrh.w	r1, [ip, #6]
            BemfAdcConfig.AWDfiltering = *(uint16_t *)&rawData[22]; //cstat !MISRAC2012-Rule-11.3
 80035b6:	f88d 201e 	strb.w	r2, [sp, #30]
            bemfRegIntParam.ComputationDelay = *(uint16_t *)&rawData[24];
 80035ba:	f8ad 4008 	strh.w	r4, [sp, #8]
            BemfAdcConfig.AdcThresholdLowPerc = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 80035be:	f8ad 1014 	strh.w	r1, [sp, #20]
            bemfAdcDemagConfig.DemagMinimumThreshold = *(uint16_t *)&rawData[14]; //cstat !MISRAC2012-Rule-11.3
 80035c2:	f8bc 4010 	ldrh.w	r4, [ip, #16]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig, &bemfAdcDemagConfig, &bemfRegIntParam);
 80035c6:	4871      	ldr	r0, [pc, #452]	@ (800378c <RI_SetRegisterMotor1+0x38c>)
            bemfAdcDemagConfig.DemagMinimumThreshold = *(uint16_t *)&rawData[14]; //cstat !MISRAC2012-Rule-11.3
 80035c8:	940b      	str	r4, [sp, #44]	@ 0x2c
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig, &bemfAdcDemagConfig, &bemfRegIntParam);
 80035ca:	466b      	mov	r3, sp
 80035cc:	aa08      	add	r2, sp, #32
 80035ce:	a904      	add	r1, sp, #16
 80035d0:	f7fd ff8e 	bl	80014f0 <BADC_SetBemfSensorlessParam>
  uint8_t retVal = MCP_CMD_OK;
 80035d4:	2000      	movs	r0, #0
 80035d6:	e732      	b.n	800343e <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80035d8:	2300      	movs	r3, #0
 80035da:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 80035de:	2004      	movs	r0, #4
 80035e0:	e72d      	b.n	800343e <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 80035e2:	f241 4390 	movw	r3, #5264	@ 0x1490
 80035e6:	4298      	cmp	r0, r3
 80035e8:	f000 80bf 	beq.w	800376a <RI_SetRegisterMotor1+0x36a>
 80035ec:	d932      	bls.n	8003654 <RI_SetRegisterMotor1+0x254>
 80035ee:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80035f2:	4298      	cmp	r0, r3
 80035f4:	f040 80d4 	bne.w	80037a0 <RI_SetRegisterMotor1+0x3a0>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80035f8:	4860      	ldr	r0, [pc, #384]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 80035fa:	f003 fadf 	bl	8006bbc <PID_SetKDDivisorPOW2>
          break;
 80035fe:	e746      	b.n	800348e <RI_SetRegisterMotor1+0x8e>
      switch (regID)
 8003600:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8003604:	f040 808a 	bne.w	800371c <RI_SetRegisterMotor1+0x31c>
          PWMC_SetQuasiSynchState(&PWM_Handle_M1, regdata8);
 8003608:	7811      	ldrb	r1, [r2, #0]
 800360a:	4861      	ldr	r0, [pc, #388]	@ (8003790 <RI_SetRegisterMotor1+0x390>)
 800360c:	f7ff fa36 	bl	8002a7c <PWMC_SetQuasiSynchState>
  uint8_t retVal = MCP_CMD_OK;
 8003610:	2000      	movs	r0, #0
 8003612:	e722      	b.n	800345a <RI_SetRegisterMotor1+0x5a>
        *size = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8003618:	200a      	movs	r0, #10
 800361a:	e710      	b.n	800343e <RI_SetRegisterMotor1+0x3e>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 800361c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003620:	495c      	ldr	r1, [pc, #368]	@ (8003794 <RI_SetRegisterMotor1+0x394>)
 8003622:	485d      	ldr	r0, [pc, #372]	@ (8003798 <RI_SetRegisterMotor1+0x398>)
 8003624:	fb81 2103 	smull	r2, r1, r1, r3
 8003628:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800362c:	2200      	movs	r2, #0
 800362e:	b209      	sxth	r1, r1
 8003630:	f7fe fa0e 	bl	8001a50 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003634:	2000      	movs	r0, #0
          break;
 8003636:	e74e      	b.n	80034d6 <RI_SetRegisterMotor1+0xd6>
      switch (regID)
 8003638:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800363c:	f43f af27 	beq.w	800348e <RI_SetRegisterMotor1+0x8e>
 8003640:	f200 80bd 	bhi.w	80037be <RI_SetRegisterMotor1+0x3be>
 8003644:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003648:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800364c:	bf0c      	ite	eq
 800364e:	2004      	moveq	r0, #4
 8003650:	2005      	movne	r0, #5
 8003652:	e71d      	b.n	8003490 <RI_SetRegisterMotor1+0x90>
      switch (regID)
 8003654:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003658:	4298      	cmp	r0, r3
 800365a:	f040 80b0 	bne.w	80037be <RI_SetRegisterMotor1+0x3be>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800365e:	4847      	ldr	r0, [pc, #284]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 8003660:	f003 fa82 	bl	8006b68 <PID_SetKPDivisorPOW2>
          break;
 8003664:	e713      	b.n	800348e <RI_SetRegisterMotor1+0x8e>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003666:	074b      	lsls	r3, r1, #29
 8003668:	d1d6      	bne.n	8003618 <RI_SetRegisterMotor1+0x218>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 800366a:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 800366c:	292f      	cmp	r1, #47	@ 0x2f
 800366e:	d8d3      	bhi.n	8003618 <RI_SetRegisterMotor1+0x218>
              for (i = 0; i <nbrOfPhase; i++)
 8003670:	08c9      	lsrs	r1, r1, #3
 8003672:	d0af      	beq.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003674:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8003678:	4a46      	ldr	r2, [pc, #280]	@ (8003794 <RI_SetRegisterMotor1+0x394>)
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 800367a:	f8bc 5006 	ldrh.w	r5, [ip, #6]
 800367e:	fb82 4003 	smull	r4, r0, r2, r3
 8003682:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8003686:	4b45      	ldr	r3, [pc, #276]	@ (800379c <RI_SetRegisterMotor1+0x39c>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003688:	f8bc 4008 	ldrh.w	r4, [ip, #8]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800368c:	839c      	strh	r4, [r3, #28]
              for (i = 0; i <nbrOfPhase; i++)
 800368e:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8003690:	841d      	strh	r5, [r3, #32]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003692:	83d8      	strh	r0, [r3, #30]
 8003694:	d09e      	beq.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003696:	f9bc 400a 	ldrsh.w	r4, [ip, #10]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800369a:	f8bc 5010 	ldrh.w	r5, [ip, #16]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800369e:	fb82 e004 	smull	lr, r0, r2, r4
 80036a2:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80036a6:	2902      	cmp	r1, #2
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80036a8:	f8bc 400e 	ldrh.w	r4, [ip, #14]
 80036ac:	859c      	strh	r4, [r3, #44]	@ 0x2c
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80036ae:	8558      	strh	r0, [r3, #42]	@ 0x2a
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80036b0:	851d      	strh	r5, [r3, #40]	@ 0x28
 80036b2:	d08f      	beq.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80036b4:	f9bc 0012 	ldrsh.w	r0, [ip, #18]
 80036b8:	fb82 4200 	smull	r4, r2, r2, r0
 80036bc:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80036c0:	f8bc 4016 	ldrh.w	r4, [ip, #22]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80036c4:	f8bc 0018 	ldrh.w	r0, [ip, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80036c8:	8698      	strh	r0, [r3, #52]	@ 0x34
              for (i = 0; i <nbrOfPhase; i++)
 80036ca:	2903      	cmp	r1, #3
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80036cc:	871c      	strh	r4, [r3, #56]	@ 0x38
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80036ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036d0:	d080      	beq.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80036d2:	f9bc 401a 	ldrsh.w	r4, [ip, #26]
 80036d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003794 <RI_SetRegisterMotor1+0x394>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80036d8:	f8bc 5020 	ldrh.w	r5, [ip, #32]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80036dc:	fb82 e004 	smull	lr, r0, r2, r4
 80036e0:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80036e4:	2905      	cmp	r1, #5
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80036e6:	f8bc 401e 	ldrh.w	r4, [ip, #30]
 80036ea:	f8a3 4044 	strh.w	r4, [r3, #68]	@ 0x44
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80036ee:	f8a3 0042 	strh.w	r0, [r3, #66]	@ 0x42
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80036f2:	f8a3 5040 	strh.w	r5, [r3, #64]	@ 0x40
 80036f6:	f47f af6d 	bne.w	80035d4 <RI_SetRegisterMotor1+0x1d4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80036fa:	f9bc 1022 	ldrsh.w	r1, [ip, #34]	@ 0x22
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80036fe:	f8bc 0028 	ldrh.w	r0, [ip, #40]	@ 0x28
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003702:	fb82 4201 	smull	r4, r2, r2, r1
 8003706:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 800370a:	f8bc 4026 	ldrh.w	r4, [ip, #38]	@ 0x26
 800370e:	f8a3 4050 	strh.w	r4, [r3, #80]	@ 0x50
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003712:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003716:	f8a3 004c 	strh.w	r0, [r3, #76]	@ 0x4c
              for (i = 0; i <nbrOfPhase; i++)
 800371a:	e75b      	b.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
      switch (regID)
 800371c:	2005      	movs	r0, #5
 800371e:	e69c      	b.n	800345a <RI_SetRegisterMotor1+0x5a>
          PWMC_SetLSModConfig(&PWM_Handle_M1, regdataU8);
 8003720:	7811      	ldrb	r1, [r2, #0]
 8003722:	481b      	ldr	r0, [pc, #108]	@ (8003790 <RI_SetRegisterMotor1+0x390>)
 8003724:	f7ff f994 	bl	8002a50 <PWMC_SetLSModConfig>
          break;
 8003728:	e772      	b.n	8003610 <RI_SetRegisterMotor1+0x210>
        switch (regID)
 800372a:	28a8      	cmp	r0, #168	@ 0xa8
 800372c:	f43f af57 	beq.w	80035de <RI_SetRegisterMotor1+0x1de>
 8003730:	d847      	bhi.n	80037c2 <RI_SetRegisterMotor1+0x3c2>
 8003732:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003736:	2828      	cmp	r0, #40	@ 0x28
 8003738:	f43f af51 	beq.w	80035de <RI_SetRegisterMotor1+0x1de>
 800373c:	2005      	movs	r0, #5
 800373e:	e67e      	b.n	800343e <RI_SetRegisterMotor1+0x3e>
          retVal = MCP_ERROR_RO_REG;
 8003740:	2004      	movs	r0, #4
 8003742:	e6c8      	b.n	80034d6 <RI_SetRegisterMotor1+0xd6>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003744:	f8dc 3002 	ldr.w	r3, [ip, #2]
 8003748:	4912      	ldr	r1, [pc, #72]	@ (8003794 <RI_SetRegisterMotor1+0x394>)
 800374a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800374e:	fb81 0103 	smull	r0, r1, r1, r3
 8003752:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003756:	4810      	ldr	r0, [pc, #64]	@ (8003798 <RI_SetRegisterMotor1+0x398>)
 8003758:	b209      	sxth	r1, r1
 800375a:	f7fe f979 	bl	8001a50 <MCI_ExecSpeedRamp>
            break;
 800375e:	e739      	b.n	80035d4 <RI_SetRegisterMotor1+0x1d4>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003760:	4806      	ldr	r0, [pc, #24]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 8003762:	b209      	sxth	r1, r1
 8003764:	f003 fa22 	bl	8006bac <PID_SetKD>
          break;
 8003768:	e691      	b.n	800348e <RI_SetRegisterMotor1+0x8e>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800376a:	4804      	ldr	r0, [pc, #16]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 800376c:	f003 fa0a 	bl	8006b84 <PID_SetKIDivisorPOW2>
          break;
 8003770:	e68d      	b.n	800348e <RI_SetRegisterMotor1+0x8e>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003772:	4802      	ldr	r0, [pc, #8]	@ (800377c <RI_SetRegisterMotor1+0x37c>)
 8003774:	b209      	sxth	r1, r1
 8003776:	f003 f9e7 	bl	8006b48 <PID_SetKP>
          break;
 800377a:	e688      	b.n	800348e <RI_SetRegisterMotor1+0x8e>
 800377c:	200001c8 	.word	0x200001c8
 8003780:	51eb851f 	.word	0x51eb851f
 8003784:	aaaaaaab 	.word	0xaaaaaaab
 8003788:	88888889 	.word	0x88888889
 800378c:	2000005c 	.word	0x2000005c
 8003790:	2000002c 	.word	0x2000002c
 8003794:	2aaaaaab 	.word	0x2aaaaaab
 8003798:	20000000 	.word	0x20000000
 800379c:	20000128 	.word	0x20000128
      switch (regID)
 80037a0:	f241 43cf 	movw	r3, #5327	@ 0x14cf
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d90a      	bls.n	80037be <RI_SetRegisterMotor1+0x3be>
 80037a8:	f641 2390 	movw	r3, #6800	@ 0x1a90
 80037ac:	4298      	cmp	r0, r3
 80037ae:	d00c      	beq.n	80037ca <RI_SetRegisterMotor1+0x3ca>
 80037b0:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80037b4:	4298      	cmp	r0, r3
 80037b6:	bf14      	ite	ne
 80037b8:	2005      	movne	r0, #5
 80037ba:	2004      	moveq	r0, #4
 80037bc:	e668      	b.n	8003490 <RI_SetRegisterMotor1+0x90>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80037be:	2005      	movs	r0, #5
 80037c0:	e666      	b.n	8003490 <RI_SetRegisterMotor1+0x90>
        switch (regID)
 80037c2:	28e8      	cmp	r0, #232	@ 0xe8
 80037c4:	f43f af0b 	beq.w	80035de <RI_SetRegisterMotor1+0x1de>
 80037c8:	e7b8      	b.n	800373c <RI_SetRegisterMotor1+0x33c>
      switch (regID)
 80037ca:	2004      	movs	r0, #4
 80037cc:	e660      	b.n	8003490 <RI_SetRegisterMotor1+0x90>
 80037ce:	bf00      	nop

080037d0 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80037d0:	b530      	push	{r4, r5, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	461c      	mov	r4, r3
    switch (typeID)
 80037d6:	f1a1 0308 	sub.w	r3, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80037da:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 80037de:	4615      	mov	r5, r2
    switch (typeID)
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d812      	bhi.n	800380a <RI_GetRegisterGlobal+0x3a>
 80037e4:	e8df f003 	tbb	[pc, r3]
 80037e8:	1111111d 	.word	0x1111111d
 80037ec:	11111111 	.word	0x11111111
 80037f0:	11111141 	.word	0x11111141
 80037f4:	11111111 	.word	0x11111111
 80037f8:	11111124 	.word	0x11111124
 80037fc:	11111111 	.word	0x11111111
 8003800:	11111150 	.word	0x11111150
 8003804:	11111111 	.word	0x11111111
 8003808:	14          	.byte	0x14
 8003809:	00          	.byte	0x00
 800380a:	2007      	movs	r0, #7
}
 800380c:	b003      	add	sp, #12
 800380e:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003810:	2828      	cmp	r0, #40	@ 0x28
 8003812:	d044      	beq.n	800389e <RI_GetRegisterGlobal+0xce>
        *size = (*rawSize) + 2U;
 8003814:	882b      	ldrh	r3, [r5, #0]
 8003816:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003818:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800381a:	b29b      	uxth	r3, r3
 800381c:	8023      	strh	r3, [r4, #0]
}
 800381e:	b003      	add	sp, #12
 8003820:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8003822:	f1bc 0f00 	cmp.w	ip, #0
 8003826:	dd38      	ble.n	800389a <RI_GetRegisterGlobal+0xca>
 8003828:	2301      	movs	r3, #1
          *size = 1;
 800382a:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 800382c:	2005      	movs	r0, #5
 800382e:	e7ed      	b.n	800380c <RI_GetRegisterGlobal+0x3c>
        if (freeSpace >= 4)
 8003830:	f1bc 0f03 	cmp.w	ip, #3
 8003834:	dd2e      	ble.n	8003894 <RI_GetRegisterGlobal+0xc4>
          switch (regID)
 8003836:	f241 6358 	movw	r3, #5720	@ 0x1658
 800383a:	4298      	cmp	r0, r3
 800383c:	f000 8082 	beq.w	8003944 <RI_GetRegisterGlobal+0x174>
 8003840:	f241 6398 	movw	r3, #5784	@ 0x1698
 8003844:	4298      	cmp	r0, r3
 8003846:	d075      	beq.n	8003934 <RI_GetRegisterGlobal+0x164>
 8003848:	f241 6318 	movw	r3, #5656	@ 0x1618
 800384c:	4298      	cmp	r0, r3
 800384e:	d16d      	bne.n	800392c <RI_GetRegisterGlobal+0x15c>
              ReadVal.Float_Val = MC_Perf_GetCPU_Load(pMCIN->pPerfMeasure);
 8003850:	4b40      	ldr	r3, [pc, #256]	@ (8003954 <RI_GetRegisterGlobal+0x184>)
 8003852:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003854:	f7fe fa46 	bl	8001ce4 <MC_Perf_GetCPU_Load>
 8003858:	ed8d 0a01 	vstr	s0, [sp, #4]
 800385c:	9b01      	ldr	r3, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800385e:	602b      	str	r3, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003860:	2000      	movs	r0, #0
          *size = 4;
 8003862:	2304      	movs	r3, #4
 8003864:	8023      	strh	r3, [r4, #0]
}
 8003866:	b003      	add	sp, #12
 8003868:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 800386a:	f1bc 0f01 	cmp.w	ip, #1
 800386e:	dd11      	ble.n	8003894 <RI_GetRegisterGlobal+0xc4>
          switch (regID)
 8003870:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003874:	d05c      	beq.n	8003930 <RI_GetRegisterGlobal+0x160>
    uint8_t retVal = MCP_CMD_OK;
 8003876:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800387a:	bf14      	ite	ne
 800387c:	2005      	movne	r0, #5
 800387e:	2000      	moveq	r0, #0
          *size = 2;
 8003880:	2302      	movs	r3, #2
 8003882:	8023      	strh	r3, [r4, #0]
}
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003888:	2820      	cmp	r0, #32
 800388a:	d02c      	beq.n	80038e6 <RI_GetRegisterGlobal+0x116>
 800388c:	2860      	cmp	r0, #96	@ 0x60
 800388e:	d010      	beq.n	80038b2 <RI_GetRegisterGlobal+0xe2>
 8003890:	2300      	movs	r3, #0
 8003892:	e7ca      	b.n	800382a <RI_GetRegisterGlobal+0x5a>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003894:	2008      	movs	r0, #8
}
 8003896:	b003      	add	sp, #12
 8003898:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800389a:	4608      	mov	r0, r1
 800389c:	e7b6      	b.n	800380c <RI_GetRegisterGlobal+0x3c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800389e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80038a2:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80038a4:	f1bc 0f0b 	cmp.w	ip, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80038a8:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80038aa:	d833      	bhi.n	8003914 <RI_GetRegisterGlobal+0x144>
 80038ac:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80038ae:	2008      	movs	r0, #8
 80038b0:	e7b4      	b.n	800381c <RI_GetRegisterGlobal+0x4c>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038b2:	4929      	ldr	r1, [pc, #164]	@ (8003958 <RI_GetRegisterGlobal+0x188>)
 80038b4:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 80038b8:	2301      	movs	r3, #1
 80038ba:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038bc:	b17a      	cbz	r2, 80038de <RI_GetRegisterGlobal+0x10e>
 80038be:	fa1f fc8c 	uxth.w	ip, ip
 80038c2:	e008      	b.n	80038d6 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 80038c4:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 80038c8:	8823      	ldrh	r3, [r4, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038d0:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80038d4:	b11a      	cbz	r2, 80038de <RI_GetRegisterGlobal+0x10e>
 80038d6:	4563      	cmp	r3, ip
 80038d8:	d3f4      	bcc.n	80038c4 <RI_GetRegisterGlobal+0xf4>
    retVal = MCP_ERROR_STRING_FORMAT;
 80038da:	2006      	movs	r0, #6
 80038dc:	e796      	b.n	800380c <RI_GetRegisterGlobal+0x3c>
    *tempdestString = (int8_t)0;
 80038de:	2300      	movs	r3, #0
 80038e0:	702b      	strb	r3, [r5, #0]
  uint8_t retVal = MCP_CMD_OK;
 80038e2:	2000      	movs	r0, #0
 80038e4:	e792      	b.n	800380c <RI_GetRegisterGlobal+0x3c>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038e6:	491d      	ldr	r1, [pc, #116]	@ (800395c <RI_GetRegisterGlobal+0x18c>)
 80038e8:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 80038ec:	2301      	movs	r3, #1
 80038ee:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d0f4      	beq.n	80038de <RI_GetRegisterGlobal+0x10e>
 80038f4:	fa1f fc8c 	uxth.w	ip, ip
 80038f8:	e009      	b.n	800390e <RI_GetRegisterGlobal+0x13e>
    *tempdestString = *tempsrcString;
 80038fa:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 80038fe:	8823      	ldrh	r3, [r4, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003906:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800390a:	2a00      	cmp	r2, #0
 800390c:	d0e7      	beq.n	80038de <RI_GetRegisterGlobal+0x10e>
 800390e:	459c      	cmp	ip, r3
 8003910:	d8f3      	bhi.n	80038fa <RI_GetRegisterGlobal+0x12a>
 8003912:	e7e2      	b.n	80038da <RI_GetRegisterGlobal+0x10a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <RI_GetRegisterGlobal+0x190>)
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	891b      	ldrh	r3, [r3, #8]
 800391c:	816b      	strh	r3, [r5, #10]
 800391e:	f8c5 1002 	str.w	r1, [r5, #2]
 8003922:	f8c5 2006 	str.w	r2, [r5, #6]
 8003926:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8003928:	2000      	movs	r0, #0
 800392a:	e777      	b.n	800381c <RI_GetRegisterGlobal+0x4c>
          switch (regID)
 800392c:	2005      	movs	r0, #5
 800392e:	e798      	b.n	8003862 <RI_GetRegisterGlobal+0x92>
    uint8_t retVal = MCP_CMD_OK;
 8003930:	2000      	movs	r0, #0
 8003932:	e7a5      	b.n	8003880 <RI_GetRegisterGlobal+0xb0>
              ReadVal.Float_Val = MC_Perf_GetMaxCPU_Load(pMCIN->pPerfMeasure);
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <RI_GetRegisterGlobal+0x184>)
 8003936:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003938:	f7fe fa10 	bl	8001d5c <MC_Perf_GetMaxCPU_Load>
 800393c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003940:	9b01      	ldr	r3, [sp, #4]
              break;
 8003942:	e78c      	b.n	800385e <RI_GetRegisterGlobal+0x8e>
              ReadVal.Float_Val = MC_Perf_GetMinCPU_Load(pMCIN->pPerfMeasure);
 8003944:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <RI_GetRegisterGlobal+0x184>)
 8003946:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003948:	f7fe fa44 	bl	8001dd4 <MC_Perf_GetMinCPU_Load>
 800394c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003950:	9b01      	ldr	r3, [sp, #4]
              break;
 8003952:	e784      	b.n	800385e <RI_GetRegisterGlobal+0x8e>
 8003954:	20000000 	.word	0x20000000
 8003958:	080070d8 	.word	0x080070d8
 800395c:	080070b4 	.word	0x080070b4
 8003960:	080070a8 	.word	0x080070a8
 8003964:	00000000 	.word	0x00000000

08003968 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	b08c      	sub	sp, #48	@ 0x30
 800396c:	461d      	mov	r5, r3
    switch (typeID)
 800396e:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003972:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8003976:	4614      	mov	r4, r2
    switch (typeID)
 8003978:	2b20      	cmp	r3, #32
 800397a:	d812      	bhi.n	80039a2 <RI_GetRegisterMotor1+0x3a>
 800397c:	e8df f003 	tbb	[pc, r3]
 8003980:	1111112f 	.word	0x1111112f
 8003984:	11111111 	.word	0x11111111
 8003988:	11111157 	.word	0x11111157
 800398c:	11111111 	.word	0x11111111
 8003990:	11111142 	.word	0x11111142
 8003994:	11111111 	.word	0x11111111
 8003998:	11111173 	.word	0x11111173
 800399c:	11111111 	.word	0x11111111
 80039a0:	14          	.byte	0x14
 80039a1:	00          	.byte	0x00
 80039a2:	2007      	movs	r0, #7
  }
 80039a4:	b00c      	add	sp, #48	@ 0x30
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 80039a8:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 80039ac:	f000 81af 	beq.w	8003d0e <RI_GetRegisterMotor1+0x3a6>
 80039b0:	d864      	bhi.n	8003a7c <RI_GetRegisterMotor1+0x114>
 80039b2:	28a8      	cmp	r0, #168	@ 0xa8
        rawData++;
 80039b4:	f104 0202 	add.w	r2, r4, #2
        switch (regID)
 80039b8:	f000 8207 	beq.w	8003dca <RI_GetRegisterMotor1+0x462>
 80039bc:	28e8      	cmp	r0, #232	@ 0xe8
 80039be:	f000 8157 	beq.w	8003c70 <RI_GetRegisterMotor1+0x308>
 80039c2:	2868      	cmp	r0, #104	@ 0x68
 80039c4:	f040 820b 	bne.w	8003dde <RI_GetRegisterMotor1+0x476>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80039c8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80039cc:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80039ce:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80039d2:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80039d4:	f200 8236 	bhi.w	8003e44 <RI_GetRegisterMotor1+0x4dc>
 80039d8:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80039da:	2008      	movs	r0, #8
 80039dc:	e069      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
        if (freeSpace > 0)
 80039de:	f1bc 0f00 	cmp.w	ip, #0
 80039e2:	f340 8162 	ble.w	8003caa <RI_GetRegisterMotor1+0x342>
          switch (regID)
 80039e6:	28c8      	cmp	r0, #200	@ 0xc8
 80039e8:	f000 81fe 	beq.w	8003de8 <RI_GetRegisterMotor1+0x480>
 80039ec:	f200 80af 	bhi.w	8003b4e <RI_GetRegisterMotor1+0x1e6>
 80039f0:	2848      	cmp	r0, #72	@ 0x48
 80039f2:	f000 8148 	beq.w	8003c86 <RI_GetRegisterMotor1+0x31e>
 80039f6:	2888      	cmp	r0, #136	@ 0x88
 80039f8:	f040 81fa 	bne.w	8003df0 <RI_GetRegisterMotor1+0x488>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80039fc:	48b6      	ldr	r0, [pc, #728]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 80039fe:	f7fe f8b1 	bl	8001b64 <MCI_GetControlMode>
              break;
 8003a02:	e0ae      	b.n	8003b62 <RI_GetRegisterMotor1+0x1fa>
        if (freeSpace >= 4)
 8003a04:	f1bc 0f03 	cmp.w	ip, #3
 8003a08:	dd35      	ble.n	8003a76 <RI_GetRegisterMotor1+0x10e>
          switch (regID)
 8003a0a:	2858      	cmp	r0, #88	@ 0x58
 8003a0c:	f000 814f 	beq.w	8003cae <RI_GetRegisterMotor1+0x346>
 8003a10:	2898      	cmp	r0, #152	@ 0x98
 8003a12:	f000 8154 	beq.w	8003cbe <RI_GetRegisterMotor1+0x356>
 8003a16:	2818      	cmp	r0, #24
 8003a18:	f040 80a9 	bne.w	8003b6e <RI_GetRegisterMotor1+0x206>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003a1c:	48ae      	ldr	r0, [pc, #696]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003a1e:	f7fe f89b 	bl	8001b58 <MCI_GetFaultState>
 8003a22:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a24:	2000      	movs	r0, #0
          *size = 4;
 8003a26:	2304      	movs	r3, #4
 8003a28:	802b      	strh	r3, [r5, #0]
  }
 8003a2a:	b00c      	add	sp, #48	@ 0x30
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
        if (freeSpace >= 2)
 8003a2e:	f1bc 0f01 	cmp.w	ip, #1
 8003a32:	dd20      	ble.n	8003a76 <RI_GetRegisterMotor1+0x10e>
          switch (regID)
 8003a34:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003a38:	d010      	beq.n	8003a5c <RI_GetRegisterMotor1+0xf4>
 8003a3a:	d872      	bhi.n	8003b22 <RI_GetRegisterMotor1+0x1ba>
 8003a3c:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003a40:	f000 8129 	beq.w	8003c96 <RI_GetRegisterMotor1+0x32e>
 8003a44:	f200 8156 	bhi.w	8003cf4 <RI_GetRegisterMotor1+0x38c>
 8003a48:	2890      	cmp	r0, #144	@ 0x90
 8003a4a:	f000 81ec 	beq.w	8003e26 <RI_GetRegisterMotor1+0x4be>
 8003a4e:	28d0      	cmp	r0, #208	@ 0xd0
 8003a50:	f040 81e7 	bne.w	8003e22 <RI_GetRegisterMotor1+0x4ba>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003a54:	48a1      	ldr	r0, [pc, #644]	@ (8003cdc <RI_GetRegisterMotor1+0x374>)
 8003a56:	f003 f87f 	bl	8006b58 <PID_GetKI>
 8003a5a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a5c:	2000      	movs	r0, #0
          *size = 2;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	802b      	strh	r3, [r5, #0]
  }
 8003a62:	b00c      	add	sp, #48	@ 0x30
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8003a66:	28a0      	cmp	r0, #160	@ 0xa0
 8003a68:	d043      	beq.n	8003af2 <RI_GetRegisterMotor1+0x18a>
 8003a6a:	28e0      	cmp	r0, #224	@ 0xe0
 8003a6c:	d024      	beq.n	8003ab8 <RI_GetRegisterMotor1+0x150>
            *size= 0 ; /* */
 8003a6e:	2300      	movs	r3, #0
 8003a70:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003a72:	2005      	movs	r0, #5
            break;
 8003a74:	e796      	b.n	80039a4 <RI_GetRegisterMotor1+0x3c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003a76:	2008      	movs	r0, #8
  }
 8003a78:	b00c      	add	sp, #48	@ 0x30
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8003a7c:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003a80:	f000 815d 	beq.w	8003d3e <RI_GetRegisterMotor1+0x3d6>
 8003a84:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 8003a88:	d073      	beq.n	8003b72 <RI_GetRegisterMotor1+0x20a>
 8003a8a:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003a8e:	f040 81a6 	bne.w	8003dde <RI_GetRegisterMotor1+0x476>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003a92:	4891      	ldr	r0, [pc, #580]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003a94:	f7fe f876 	bl	8001b84 <MCI_GetLastRampFinalSpeed>
 8003a98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a9c:	0043      	lsls	r3, r0, #1
 8003a9e:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003aa2:	488d      	ldr	r0, [pc, #564]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003aa4:	f7fe f872 	bl	8001b8c <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003aa8:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003aaa:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003aac:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003aae:	2000      	movs	r0, #0
            break;
 8003ab0:	2308      	movs	r3, #8
        *size = (*rawSize) + 2U;
 8003ab2:	802b      	strh	r3, [r5, #0]
  }
 8003ab4:	b00c      	add	sp, #48	@ 0x30
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003ab8:	4b89      	ldr	r3, [pc, #548]	@ (8003ce0 <RI_GetRegisterMotor1+0x378>)
 8003aba:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003abc:	2301      	movs	r3, #1
 8003abe:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003ac0:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003ac4:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8003ac8:	b17a      	cbz	r2, 8003aea <RI_GetRegisterMotor1+0x182>
 8003aca:	fa1f fc8c 	uxth.w	ip, ip
 8003ace:	e008      	b.n	8003ae2 <RI_GetRegisterMotor1+0x17a>
    *tempdestString = *tempsrcString;
 8003ad0:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003ad4:	882b      	ldrh	r3, [r5, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003adc:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003ae0:	b11a      	cbz	r2, 8003aea <RI_GetRegisterMotor1+0x182>
 8003ae2:	459c      	cmp	ip, r3
 8003ae4:	d8f4      	bhi.n	8003ad0 <RI_GetRegisterMotor1+0x168>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003ae6:	2006      	movs	r0, #6
 8003ae8:	e75c      	b.n	80039a4 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003aee:	2000      	movs	r0, #0
 8003af0:	e758      	b.n	80039a4 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003af2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce4 <RI_GetRegisterMotor1+0x37c>)
  *size= 1U ; /* /0 is the min String size */
 8003af4:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003af6:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003af8:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003afa:	f991 2000 	ldrsb.w	r2, [r1]
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d0f3      	beq.n	8003aea <RI_GetRegisterMotor1+0x182>
 8003b02:	fa1f fc8c 	uxth.w	ip, ip
 8003b06:	e009      	b.n	8003b1c <RI_GetRegisterMotor1+0x1b4>
    *tempdestString = *tempsrcString;
 8003b08:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003b0c:	882b      	ldrh	r3, [r5, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003b14:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	d0e6      	beq.n	8003aea <RI_GetRegisterMotor1+0x182>
 8003b1c:	459c      	cmp	ip, r3
 8003b1e:	d8f3      	bhi.n	8003b08 <RI_GetRegisterMotor1+0x1a0>
 8003b20:	e7e1      	b.n	8003ae6 <RI_GetRegisterMotor1+0x17e>
          switch (regID)
 8003b22:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003b26:	4298      	cmp	r0, r3
 8003b28:	f000 80ba 	beq.w	8003ca0 <RI_GetRegisterMotor1+0x338>
 8003b2c:	f240 8162 	bls.w	8003df4 <RI_GetRegisterMotor1+0x48c>
 8003b30:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003b34:	4298      	cmp	r0, r3
 8003b36:	f000 816a 	beq.w	8003e0e <RI_GetRegisterMotor1+0x4a6>
 8003b3a:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8003b3e:	4298      	cmp	r0, r3
 8003b40:	f040 816f 	bne.w	8003e22 <RI_GetRegisterMotor1+0x4ba>
              *regdataU16 = MCI_GetDutyCycleRef(pMCIN);
 8003b44:	4864      	ldr	r0, [pc, #400]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003b46:	f7fe f83b 	bl	8001bc0 <MCI_GetDutyCycleRef>
 8003b4a:	8020      	strh	r0, [r4, #0]
              break;
 8003b4c:	e786      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
          switch (regID)
 8003b4e:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 8003b52:	f000 809c 	beq.w	8003c8e <RI_GetRegisterMotor1+0x326>
 8003b56:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8003b5a:	f040 8149 	bne.w	8003df0 <RI_GetRegisterMotor1+0x488>
static inline bool PWMC_GetQuasiSynchState(const PWMC_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PWM_SIXSTEP
  return ((MC_NULL == pHandle) ? false : pHandle->QuasiSynchDecay);
#else
  return (pHandle->QuasiSynchDecay);
 8003b5e:	4b62      	ldr	r3, [pc, #392]	@ (8003ce8 <RI_GetRegisterMotor1+0x380>)
              *data = (uint8_t)PWMC_GetQuasiSynchState(&PWM_Handle_M1);
 8003b60:	7d58      	ldrb	r0, [r3, #21]
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003b62:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b64:	2000      	movs	r0, #0
          *size = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	802b      	strh	r3, [r5, #0]
  }
 8003b6a:	b00c      	add	sp, #48	@ 0x30
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
          switch (regID)
 8003b6e:	2005      	movs	r0, #5
 8003b70:	e759      	b.n	8003a26 <RI_GetRegisterMotor1+0xbe>
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig, &bemfAdcDemagConfig, &bemfRegIntParam);
 8003b72:	485e      	ldr	r0, [pc, #376]	@ (8003cec <RI_GetRegisterMotor1+0x384>)
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8003b74:	4e5e      	ldr	r6, [pc, #376]	@ (8003cf0 <RI_GetRegisterMotor1+0x388>)
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig, &bemfAdcDemagConfig, &bemfRegIntParam);
 8003b76:	ab01      	add	r3, sp, #4
 8003b78:	aa08      	add	r2, sp, #32
 8003b7a:	a904      	add	r1, sp, #16
 8003b7c:	f7fd fcd8 	bl	8001530 <BADC_GetBemfSensorlessParam>
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8003b80:	f8bd 2012 	ldrh.w	r2, [sp, #18]
            *ConvertedData = ((bemfRegIntParam.ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcRising2CommDelay * 0.12);
 8003b84:	f8bd 0004 	ldrh.w	r0, [sp, #4]
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f362 030f 	bfi	r3, r2, #0, #16
 8003b90:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8003b94:	f362 431f 	bfi	r3, r2, #16, #16
 8003b98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8003b9c:	f8c4 3002 	str.w	r3, [r4, #2]
 8003ba0:	f362 010f 	bfi	r1, r2, #0, #16
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8003ba4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003ba8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8003bac:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8003bb0:	fb0c f202 	mul.w	r2, ip, r2
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003bb4:	fb0c f303 	mul.w	r3, ip, r3
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8003bb8:	fba6 c202 	umull	ip, r2, r6, r2
 8003bbc:	0b52      	lsrs	r2, r2, #13
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003bbe:	fba6 6303 	umull	r6, r3, r6, r3
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8003bc2:	3201      	adds	r2, #1
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003bc4:	0b5b      	lsrs	r3, r3, #13
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8003bc6:	f362 411f 	bfi	r1, r2, #16, #16
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003bca:	3301      	adds	r3, #1
            *ConvertedData = ((bemfRegIntParam.ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcRising2CommDelay * 0.12);
 8003bcc:	2808      	cmp	r0, #8
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8003bce:	f8c4 1006 	str.w	r1, [r4, #6]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8003bd2:	8163      	strh	r3, [r4, #10]
            *ConvertedData = ((bemfRegIntParam.ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcRising2CommDelay * 0.12);
 8003bd4:	f240 812e 	bls.w	8003e34 <RI_GetRegisterMotor1+0x4cc>
 8003bd8:	f7fc fd72 	bl	80006c0 <__aeabi_i2d>
 8003bdc:	a33c      	add	r3, pc, #240	@ (adr r3, 8003cd0 <RI_GetRegisterMotor1+0x368>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f7fc faf1 	bl	80001c8 <__aeabi_dmul>
 8003be6:	f7fc fdd5 	bl	8000794 <__aeabi_d2uiz>
 8003bea:	b283      	uxth	r3, r0
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003bec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
            *ConvertedData = ((bemfRegIntParam.ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcRising2CommDelay * 0.12);
 8003bf0:	81a3      	strh	r3, [r4, #12]
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003bf2:	2808      	cmp	r0, #8
 8003bf4:	f240 811c 	bls.w	8003e30 <RI_GetRegisterMotor1+0x4c8>
 8003bf8:	f7fc fd62 	bl	80006c0 <__aeabi_i2d>
 8003bfc:	a334      	add	r3, pc, #208	@ (adr r3, 8003cd0 <RI_GetRegisterMotor1+0x368>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fae1 	bl	80001c8 <__aeabi_dmul>
 8003c06:	f7fc fdc5 	bl	8000794 <__aeabi_d2uiz>
 8003c0a:	b282      	uxth	r2, r0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f362 030f 	bfi	r3, r2, #0, #16
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8003c14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003c16:	f362 431f 	bfi	r3, r2, #16, #16
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8003c1a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003c1e:	f8c4 300e 	str.w	r3, [r4, #14]
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8003c22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c26:	0052      	lsls	r2, r2, #1
            *ConvertedData = (uint16_t)((100 * bemfRegIntParam.OnSensingEnThres) / PWM_PERIOD_CYCLES) + 1U;
 8003c28:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8003c2c:	2064      	movs	r0, #100	@ 0x64
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003c2e:	f362 010f 	bfi	r1, r2, #0, #16
            *ConvertedData = (uint16_t)((100 * bemfRegIntParam.OnSensingEnThres) / PWM_PERIOD_CYCLES) + 1U;
 8003c32:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <RI_GetRegisterMotor1+0x388>)
 8003c34:	fb00 f303 	mul.w	r3, r0, r3
 8003c38:	fba2 6303 	umull	r6, r3, r2, r3
 8003c3c:	0b5b      	lsrs	r3, r3, #13
 8003c3e:	3301      	adds	r3, #1
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003c40:	f363 411f 	bfi	r1, r3, #16, #16
            *ConvertedData = (uint16_t)((100 * bemfRegIntParam.OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8003c44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003c48:	f8c4 1012 	str.w	r1, [r4, #18]
            *ConvertedData = (uint16_t)((100 * bemfRegIntParam.OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8003c4c:	fb00 f303 	mul.w	r3, r0, r3
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	0b5b      	lsrs	r3, r3, #13
 8003c56:	3301      	adds	r3, #1
            *ConvertedData = bemfAdcConfig.AWDfiltering;
 8003c58:	f89d 101e 	ldrb.w	r1, [sp, #30]
            *ConvertedData = bemfRegIntParam.ComputationDelay;
 8003c5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            *ConvertedData = (uint16_t)((100 * bemfRegIntParam.OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8003c60:	82e3      	strh	r3, [r4, #22]
            *rawSize = 26;
 8003c62:	231a      	movs	r3, #26
 8003c64:	8023      	strh	r3, [r4, #0]
            *ConvertedData = bemfAdcConfig.AWDfiltering;
 8003c66:	8321      	strh	r1, [r4, #24]
            *ConvertedData = bemfRegIntParam.ComputationDelay;
 8003c68:	8362      	strh	r2, [r4, #26]
            break;
 8003c6a:	231c      	movs	r3, #28
    uint8_t retVal = MCP_CMD_OK;
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e720      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c70:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8003c74:	230d      	movs	r3, #13
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c76:	f1bc 0f0e 	cmp.w	ip, #14
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8003c7a:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c7c:	f200 80fc 	bhi.w	8003e78 <RI_GetRegisterMotor1+0x510>
 8003c80:	230f      	movs	r3, #15
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003c82:	2008      	movs	r0, #8
 8003c84:	e715      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003c86:	4814      	ldr	r0, [pc, #80]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003c88:	f7fd ff1c 	bl	8001ac4 <MCI_GetSTMState>
              break;
 8003c8c:	e769      	b.n	8003b62 <RI_GetRegisterMotor1+0x1fa>
              *data = PWMC_GetLSModConfig(&PWM_Handle_M1);
 8003c8e:	4816      	ldr	r0, [pc, #88]	@ (8003ce8 <RI_GetRegisterMotor1+0x380>)
 8003c90:	f7fe feca 	bl	8002a28 <PWMC_GetLSModConfig>
              break;
 8003c94:	e765      	b.n	8003b62 <RI_GetRegisterMotor1+0x1fa>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8003c96:	4811      	ldr	r0, [pc, #68]	@ (8003cdc <RI_GetRegisterMotor1+0x374>)
 8003c98:	f002 ff8a 	bl	8006bb0 <PID_GetKD>
 8003c9c:	8020      	strh	r0, [r4, #0]
              break;
 8003c9e:	e6dd      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8003ca0:	480e      	ldr	r0, [pc, #56]	@ (8003cdc <RI_GetRegisterMotor1+0x374>)
 8003ca2:	f002 ff69 	bl	8006b78 <PID_GetKIDivisorPOW2>
 8003ca6:	8020      	strh	r0, [r4, #0]
              break;
 8003ca8:	e6d8      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003caa:	4608      	mov	r0, r1
 8003cac:	e67a      	b.n	80039a4 <RI_GetRegisterMotor1+0x3c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003cae:	480a      	ldr	r0, [pc, #40]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003cb0:	f7fd ff74 	bl	8001b9c <MCI_GetAvrgMecSpeedUnit>
 8003cb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003cb8:	0040      	lsls	r0, r0, #1
 8003cba:	6020      	str	r0, [r4, #0]
              break;
 8003cbc:	e6b2      	b.n	8003a24 <RI_GetRegisterMotor1+0xbc>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003cbe:	4806      	ldr	r0, [pc, #24]	@ (8003cd8 <RI_GetRegisterMotor1+0x370>)
 8003cc0:	f7fd ff70 	bl	8001ba4 <MCI_GetMecSpeedRefUnit>
 8003cc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003cc8:	0040      	lsls	r0, r0, #1
 8003cca:	6020      	str	r0, [r4, #0]
              break;
 8003ccc:	e6aa      	b.n	8003a24 <RI_GetRegisterMotor1+0xbc>
 8003cce:	bf00      	nop
 8003cd0:	eb851eb8 	.word	0xeb851eb8
 8003cd4:	3fbeb851 	.word	0x3fbeb851
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	200001c8 	.word	0x200001c8
 8003ce0:	20000244 	.word	0x20000244
 8003ce4:	2000024c 	.word	0x2000024c
 8003ce8:	2000002c 	.word	0x2000002c
 8003cec:	2000005c 	.word	0x2000005c
 8003cf0:	e565c2f5 	.word	0xe565c2f5
          switch (regID)
 8003cf4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003cf8:	f000 808e 	beq.w	8003e18 <RI_GetRegisterMotor1+0x4b0>
 8003cfc:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8003d00:	f040 808f 	bne.w	8003e22 <RI_GetRegisterMotor1+0x4ba>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8003d04:	4869      	ldr	r0, [pc, #420]	@ (8003eac <RI_GetRegisterMotor1+0x544>)
 8003d06:	f002 ff05 	bl	8006b14 <NTC_GetAvTemp_C>
 8003d0a:	8020      	strh	r0, [r4, #0]
              break;
 8003d0c:	e6a6      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003d0e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8003d12:	230c      	movs	r3, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003d14:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003d18:	8023      	strh	r3, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003d1a:	f240 8090 	bls.w	8003e3e <RI_GetRegisterMotor1+0x4d6>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003d1e:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <RI_GetRegisterMotor1+0x548>)
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f8c4 300e 	str.w	r3, [r4, #14]
 8003d2c:	f8c4 0002 	str.w	r0, [r4, #2]
 8003d30:	f8c4 1006 	str.w	r1, [r4, #6]
 8003d34:	f8c4 200a 	str.w	r2, [r4, #10]
 8003d38:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e6b9      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003d3e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003d42:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003d44:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003d48:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003d4a:	d975      	bls.n	8003e38 <RI_GetRegisterMotor1+0x4d0>
    phaseData->hFinalPulse = pHandle->ParamsData[phaseNumber].hFinalPulse;
 8003d4c:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <RI_GetRegisterMotor1+0x54c>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d4e:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003d52:	8c18      	ldrh	r0, [r3, #32]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003d54:	8b99      	ldrh	r1, [r3, #28]
                *durationms  = revUpPhase.hDurationms;
 8003d56:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8003d5c:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d5e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = pHandle->ParamsData[phaseNumber].hFinalPulse;
 8003d60:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8003d62:	f8c4 2002 	str.w	r2, [r4, #2]
 8003d66:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003d6a:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
                *durationms  = revUpPhase.hDurationms;
 8003d6c:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8003d72:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d74:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = pHandle->ParamsData[phaseNumber].hFinalPulse;
 8003d76:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 8003d78:	f8c4 200a 	str.w	r2, [r4, #10]
 8003d7c:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	@ 0x36
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003d80:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
                *durationms  = revUpPhase.hDurationms;
 8003d82:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8003d88:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d8a:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = pHandle->ParamsData[phaseNumber].hFinalPulse;
 8003d8c:	f8b3 0044 	ldrh.w	r0, [r3, #68]	@ 0x44
 8003d90:	f8c4 2012 	str.w	r2, [r4, #18]
 8003d94:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	@ 0x42
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003d98:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
                *durationms  = revUpPhase.hDurationms;
 8003d9c:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8003da2:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003da4:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = pHandle->ParamsData[phaseNumber].hFinalPulse;
 8003da6:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8003daa:	f8c4 201a 	str.w	r2, [r4, #26]
 8003dae:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003db2:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
                *durationms  = revUpPhase.hDurationms;
 8003db6:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003db8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003dbc:	0052      	lsls	r2, r2, #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8003dbe:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003dc0:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8003dc4:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e673      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003dca:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003dce:	2310      	movs	r3, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003dd0:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003dd4:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003dd6:	d85c      	bhi.n	8003e92 <RI_GetRegisterMotor1+0x52a>
 8003dd8:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003dda:	2008      	movs	r0, #8
 8003ddc:	e669      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
        *size = (*rawSize) + 2U;
 8003dde:	8823      	ldrh	r3, [r4, #0]
 8003de0:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003de2:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	e664      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
  return ((uint8_t)pHandle->bPhaseNbr);
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <RI_GetRegisterMotor1+0x54c>)
 8003dea:	f893 005a 	ldrb.w	r0, [r3, #90]	@ 0x5a
              break;
 8003dee:	e6b8      	b.n	8003b62 <RI_GetRegisterMotor1+0x1fa>
          switch (regID)
 8003df0:	2005      	movs	r0, #5
 8003df2:	e6b8      	b.n	8003b66 <RI_GetRegisterMotor1+0x1fe>
          switch (regID)
 8003df4:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003df8:	f43f ae30 	beq.w	8003a5c <RI_GetRegisterMotor1+0xf4>
 8003dfc:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003e00:	4298      	cmp	r0, r3
 8003e02:	d10e      	bne.n	8003e22 <RI_GetRegisterMotor1+0x4ba>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8003e04:	482c      	ldr	r0, [pc, #176]	@ (8003eb8 <RI_GetRegisterMotor1+0x550>)
 8003e06:	f002 fead 	bl	8006b64 <PID_GetKPDivisorPOW2>
 8003e0a:	8020      	strh	r0, [r4, #0]
              break;
 8003e0c:	e626      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8003e0e:	482a      	ldr	r0, [pc, #168]	@ (8003eb8 <RI_GetRegisterMotor1+0x550>)
 8003e10:	f002 fed2 	bl	8006bb8 <PID_GetKDDivisorPOW2>
 8003e14:	8020      	strh	r0, [r4, #0]
              break;
 8003e16:	e621      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003e18:	4828      	ldr	r0, [pc, #160]	@ (8003ebc <RI_GetRegisterMotor1+0x554>)
 8003e1a:	f002 fe3d 	bl	8006a98 <VBS_GetAvBusVoltage_V>
 8003e1e:	8020      	strh	r0, [r4, #0]
              break;
 8003e20:	e61c      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
          switch (regID)
 8003e22:	2005      	movs	r0, #5
 8003e24:	e61b      	b.n	8003a5e <RI_GetRegisterMotor1+0xf6>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003e26:	4824      	ldr	r0, [pc, #144]	@ (8003eb8 <RI_GetRegisterMotor1+0x550>)
 8003e28:	f002 fe92 	bl	8006b50 <PID_GetKP>
 8003e2c:	8020      	strh	r0, [r4, #0]
              break;
 8003e2e:	e615      	b.n	8003a5c <RI_GetRegisterMotor1+0xf4>
            *ConvertedData = ((bemfRegIntParam.ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcFalling2CommDelay * 0.12);
 8003e30:	2201      	movs	r2, #1
 8003e32:	e6eb      	b.n	8003c0c <RI_GetRegisterMotor1+0x2a4>
            *ConvertedData = ((bemfRegIntParam.ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(bemfRegIntParam.ZcRising2CommDelay * 0.12);
 8003e34:	2301      	movs	r3, #1
 8003e36:	e6d9      	b.n	8003bec <RI_GetRegisterMotor1+0x284>
 8003e38:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003e3a:	2008      	movs	r0, #8
 8003e3c:	e639      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
 8003e3e:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003e40:	2008      	movs	r0, #8
 8003e42:	e636      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003e44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <RI_GetRegisterMotor1+0x558>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 8003e4c:	681c      	ldr	r4, [r3, #0]
 8003e4e:	6858      	ldr	r0, [r3, #4]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	68de      	ldr	r6, [r3, #12]
 8003e54:	60d6      	str	r6, [r2, #12]
 8003e56:	3310      	adds	r3, #16
 8003e58:	4563      	cmp	r3, ip
 8003e5a:	6014      	str	r4, [r2, #0]
 8003e5c:	6050      	str	r0, [r2, #4]
 8003e5e:	6091      	str	r1, [r2, #8]
 8003e60:	f102 0210 	add.w	r2, r2, #16
 8003e64:	d1f2      	bne.n	8003e4c <RI_GetRegisterMotor1+0x4e4>
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	6093      	str	r3, [r2, #8]
 8003e6e:	6010      	str	r0, [r2, #0]
 8003e70:	6051      	str	r1, [r2, #4]
 8003e72:	233e      	movs	r3, #62	@ 0x3e
    uint8_t retVal = MCP_CMD_OK;
 8003e74:	2000      	movs	r0, #0
 8003e76:	e61c      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
              SixStepFwConfig_reg_t const *pSixStepConfig_reg = SixStepConfig_reg[motorID];
 8003e78:	4b12      	ldr	r3, [pc, #72]	@ (8003ec4 <RI_GetRegisterMotor1+0x55c>)
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	689c      	ldr	r4, [r3, #8]
 8003e82:	6094      	str	r4, [r2, #8]
 8003e84:	6010      	str	r0, [r2, #0]
 8003e86:	6051      	str	r1, [r2, #4]
 8003e88:	7b1b      	ldrb	r3, [r3, #12]
 8003e8a:	7313      	strb	r3, [r2, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003e8c:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8003e8e:	230f      	movs	r3, #15
 8003e90:	e60f      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <RI_GetRegisterMotor1+0x560>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6858      	ldr	r0, [r3, #4]
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	60d3      	str	r3, [r2, #12]
 8003ea0:	6050      	str	r0, [r2, #4]
 8003ea2:	6014      	str	r4, [r2, #0]
 8003ea4:	6091      	str	r1, [r2, #8]
 8003ea6:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e602      	b.n	8003ab2 <RI_GetRegisterMotor1+0x14a>
 8003eac:	20000218 	.word	0x20000218
 8003eb0:	20000250 	.word	0x20000250
 8003eb4:	20000128 	.word	0x20000128
 8003eb8:	200001c8 	.word	0x200001c8
 8003ebc:	200001f4 	.word	0x200001f4
 8003ec0:	20000244 	.word	0x20000244
 8003ec4:	20000248 	.word	0x20000248
 8003ec8:	20000240 	.word	0x20000240

08003ecc <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8003ecc:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8003ece:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 8003ed0:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	e841 3400 	strex	r4, r3, [r1]
 8003ee0:	2c00      	cmp	r4, #0
 8003ee2:	d1f7      	bne.n	8003ed4 <UASPEP_INIT+0x8>
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003ee4:	68c1      	ldr	r1, [r0, #12]
 8003ee6:	4d1b      	ldr	r5, [pc, #108]	@ (8003f54 <UASPEP_INIT+0x88>)
 8003ee8:	6843      	ldr	r3, [r0, #4]
 8003eea:	186c      	adds	r4, r5, r1

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003eec:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8003ef0:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8003ef4:	4423      	add	r3, r4
 8003ef6:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003ef8:	2340      	movs	r3, #64	@ 0x40
 8003efa:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8003efc:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	e841 3400 	strex	r4, r3, [r1]
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d1f7      	bne.n	8003f00 <UASPEP_INIT+0x34>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003f10:	2340      	movs	r3, #64	@ 0x40
 8003f12:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	e842 3100 	strex	r1, r3, [r2]
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d1f7      	bne.n	8003f14 <UASPEP_INIT+0x48>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8003f24:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	e841 3400 	strex	r4, r3, [r1]
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d1f7      	bne.n	8003f28 <UASPEP_INIT+0x5c>
 8003f38:	6901      	ldr	r1, [r0, #16]
 8003f3a:	6883      	ldr	r3, [r0, #8]
 8003f3c:	440d      	add	r5, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003f3e:	f102 0028 	add.w	r0, r2, #40	@ 0x28
 8003f42:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003f46:	4423      	add	r3, r4
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003f48:	2140      	movs	r1, #64	@ 0x40
 8003f4a:	6098      	str	r0, [r3, #8]
}
 8003f4c:	bc30      	pop	{r4, r5}
 8003f4e:	6211      	str	r1, [r2, #32]
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	08007104 	.word	0x08007104

08003f58 <UASPEP_CFG_TRANSMISSION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8003f58:	b410      	push	{r4}
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <UASPEP_CFG_TRANSMISSION+0x38>)
 8003f5c:	6904      	ldr	r4, [r0, #16]
 8003f5e:	6880      	ldr	r0, [r0, #8]
 8003f60:	4423      	add	r3, r4
 8003f62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003f66:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003f68:	07e4      	lsls	r4, r4, #31
 8003f6a:	eb00 0c03 	add.w	ip, r0, r3
 8003f6e:	d40c      	bmi.n	8003f8a <UASPEP_CFG_TRANSMISSION+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003f70:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003f74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003f78:	f36f 010f 	bfc	r1, #0, #16
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f82:	58c2      	ldr	r2, [r0, r3]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	08007104 	.word	0x08007104

08003f94 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8003f94:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003f96:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd0 <UASPEP_CFG_RECEPTION+0x3c>)
 8003f98:	68c4      	ldr	r4, [r0, #12]
 8003f9a:	6840      	ldr	r0, [r0, #4]
 8003f9c:	4423      	add	r3, r4
 8003f9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003fa2:	58c4      	ldr	r4, [r0, r3]
 8003fa4:	eb00 0c03 	add.w	ip, r0, r3
 8003fa8:	f024 0401 	bic.w	r4, r4, #1
 8003fac:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003fae:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003fb2:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fba:	f36f 010f 	bfc	r1, #0, #16
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003fc4:	58c2      	ldr	r2, [r0, r3]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	50c2      	str	r2, [r0, r3]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	08007104 	.word	0x08007104

08003fd4 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003fd4:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003fde:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	e842 3100 	strex	r1, r3, [r2]
 8003fe6:	2900      	cmp	r1, #0
 8003fe8:	d1f7      	bne.n	8003fda <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003fea:	4770      	bx	lr

08003fec <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fec:	4a03      	ldr	r2, [pc, #12]	@ (8003ffc <SystemInit+0x10>)
 8003fee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ff6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004000:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004002:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <HAL_InitTick+0x3c>)
 8004004:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <HAL_InitTick+0x40>)
 8004006:	7812      	ldrb	r2, [r2, #0]
{
 8004008:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004010:	fbb3 f3f2 	udiv	r3, r3, r2
 8004014:	fbb0 f0f3 	udiv	r0, r0, r3
 8004018:	f000 ff88 	bl	8004f2c <HAL_SYSTICK_Config>
 800401c:	b908      	cbnz	r0, 8004022 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401e:	2d0f      	cmp	r5, #15
 8004020:	d901      	bls.n	8004026 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004022:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8004024:	bd38      	pop	{r3, r4, r5, pc}
 8004026:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004028:	4602      	mov	r2, r0
 800402a:	4629      	mov	r1, r5
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f000 ff20 	bl	8004e74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_InitTick+0x44>)
 8004036:	4620      	mov	r0, r4
 8004038:	601d      	str	r5, [r3, #0]
}
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	200003e4 	.word	0x200003e4
 8004040:	200003e0 	.word	0x200003e0
 8004044:	200003e8 	.word	0x200003e8

08004048 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004048:	4a07      	ldr	r2, [pc, #28]	@ (8004068 <HAL_Init+0x20>)
{
 800404a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	6813      	ldr	r3, [r2, #0]
 800404e:	f043 0310 	orr.w	r3, r3, #16
 8004052:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004054:	2003      	movs	r0, #3
 8004056:	f000 fefb 	bl	8004e50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800405a:	2004      	movs	r0, #4
 800405c:	f7ff ffd0 	bl	8004000 <HAL_InitTick>
  HAL_MspInit();
 8004060:	f7fe ffb6 	bl	8002fd0 <HAL_MspInit>
}
 8004064:	2000      	movs	r0, #0
 8004066:	bd08      	pop	{r3, pc}
 8004068:	40022000 	.word	0x40022000

0800406c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800406c:	4a03      	ldr	r2, [pc, #12]	@ (800407c <HAL_IncTick+0x10>)
 800406e:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <HAL_IncTick+0x14>)
 8004070:	6811      	ldr	r1, [r2, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	440b      	add	r3, r1
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000818 	.word	0x20000818
 8004080:	200003e4 	.word	0x200003e4

08004084 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004084:	4b01      	ldr	r3, [pc, #4]	@ (800408c <HAL_GetTick+0x8>)
 8004086:	6818      	ldr	r0, [r3, #0]
}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000818 	.word	0x20000818

08004090 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004090:	6802      	ldr	r2, [r0, #0]
{
 8004092:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004094:	6893      	ldr	r3, [r2, #8]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800409e:	2000      	movs	r0, #0
}
 80040a0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	07dc      	lsls	r4, r3, #31
 80040a6:	d5fa      	bpl.n	800409e <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	f003 030d 	and.w	r3, r3, #13
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	4604      	mov	r4, r0
 80040b2:	d009      	beq.n	80040c8 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040b6:	f043 0310 	orr.w	r3, r3, #16
 80040ba:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80040c4:	2001      	movs	r0, #1
}
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80040c8:	6893      	ldr	r3, [r2, #8]
 80040ca:	2103      	movs	r1, #3
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	6093      	str	r3, [r2, #8]
 80040d2:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80040d4:	f7ff ffd6 	bl	8004084 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80040de:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040e0:	d5dd      	bpl.n	800409e <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040e2:	f7ff ffcf 	bl	8004084 <HAL_GetTick>
 80040e6:	1b40      	subs	r0, r0, r5
 80040e8:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040ea:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ec:	d902      	bls.n	80040f4 <ADC_Disable+0x64>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	07d2      	lsls	r2, r2, #31
 80040f2:	d4df      	bmi.n	80040b4 <ADC_Disable+0x24>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	07db      	lsls	r3, r3, #31
 80040f8:	d4f3      	bmi.n	80040e2 <ADC_Disable+0x52>
 80040fa:	e7d0      	b.n	800409e <ADC_Disable+0xe>

080040fc <HAL_ADC_Init>:
{
 80040fc:	b530      	push	{r4, r5, lr}
 80040fe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004104:	b1d0      	cbz	r0, 800413c <HAL_ADC_Init+0x40>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004106:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004108:	f013 0310 	ands.w	r3, r3, #16
 800410c:	4604      	mov	r4, r0
 800410e:	d118      	bne.n	8004142 <HAL_ADC_Init+0x46>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004110:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004112:	2d00      	cmp	r5, #0
 8004114:	f000 8099 	beq.w	800424a <HAL_ADC_Init+0x14e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004118:	6802      	ldr	r2, [r0, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800411a:	6891      	ldr	r1, [r2, #8]
 800411c:	00c9      	lsls	r1, r1, #3
 800411e:	f140 8082 	bpl.w	8004226 <HAL_ADC_Init+0x12a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004122:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004124:	008d      	lsls	r5, r1, #2
 8004126:	d47e      	bmi.n	8004226 <HAL_ADC_Init+0x12a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004128:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800412a:	06c8      	lsls	r0, r1, #27
 800412c:	d400      	bmi.n	8004130 <HAL_ADC_Init+0x34>
 800412e:	b163      	cbz	r3, 800414a <HAL_ADC_Init+0x4e>
    ADC_STATE_CLR_SET(hadc->State,
 8004130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004132:	f023 0312 	bic.w	r3, r3, #18
 8004136:	f043 0310 	orr.w	r3, r3, #16
 800413a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800413c:	2001      	movs	r0, #1
}
 800413e:	b003      	add	sp, #12
 8004140:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004142:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004144:	06dd      	lsls	r5, r3, #27
 8004146:	d4f3      	bmi.n	8004130 <HAL_ADC_Init+0x34>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004148:	6802      	ldr	r2, [r0, #0]
 800414a:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800414c:	0759      	lsls	r1, r3, #29
 800414e:	d4ef      	bmi.n	8004130 <HAL_ADC_Init+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 8004150:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004152:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004156:	f043 0302 	orr.w	r3, r3, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800415a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800415e:	6423      	str	r3, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004160:	f000 80de 	beq.w	8004320 <HAL_ADC_Init+0x224>
 8004164:	4b80      	ldr	r3, [pc, #512]	@ (8004368 <HAL_ADC_Init+0x26c>)
 8004166:	429a      	cmp	r2, r3
 8004168:	f000 80e2 	beq.w	8004330 <HAL_ADC_Init+0x234>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800416c:	497f      	ldr	r1, [pc, #508]	@ (800436c <HAL_ADC_Init+0x270>)
 800416e:	428a      	cmp	r2, r1
 8004170:	d078      	beq.n	8004264 <HAL_ADC_Init+0x168>
 8004172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004176:	429a      	cmp	r2, r3
 8004178:	f000 80ec 	beq.w	8004354 <HAL_ADC_Init+0x258>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800417c:	6893      	ldr	r3, [r2, #8]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b01      	cmp	r3, #1
 8004184:	f000 80e8 	beq.w	8004358 <HAL_ADC_Init+0x25c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004188:	4879      	ldr	r0, [pc, #484]	@ (8004370 <HAL_ADC_Init+0x274>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 800418a:	6883      	ldr	r3, [r0, #8]
 800418c:	6861      	ldr	r1, [r4, #4]
 800418e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004192:	430b      	orrs	r3, r1
 8004194:	6083      	str	r3, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004196:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800419a:	430b      	orrs	r3, r1
 800419c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800419e:	7e60      	ldrb	r0, [r4, #25]
 80041a0:	3901      	subs	r1, #1
 80041a2:	bf18      	it	ne
 80041a4:	2101      	movne	r1, #1
 80041a6:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80041aa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041ae:	f894 1020 	ldrb.w	r1, [r4, #32]
 80041b2:	2901      	cmp	r1, #1
 80041b4:	f000 8098 	beq.w	80042e8 <HAL_ADC_Init+0x1ec>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80041ba:	2901      	cmp	r1, #1
 80041bc:	d00c      	beq.n	80041d8 <HAL_ADC_Init+0xdc>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80041be:	486b      	ldr	r0, [pc, #428]	@ (800436c <HAL_ADC_Init+0x270>)
 80041c0:	4282      	cmp	r2, r0
 80041c2:	f000 80a1 	beq.w	8004308 <HAL_ADC_Init+0x20c>
 80041c6:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 80041ca:	4282      	cmp	r2, r0
 80041cc:	f000 809c 	beq.w	8004308 <HAL_ADC_Init+0x20c>
 80041d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80041d2:	4318      	orrs	r0, r3
 80041d4:	ea40 0301 	orr.w	r3, r0, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80041d8:	6891      	ldr	r1, [r2, #8]
 80041da:	f011 0f0c 	tst.w	r1, #12
 80041de:	d10c      	bne.n	80041fa <HAL_ADC_Init+0xfe>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80041e0:	68d1      	ldr	r1, [r2, #12]
 80041e2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80041e6:	f021 0102 	bic.w	r1, r1, #2
 80041ea:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80041ec:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80041f0:	7e20      	ldrb	r0, [r4, #24]
 80041f2:	0049      	lsls	r1, r1, #1
 80041f4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80041f8:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80041fa:	68d0      	ldr	r0, [r2, #12]
 80041fc:	495d      	ldr	r1, [pc, #372]	@ (8004374 <HAL_ADC_Init+0x278>)
 80041fe:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004200:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8004202:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004204:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8004206:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004208:	d076      	beq.n	80042f8 <HAL_ADC_Init+0x1fc>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800420a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800420c:	f023 030f 	bic.w	r3, r3, #15
 8004210:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8004212:	2000      	movs	r0, #0
 8004214:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004222:	b003      	add	sp, #12
 8004224:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8004226:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004228:	f023 0312 	bic.w	r3, r3, #18
 800422c:	f043 0310 	orr.w	r3, r3, #16
 8004230:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004232:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6463      	str	r3, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800423a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    ADC_STATE_CLR_SET(hadc->State,
 800423c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800423e:	f023 0312 	bic.w	r3, r3, #18
 8004242:	f043 0310 	orr.w	r3, r3, #16
 8004246:	6423      	str	r3, [r4, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR; 
 8004248:	e778      	b.n	800413c <HAL_ADC_Init+0x40>
      hadc->InjectionConfig.ContextQueue = 0U;
 800424a:	e9c0 5512 	strd	r5, r5, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800424e:	6445      	str	r5, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8004250:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8004254:	f7fe fed8 	bl	8003008 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	6893      	ldr	r3, [r2, #8]
 800425c:	00d8      	lsls	r0, r3, #3
 800425e:	d511      	bpl.n	8004284 <HAL_ADC_Init+0x188>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004260:	462b      	mov	r3, r5
 8004262:	e75a      	b.n	800411a <HAL_ADC_Init+0x1e>
 8004264:	4944      	ldr	r1, [pc, #272]	@ (8004378 <HAL_ADC_Init+0x27c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004266:	4842      	ldr	r0, [pc, #264]	@ (8004370 <HAL_ADC_Init+0x274>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004268:	6893      	ldr	r3, [r2, #8]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d059      	beq.n	8004326 <HAL_ADC_Init+0x22a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004272:	688b      	ldr	r3, [r1, #8]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d186      	bne.n	800418a <HAL_ADC_Init+0x8e>
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	07db      	lsls	r3, r3, #31
 8004280:	d489      	bmi.n	8004196 <HAL_ADC_Init+0x9a>
 8004282:	e782      	b.n	800418a <HAL_ADC_Init+0x8e>
        tmp_hal_status = ADC_Disable(hadc);
 8004284:	4620      	mov	r0, r4
 8004286:	f7ff ff03 	bl	8004090 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800428a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800428c:	f012 0f10 	tst.w	r2, #16
        tmp_hal_status = ADC_Disable(hadc);
 8004290:	4603      	mov	r3, r0
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004292:	6822      	ldr	r2, [r4, #0]
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004294:	f47f af41 	bne.w	800411a <HAL_ADC_Init+0x1e>
 8004298:	2800      	cmp	r0, #0
 800429a:	f47f af3e 	bne.w	800411a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800429e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042a0:	4d36      	ldr	r5, [pc, #216]	@ (800437c <HAL_ADC_Init+0x280>)
          ADC_STATE_CLR_SET(hadc->State,
 80042a2:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 80042a6:	f021 0102 	bic.w	r1, r1, #2
 80042aa:	f041 0102 	orr.w	r1, r1, #2
 80042ae:	6421      	str	r1, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80042b0:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042b2:	6829      	ldr	r1, [r5, #0]
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80042b4:	f020 5040 	bic.w	r0, r0, #805306368	@ 0x30000000
 80042b8:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80042ba:	6890      	ldr	r0, [r2, #8]
 80042bc:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80042c0:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042c2:	482f      	ldr	r0, [pc, #188]	@ (8004380 <HAL_ADC_Init+0x284>)
 80042c4:	fba0 0101 	umull	r0, r1, r0, r1
 80042c8:	0c89      	lsrs	r1, r1, #18
 80042ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80042ce:	0049      	lsls	r1, r1, #1
 80042d0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80042d2:	9901      	ldr	r1, [sp, #4]
 80042d4:	2900      	cmp	r1, #0
 80042d6:	f43f af20 	beq.w	800411a <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80042da:	9901      	ldr	r1, [sp, #4]
 80042dc:	3901      	subs	r1, #1
 80042de:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80042e0:	9901      	ldr	r1, [sp, #4]
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_Init+0x1de>
 80042e6:	e718      	b.n	800411a <HAL_ADC_Init+0x1e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042e8:	bb30      	cbnz	r0, 8004338 <HAL_ADC_Init+0x23c>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80042ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80042ec:	3901      	subs	r1, #1
 80042ee:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 80042f2:	f441 3380 	orr.w	r3, r1, #65536	@ 0x10000
 80042f6:	e75f      	b.n	80041b8 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80042f8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80042fa:	69e3      	ldr	r3, [r4, #28]
 80042fc:	f021 010f 	bic.w	r1, r1, #15
 8004300:	3b01      	subs	r3, #1
 8004302:	430b      	orrs	r3, r1
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	e784      	b.n	8004212 <HAL_ADC_Init+0x116>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004308:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 800430c:	d01f      	beq.n	800434e <HAL_ADC_Init+0x252>
 800430e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004312:	d026      	beq.n	8004362 <HAL_ADC_Init+0x266>
 8004314:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8004318:	bf08      	it	eq
 800431a:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 800431e:	e757      	b.n	80041d0 <HAL_ADC_Init+0xd4>
 8004320:	4911      	ldr	r1, [pc, #68]	@ (8004368 <HAL_ADC_Init+0x26c>)
 8004322:	4818      	ldr	r0, [pc, #96]	@ (8004384 <HAL_ADC_Init+0x288>)
 8004324:	e7a0      	b.n	8004268 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	07dd      	lsls	r5, r3, #31
 800432a:	f53f af34 	bmi.w	8004196 <HAL_ADC_Init+0x9a>
 800432e:	e7a0      	b.n	8004272 <HAL_ADC_Init+0x176>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004330:	4814      	ldr	r0, [pc, #80]	@ (8004384 <HAL_ADC_Init+0x288>)
 8004332:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8004336:	e797      	b.n	8004268 <HAL_ADC_Init+0x16c>
        ADC_STATE_CLR_SET(hadc->State,
 8004338:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800433a:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 800433e:	f041 0120 	orr.w	r1, r1, #32
 8004342:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004344:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004346:	f041 0101 	orr.w	r1, r1, #1
 800434a:	6461      	str	r1, [r4, #68]	@ 0x44
 800434c:	e734      	b.n	80041b8 <HAL_ADC_Init+0xbc>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800434e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004352:	e73d      	b.n	80041d0 <HAL_ADC_Init+0xd4>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004354:	4806      	ldr	r0, [pc, #24]	@ (8004370 <HAL_ADC_Init+0x274>)
 8004356:	e787      	b.n	8004268 <HAL_ADC_Init+0x16c>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	07db      	lsls	r3, r3, #31
 800435c:	f53f af1b 	bmi.w	8004196 <HAL_ADC_Init+0x9a>
 8004360:	e712      	b.n	8004188 <HAL_ADC_Init+0x8c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004362:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8004366:	e733      	b.n	80041d0 <HAL_ADC_Init+0xd4>
 8004368:	50000100 	.word	0x50000100
 800436c:	50000400 	.word	0x50000400
 8004370:	50000700 	.word	0x50000700
 8004374:	fff0c007 	.word	0xfff0c007
 8004378:	50000500 	.word	0x50000500
 800437c:	200003e0 	.word	0x200003e0
 8004380:	431bde83 	.word	0x431bde83
 8004384:	50000300 	.word	0x50000300

08004388 <HAL_ADC_ConfigChannel>:
{
 8004388:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800438a:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
{
 800438e:	b083      	sub	sp, #12
 8004390:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004392:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800439a:	f000 80dd 	beq.w	8004558 <HAL_ADC_ConfigChannel+0x1d0>
 800439e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043a0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80043a2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043a6:	6890      	ldr	r0, [r2, #8]
 80043a8:	0744      	lsls	r4, r0, #29
 80043aa:	d43d      	bmi.n	8004428 <HAL_ADC_ConfigChannel+0xa0>
    if (sConfig->Rank < 5U)
 80043ac:	684d      	ldr	r5, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 80043ae:	680c      	ldr	r4, [r1, #0]
 80043b0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    if (sConfig->Rank < 5U)
 80043b4:	2d04      	cmp	r5, #4
      MODIFY_REG(hadc->Instance->SQR1,
 80043b6:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 80043ba:	f200 8087 	bhi.w	80044cc <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 80043be:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80043c0:	f04f 0c1f 	mov.w	ip, #31
 80043c4:	fa0c fc00 	lsl.w	ip, ip, r0
 80043c8:	ea25 050c 	bic.w	r5, r5, ip
 80043cc:	fa04 f000 	lsl.w	r0, r4, r0
 80043d0:	4328      	orrs	r0, r5
 80043d2:	6310      	str	r0, [r2, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043d4:	6890      	ldr	r0, [r2, #8]
 80043d6:	f010 0f0c 	tst.w	r0, #12
 80043da:	d139      	bne.n	8004450 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043dc:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043de:	6888      	ldr	r0, [r1, #8]
 80043e0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043e4:	f200 8081 	bhi.w	80044ea <HAL_ADC_ConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043e8:	6956      	ldr	r6, [r2, #20]
 80043ea:	f04f 0c07 	mov.w	ip, #7
 80043ee:	40a8      	lsls	r0, r5
 80043f0:	fa0c f505 	lsl.w	r5, ip, r5
 80043f4:	ea26 0505 	bic.w	r5, r6, r5
 80043f8:	4328      	orrs	r0, r5
 80043fa:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80043fc:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80043fe:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004400:	694e      	ldr	r6, [r1, #20]
 8004402:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004406:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8004408:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800440a:	4086      	lsls	r6, r0
      MODIFY_REG(hadc->Instance->OFR1               ,
 800440c:	ea4f 6c84 	mov.w	ip, r4, lsl #26
    switch (sConfig->OffsetNumber)
 8004410:	2d03      	cmp	r5, #3
 8004412:	f200 8146 	bhi.w	80046a2 <HAL_ADC_ConfigChannel+0x31a>
 8004416:	e8df f015 	tbh	[pc, r5, lsl #1]
 800441a:	0012      	.short	0x0012
 800441c:	00f000fa 	.word	0x00f000fa
 8004420:	00e6      	.short	0x00e6
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004422:	6810      	ldr	r0, [r2, #0]
 8004424:	07c0      	lsls	r0, r0, #31
 8004426:	d53f      	bpl.n	80044a8 <HAL_ADC_ConfigChannel+0x120>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	641a      	str	r2, [r3, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8004430:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004438:	b003      	add	sp, #12
 800443a:	bc70      	pop	{r4, r5, r6}
 800443c:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 800443e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8004440:	48a5      	ldr	r0, [pc, #660]	@ (80046d8 <HAL_ADC_ConfigChannel+0x350>)
 8004442:	4028      	ands	r0, r5
 8004444:	ea40 000c 	orr.w	r0, r0, ip
 8004448:	4330      	orrs	r0, r6
 800444a:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800444e:	6610      	str	r0, [r2, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004450:	6890      	ldr	r0, [r2, #8]
 8004452:	f000 0003 	and.w	r0, r0, #3
 8004456:	2801      	cmp	r0, #1
 8004458:	d07a      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x1c8>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800445a:	68cd      	ldr	r5, [r1, #12]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800445c:	2001      	movs	r0, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800445e:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004460:	fa00 f004 	lsl.w	r0, r0, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004464:	d07c      	beq.n	8004560 <HAL_ADC_ConfigChannel+0x1d8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004466:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 800446a:	ea21 0100 	bic.w	r1, r1, r0
 800446e:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004472:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004476:	f000 8089 	beq.w	800458c <HAL_ADC_ConfigChannel+0x204>
 800447a:	4998      	ldr	r1, [pc, #608]	@ (80046dc <HAL_ADC_ConfigChannel+0x354>)
 800447c:	428a      	cmp	r2, r1
 800447e:	d04b      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x190>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004480:	2c10      	cmp	r4, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004482:	4997      	ldr	r1, [pc, #604]	@ (80046e0 <HAL_ADC_ConfigChannel+0x358>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004484:	f000 80a0 	beq.w	80045c8 <HAL_ADC_ConfigChannel+0x240>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004488:	2c11      	cmp	r4, #17
 800448a:	d04b      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x19c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800448c:	2c12      	cmp	r4, #18
 800448e:	d11b      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004490:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004492:	0240      	lsls	r0, r0, #9
 8004494:	d418      	bmi.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004496:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800449a:	d146      	bne.n	800452a <HAL_ADC_ConfigChannel+0x1a2>
 800449c:	4d8f      	ldr	r5, [pc, #572]	@ (80046dc <HAL_ADC_ConfigChannel+0x354>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800449e:	6890      	ldr	r0, [r2, #8]
 80044a0:	f000 0003 	and.w	r0, r0, #3
 80044a4:	2801      	cmp	r0, #1
 80044a6:	d0bc      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x9a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044a8:	68a8      	ldr	r0, [r5, #8]
 80044aa:	f000 0003 	and.w	r0, r0, #3
 80044ae:	2801      	cmp	r0, #1
 80044b0:	f000 80ce 	beq.w	8004650 <HAL_ADC_ConfigChannel+0x2c8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044b4:	2c10      	cmp	r4, #16
 80044b6:	f000 80d0 	beq.w	800465a <HAL_ADC_ConfigChannel+0x2d2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80044ba:	2c11      	cmp	r4, #17
 80044bc:	f000 80b9 	beq.w	8004632 <HAL_ADC_ConfigChannel+0x2aa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80044c6:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c8:	2000      	movs	r0, #0
 80044ca:	e7b2      	b.n	8004432 <HAL_ADC_ConfigChannel+0xaa>
    else if (sConfig->Rank < 10U)
 80044cc:	2d09      	cmp	r5, #9
 80044ce:	d918      	bls.n	8004502 <HAL_ADC_ConfigChannel+0x17a>
    else if (sConfig->Rank < 15U)
 80044d0:	2d0e      	cmp	r5, #14
 80044d2:	d87d      	bhi.n	80045d0 <HAL_ADC_ConfigChannel+0x248>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80044d4:	6b95      	ldr	r5, [r2, #56]	@ 0x38
 80044d6:	383c      	subs	r0, #60	@ 0x3c
 80044d8:	261f      	movs	r6, #31
 80044da:	4086      	lsls	r6, r0
 80044dc:	ea25 0506 	bic.w	r5, r5, r6
 80044e0:	fa04 f000 	lsl.w	r0, r4, r0
 80044e4:	4328      	orrs	r0, r5
 80044e6:	6390      	str	r0, [r2, #56]	@ 0x38
 80044e8:	e774      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80044ea:	6996      	ldr	r6, [r2, #24]
 80044ec:	3d1e      	subs	r5, #30
 80044ee:	f04f 0c07 	mov.w	ip, #7
 80044f2:	40a8      	lsls	r0, r5
 80044f4:	fa0c f505 	lsl.w	r5, ip, r5
 80044f8:	ea26 0505 	bic.w	r5, r6, r5
 80044fc:	4328      	orrs	r0, r5
 80044fe:	6190      	str	r0, [r2, #24]
 8004500:	e77c      	b.n	80043fc <HAL_ADC_ConfigChannel+0x74>
      MODIFY_REG(hadc->Instance->SQR2,
 8004502:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004504:	381e      	subs	r0, #30
 8004506:	261f      	movs	r6, #31
 8004508:	4086      	lsls	r6, r0
 800450a:	ea25 0506 	bic.w	r5, r5, r6
 800450e:	fa04 f000 	lsl.w	r0, r4, r0
 8004512:	4328      	orrs	r0, r5
 8004514:	6350      	str	r0, [r2, #52]	@ 0x34
 8004516:	e75d      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x4c>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004518:	2c10      	cmp	r4, #16
 800451a:	f000 8082 	beq.w	8004622 <HAL_ADC_ConfigChannel+0x29a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800451e:	2c11      	cmp	r4, #17
 8004520:	d150      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x23c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004522:	4970      	ldr	r1, [pc, #448]	@ (80046e4 <HAL_ADC_ConfigChannel+0x35c>)
 8004524:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004526:	01c5      	lsls	r5, r0, #7
 8004528:	d4ce      	bmi.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800452a:	486c      	ldr	r0, [pc, #432]	@ (80046dc <HAL_ADC_ConfigChannel+0x354>)
 800452c:	4282      	cmp	r2, r0
 800452e:	d07d      	beq.n	800462c <HAL_ADC_ConfigChannel+0x2a4>
 8004530:	4d6d      	ldr	r5, [pc, #436]	@ (80046e8 <HAL_ADC_ConfigChannel+0x360>)
 8004532:	42aa      	cmp	r2, r5
 8004534:	f000 80ae 	beq.w	8004694 <HAL_ADC_ConfigChannel+0x30c>
 8004538:	486c      	ldr	r0, [pc, #432]	@ (80046ec <HAL_ADC_ConfigChannel+0x364>)
 800453a:	4282      	cmp	r2, r0
 800453c:	d0af      	beq.n	800449e <HAL_ADC_ConfigChannel+0x116>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800453e:	6890      	ldr	r0, [r2, #8]
 8004540:	f000 0003 	and.w	r0, r0, #3
 8004544:	2801      	cmp	r0, #1
 8004546:	f000 80a7 	beq.w	8004698 <HAL_ADC_ConfigChannel+0x310>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800454a:	2c10      	cmp	r4, #16
 800454c:	d1b5      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x132>
 800454e:	e7bb      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004550:	6810      	ldr	r0, [r2, #0]
 8004552:	07c0      	lsls	r0, r0, #31
 8004554:	d581      	bpl.n	800445a <HAL_ADC_ConfigChannel+0xd2>
 8004556:	e7b7      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
  __HAL_LOCK(hadc);
 8004558:	2002      	movs	r0, #2
}
 800455a:	b003      	add	sp, #12
 800455c:	bc70      	pop	{r4, r5, r6}
 800455e:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004560:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004562:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004566:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004568:	ea41 0100 	orr.w	r1, r1, r0
 800456c:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004570:	d916      	bls.n	80045a0 <HAL_ADC_ConfigChannel+0x218>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004572:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8004576:	6991      	ldr	r1, [r2, #24]
 8004578:	381b      	subs	r0, #27
 800457a:	2607      	movs	r6, #7
 800457c:	4085      	lsls	r5, r0
 800457e:	fa06 f000 	lsl.w	r0, r6, r0
 8004582:	ea21 0100 	bic.w	r1, r1, r0
 8004586:	4329      	orrs	r1, r5
 8004588:	6191      	str	r1, [r2, #24]
 800458a:	e772      	b.n	8004472 <HAL_ADC_ConfigChannel+0xea>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800458c:	2c10      	cmp	r4, #16
 800458e:	d059      	beq.n	8004644 <HAL_ADC_ConfigChannel+0x2bc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004590:	2c11      	cmp	r4, #17
 8004592:	d117      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x23c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004594:	4953      	ldr	r1, [pc, #332]	@ (80046e4 <HAL_ADC_ConfigChannel+0x35c>)
 8004596:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004598:	01c6      	lsls	r6, r0, #7
 800459a:	f57f af7f 	bpl.w	800449c <HAL_ADC_ConfigChannel+0x114>
 800459e:	e793      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
        MODIFY_REG(hadc->Instance->SMPR1,
 80045a0:	1c60      	adds	r0, r4, #1
 80045a2:	6951      	ldr	r1, [r2, #20]
 80045a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80045a8:	2607      	movs	r6, #7
 80045aa:	4085      	lsls	r5, r0
 80045ac:	fa06 f000 	lsl.w	r0, r6, r0
 80045b0:	ea21 0100 	bic.w	r1, r1, r0
 80045b4:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045b6:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80045ba:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045bc:	d084      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
 80045be:	4947      	ldr	r1, [pc, #284]	@ (80046dc <HAL_ADC_ConfigChannel+0x354>)
 80045c0:	428a      	cmp	r2, r1
 80045c2:	d181      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
{
 80045c4:	4947      	ldr	r1, [pc, #284]	@ (80046e4 <HAL_ADC_ConfigChannel+0x35c>)
 80045c6:	e761      	b.n	800448c <HAL_ADC_ConfigChannel+0x104>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80045c8:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045ca:	0206      	lsls	r6, r0, #8
 80045cc:	d5b0      	bpl.n	8004530 <HAL_ADC_ConfigChannel+0x1a8>
 80045ce:	e77b      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80045d0:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80045d2:	385a      	subs	r0, #90	@ 0x5a
 80045d4:	261f      	movs	r6, #31
 80045d6:	4086      	lsls	r6, r0
 80045d8:	ea25 0506 	bic.w	r5, r5, r6
 80045dc:	fa04 f000 	lsl.w	r0, r4, r0
 80045e0:	4328      	orrs	r0, r5
 80045e2:	63d0      	str	r0, [r2, #60]	@ 0x3c
 80045e4:	e6f6      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80045e6:	6ed5      	ldr	r5, [r2, #108]	@ 0x6c
 80045e8:	483b      	ldr	r0, [pc, #236]	@ (80046d8 <HAL_ADC_ConfigChannel+0x350>)
 80045ea:	4028      	ands	r0, r5
 80045ec:	ea40 000c 	orr.w	r0, r0, ip
 80045f0:	4330      	orrs	r0, r6
 80045f2:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80045f6:	66d0      	str	r0, [r2, #108]	@ 0x6c
      break;
 80045f8:	e72a      	b.n	8004450 <HAL_ADC_ConfigChannel+0xc8>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80045fa:	6e95      	ldr	r5, [r2, #104]	@ 0x68
 80045fc:	4836      	ldr	r0, [pc, #216]	@ (80046d8 <HAL_ADC_ConfigChannel+0x350>)
 80045fe:	4028      	ands	r0, r5
 8004600:	ea40 000c 	orr.w	r0, r0, ip
 8004604:	4330      	orrs	r0, r6
 8004606:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800460a:	6690      	str	r0, [r2, #104]	@ 0x68
      break;
 800460c:	e720      	b.n	8004450 <HAL_ADC_ConfigChannel+0xc8>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800460e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004610:	4831      	ldr	r0, [pc, #196]	@ (80046d8 <HAL_ADC_ConfigChannel+0x350>)
 8004612:	4028      	ands	r0, r5
 8004614:	ea40 000c 	orr.w	r0, r0, ip
 8004618:	4330      	orrs	r0, r6
 800461a:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800461e:	6650      	str	r0, [r2, #100]	@ 0x64
      break;
 8004620:	e716      	b.n	8004450 <HAL_ADC_ConfigChannel+0xc8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004622:	4930      	ldr	r1, [pc, #192]	@ (80046e4 <HAL_ADC_ConfigChannel+0x35c>)
 8004624:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004626:	0200      	lsls	r0, r0, #8
 8004628:	f53f af4e 	bmi.w	80044c8 <HAL_ADC_ConfigChannel+0x140>
 800462c:	f04f 45a0 	mov.w	r5, #1342177280	@ 0x50000000
 8004630:	e735      	b.n	800449e <HAL_ADC_ConfigChannel+0x116>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004632:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004636:	f47f af47 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x140>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800463a:	688a      	ldr	r2, [r1, #8]
 800463c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004640:	608a      	str	r2, [r1, #8]
 8004642:	e741      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004644:	4927      	ldr	r1, [pc, #156]	@ (80046e4 <HAL_ADC_ConfigChannel+0x35c>)
 8004646:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004648:	0205      	lsls	r5, r0, #8
 800464a:	f57f af27 	bpl.w	800449c <HAL_ADC_ConfigChannel+0x114>
 800464e:	e73b      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004650:	6828      	ldr	r0, [r5, #0]
 8004652:	07c5      	lsls	r5, r0, #31
 8004654:	f53f aee8 	bmi.w	8004428 <HAL_ADC_ConfigChannel+0xa0>
 8004658:	e72c      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x12c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800465a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800465e:	f47f af33 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x140>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004662:	4a23      	ldr	r2, [pc, #140]	@ (80046f0 <HAL_ADC_ConfigChannel+0x368>)
 8004664:	4c23      	ldr	r4, [pc, #140]	@ (80046f4 <HAL_ADC_ConfigChannel+0x36c>)
 8004666:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004668:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800466a:	fba4 4202 	umull	r4, r2, r4, r2
 800466e:	0c92      	lsrs	r2, r2, #18
 8004670:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004674:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004676:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800467a:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800467c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800467e:	9a01      	ldr	r2, [sp, #4]
 8004680:	2a00      	cmp	r2, #0
 8004682:	f43f af21 	beq.w	80044c8 <HAL_ADC_ConfigChannel+0x140>
            wait_loop_index--;
 8004686:	9a01      	ldr	r2, [sp, #4]
 8004688:	3a01      	subs	r2, #1
 800468a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800468c:	9a01      	ldr	r2, [sp, #4]
 800468e:	2a00      	cmp	r2, #0
 8004690:	d1f9      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x2fe>
 8004692:	e719      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x140>
 8004694:	4d15      	ldr	r5, [pc, #84]	@ (80046ec <HAL_ADC_ConfigChannel+0x364>)
 8004696:	e702      	b.n	800449e <HAL_ADC_ConfigChannel+0x116>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004698:	6810      	ldr	r0, [r2, #0]
 800469a:	07c6      	lsls	r6, r0, #31
 800469c:	f53f aec4 	bmi.w	8004428 <HAL_ADC_ConfigChannel+0xa0>
 80046a0:	e708      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046a2:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80046a4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80046a8:	4560      	cmp	r0, ip
 80046aa:	d025      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0x370>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ac:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80046ae:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80046b2:	4560      	cmp	r0, ip
 80046b4:	d025      	beq.n	8004702 <HAL_ADC_ConfigChannel+0x37a>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b6:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80046b8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80046bc:	4560      	cmp	r0, ip
 80046be:	d025      	beq.n	800470c <HAL_ADC_ConfigChannel+0x384>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046c0:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80046c2:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80046c6:	4560      	cmp	r0, ip
 80046c8:	f47f aec2 	bne.w	8004450 <HAL_ADC_ConfigChannel+0xc8>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80046cc:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80046ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046d2:	66d0      	str	r0, [r2, #108]	@ 0x6c
 80046d4:	e6bc      	b.n	8004450 <HAL_ADC_ConfigChannel+0xc8>
 80046d6:	bf00      	nop
 80046d8:	83fff000 	.word	0x83fff000
 80046dc:	50000100 	.word	0x50000100
 80046e0:	50000700 	.word	0x50000700
 80046e4:	50000300 	.word	0x50000300
 80046e8:	50000400 	.word	0x50000400
 80046ec:	50000500 	.word	0x50000500
 80046f0:	200003e0 	.word	0x200003e0
 80046f4:	431bde83 	.word	0x431bde83
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80046f8:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80046fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046fe:	6610      	str	r0, [r2, #96]	@ 0x60
 8004700:	e7d4      	b.n	80046ac <HAL_ADC_ConfigChannel+0x324>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004702:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004704:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004708:	6650      	str	r0, [r2, #100]	@ 0x64
 800470a:	e7d4      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x32e>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800470c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800470e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004712:	6690      	str	r0, [r2, #104]	@ 0x68
 8004714:	e7d4      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x338>
 8004716:	bf00      	nop

08004718 <HAL_ADCEx_InjectedConfigChannel>:
{
 8004718:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800471a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800471e:	b082      	sub	sp, #8
 8004720:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8004722:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800472a:	f000 81b5 	beq.w	8004a98 <HAL_ADCEx_InjectedConfigChannel+0x380>
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800472e:	6910      	ldr	r0, [r2, #16]
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004730:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8004732:	2401      	movs	r4, #1
 8004734:	f882 403c 	strb.w	r4, [r2, #60]	@ 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004738:	b348      	cbz	r0, 800478e <HAL_ADCEx_InjectedConfigChannel+0x76>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800473a:	698d      	ldr	r5, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800473c:	42a5      	cmp	r5, r4
 800473e:	d026      	beq.n	800478e <HAL_ADCEx_InjectedConfigChannel+0x76>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004740:	6cd4      	ldr	r4, [r2, #76]	@ 0x4c
 8004742:	2c00      	cmp	r4, #0
 8004744:	f040 811a 	bne.w	800497c <HAL_ADCEx_InjectedConfigChannel+0x264>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004748:	6a0c      	ldr	r4, [r1, #32]
 800474a:	2c01      	cmp	r4, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800474c:	f105 35ff 	add.w	r5, r5, #4294967295
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004750:	f000 81f6 	beq.w	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x428>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004754:	48ae      	ldr	r0, [pc, #696]	@ (8004a10 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8004756:	4283      	cmp	r3, r0
 8004758:	f000 81e8 	beq.w	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x414>
 800475c:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8004760:	4283      	cmp	r3, r0
 8004762:	f000 81e3 	beq.w	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x414>
 8004766:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8004768:	4328      	orrs	r0, r5
 800476a:	4304      	orrs	r4, r0
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800476c:	6848      	ldr	r0, [r1, #4]
 800476e:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8004770:	64d5      	str	r5, [r2, #76]	@ 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004772:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004776:	0040      	lsls	r0, r0, #1
 8004778:	3002      	adds	r0, #2
 800477a:	fa06 f500 	lsl.w	r5, r6, r0
 800477e:	261f      	movs	r6, #31
 8004780:	fa06 f000 	lsl.w	r0, r6, r0
 8004784:	ea24 0000 	bic.w	r0, r4, r0
 8004788:	4328      	orrs	r0, r5
 800478a:	6490      	str	r0, [r2, #72]	@ 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 800478c:	e0f4      	b.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x260>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800478e:	6848      	ldr	r0, [r1, #4]
 8004790:	2801      	cmp	r0, #1
 8004792:	f000 80d9 	beq.w	8004948 <HAL_ADCEx_InjectedConfigChannel+0x230>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004796:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 8004798:	f044 0420 	orr.w	r4, r4, #32
      tmp_hal_status = HAL_ERROR;
 800479c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479e:	6414      	str	r4, [r2, #64]	@ 0x40
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80047a0:	689c      	ldr	r4, [r3, #8]
 80047a2:	0725      	lsls	r5, r4, #28
 80047a4:	d40d      	bmi.n	80047c2 <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80047a6:	7f8c      	ldrb	r4, [r1, #30]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80047a8:	7f4d      	ldrb	r5, [r1, #29]
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80047aa:	7f0e      	ldrb	r6, [r1, #28]
 80047ac:	0564      	lsls	r4, r4, #21
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	f040 80bc 	bne.w	800492c <HAL_ADCEx_InjectedConfigChannel+0x214>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80047b4:	68dd      	ldr	r5, [r3, #12]
 80047b6:	ea44 5406 	orr.w	r4, r4, r6, lsl #20
 80047ba:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80047be:	432c      	orrs	r4, r5
 80047c0:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80047c2:	689c      	ldr	r4, [r3, #8]
 80047c4:	f014 0f0c 	tst.w	r4, #12
 80047c8:	d13d      	bne.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80047ca:	6a0c      	ldr	r4, [r1, #32]
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80047cc:	7f4d      	ldrb	r5, [r1, #29]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80047ce:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80047d0:	68dc      	ldr	r4, [r3, #12]
 80047d2:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80047d6:	f000 8151 	beq.w	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x364>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80047da:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80047dc:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80047de:	f000 812e 	beq.w	8004a3e <HAL_ADCEx_InjectedConfigChannel+0x326>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80047e2:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80047e4:	688d      	ldr	r5, [r1, #8]
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80047e6:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80047e8:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80047ec:	f240 8091 	bls.w	8004912 <HAL_ADCEx_InjectedConfigChannel+0x1fa>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80047f0:	699e      	ldr	r6, [r3, #24]
 80047f2:	f1ac 0c1e 	sub.w	ip, ip, #30
 80047f6:	f04f 0e07 	mov.w	lr, #7
 80047fa:	fa05 f50c 	lsl.w	r5, r5, ip
 80047fe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004802:	ea26 060c 	bic.w	r6, r6, ip
 8004806:	4335      	orrs	r5, r6
 8004808:	619d      	str	r5, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800480a:	68dd      	ldr	r5, [r3, #12]
 800480c:	f3c5 0cc1 	ubfx	ip, r5, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 8004810:	690d      	ldr	r5, [r1, #16]
 8004812:	f105 3eff 	add.w	lr, r5, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004816:	694d      	ldr	r5, [r1, #20]
 8004818:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 800481c:	06a4      	lsls	r4, r4, #26
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800481e:	fa05 f50c 	lsl.w	r5, r5, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8004822:	f1be 0f03 	cmp.w	lr, #3
 8004826:	f200 819a 	bhi.w	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x446>
 800482a:	e8df f01e 	tbh	[pc, lr, lsl #1]
 800482e:	0004      	.short	0x0004
 8004830:	00e700ff 	.word	0x00e700ff
 8004834:	00de      	.short	0x00de
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8004836:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8004838:	4325      	orrs	r5, r4
 800483a:	4c76      	ldr	r4, [pc, #472]	@ (8004a14 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 800483c:	4034      	ands	r4, r6
 800483e:	432c      	orrs	r4, r5
 8004840:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004844:	661c      	str	r4, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004846:	689c      	ldr	r4, [r3, #8]
 8004848:	f004 0403 	and.w	r4, r4, #3
 800484c:	2c01      	cmp	r4, #1
 800484e:	d03f      	beq.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004850:	68cd      	ldr	r5, [r1, #12]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8004852:	680c      	ldr	r4, [r1, #0]
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004854:	f04f 0c01 	mov.w	ip, #1
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004858:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800485a:	fa0c fc04 	lsl.w	ip, ip, r4
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800485e:	d03b      	beq.n	80048d8 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004860:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004868:	ea21 010c 	bic.w	r1, r1, ip
 800486c:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004870:	f000 80af 	beq.w	80049d2 <HAL_ADCEx_InjectedConfigChannel+0x2ba>
 8004874:	4968      	ldr	r1, [pc, #416]	@ (8004a18 <HAL_ADCEx_InjectedConfigChannel+0x300>)
 8004876:	428b      	cmp	r3, r1
 8004878:	f000 8104 	beq.w	8004a84 <HAL_ADCEx_InjectedConfigChannel+0x36c>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800487c:	2c10      	cmp	r4, #16
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800487e:	4967      	ldr	r1, [pc, #412]	@ (8004a1c <HAL_ADCEx_InjectedConfigChannel+0x304>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004880:	f000 80ae 	beq.w	80049e0 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004884:	2c11      	cmp	r4, #17
 8004886:	f000 8102 	beq.w	8004a8e <HAL_ADCEx_InjectedConfigChannel+0x376>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800488a:	2c12      	cmp	r4, #18
 800488c:	d11b      	bne.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800488e:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8004890:	026d      	lsls	r5, r5, #9
 8004892:	d418      	bmi.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004898:	f000 80dc 	beq.w	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 800489c:	4d5e      	ldr	r5, [pc, #376]	@ (8004a18 <HAL_ADCEx_InjectedConfigChannel+0x300>)
 800489e:	42ab      	cmp	r3, r5
 80048a0:	f000 8113 	beq.w	8004aca <HAL_ADCEx_InjectedConfigChannel+0x3b2>
 80048a4:	4e5a      	ldr	r6, [pc, #360]	@ (8004a10 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 80048a6:	42b3      	cmp	r3, r6
 80048a8:	f000 8151 	beq.w	8004b4e <HAL_ADCEx_InjectedConfigChannel+0x436>
 80048ac:	4d5c      	ldr	r5, [pc, #368]	@ (8004a20 <HAL_ADCEx_InjectedConfigChannel+0x308>)
 80048ae:	42ab      	cmp	r3, r5
 80048b0:	f000 80d1 	beq.w	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x33e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80048b4:	689d      	ldr	r5, [r3, #8]
 80048b6:	f005 0503 	and.w	r5, r5, #3
 80048ba:	2d01      	cmp	r5, #1
 80048bc:	f000 8132 	beq.w	8004b24 <HAL_ADCEx_InjectedConfigChannel+0x40c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80048c0:	2c10      	cmp	r4, #16
 80048c2:	f040 80d4 	bne.w	8004a6e <HAL_ADCEx_InjectedConfigChannel+0x356>
  __HAL_UNLOCK(hadc);
 80048c6:	2300      	movs	r3, #0
 80048c8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80048cc:	b002      	add	sp, #8
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048d0:	681c      	ldr	r4, [r3, #0]
 80048d2:	07e4      	lsls	r4, r4, #31
 80048d4:	d4f7      	bmi.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 80048d6:	e7bb      	b.n	8004850 <HAL_ADCEx_InjectedConfigChannel+0x138>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80048d8:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
        MODIFY_REG(hadc->Instance->SMPR2,
 80048dc:	6889      	ldr	r1, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80048de:	ea45 050c 	orr.w	r5, r5, ip
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80048e2:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80048e4:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80048e8:	d862      	bhi.n	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x298>
        MODIFY_REG(hadc->Instance->SMPR1,
 80048ea:	1c66      	adds	r6, r4, #1
 80048ec:	695d      	ldr	r5, [r3, #20]
 80048ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80048f2:	f04f 0c07 	mov.w	ip, #7
 80048f6:	40b1      	lsls	r1, r6
 80048f8:	fa0c f606 	lsl.w	r6, ip, r6
 80048fc:	ea25 0506 	bic.w	r5, r5, r6
 8004900:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8004906:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004908:	d0dd      	beq.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 800490a:	4943      	ldr	r1, [pc, #268]	@ (8004a18 <HAL_ADCEx_InjectedConfigChannel+0x300>)
 800490c:	428b      	cmp	r3, r1
 800490e:	d1da      	bne.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8004910:	e064      	b.n	80049dc <HAL_ADCEx_InjectedConfigChannel+0x2c4>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8004912:	695e      	ldr	r6, [r3, #20]
 8004914:	f04f 0e07 	mov.w	lr, #7
 8004918:	fa05 f50c 	lsl.w	r5, r5, ip
 800491c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004920:	ea26 0c0c 	bic.w	ip, r6, ip
 8004924:	ea4c 0505 	orr.w	r5, ip, r5
 8004928:	615d      	str	r5, [r3, #20]
 800492a:	e76e      	b.n	800480a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800492c:	68dd      	ldr	r5, [r3, #12]
 800492e:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004932:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004934:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8004936:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004938:	f47f af43 	bne.w	80047c2 <HAL_ADCEx_InjectedConfigChannel+0xaa>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493c:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 800493e:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8004942:	4630      	mov	r0, r6
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004944:	6414      	str	r4, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 8004946:	e73c      	b.n	80047c2 <HAL_ADCEx_InjectedConfigChannel+0xaa>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004948:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800494a:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800494c:	2c01      	cmp	r4, #1
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800494e:	ea4f 2000 	mov.w	r0, r0, lsl #8
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004952:	d00b      	beq.n	800496c <HAL_ADCEx_InjectedConfigChannel+0x254>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8004954:	4d2e      	ldr	r5, [pc, #184]	@ (8004a10 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8004956:	42ab      	cmp	r3, r5
 8004958:	f000 80aa 	beq.w	8004ab0 <HAL_ADCEx_InjectedConfigChannel+0x398>
 800495c:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8004960:	42ab      	cmp	r3, r5
 8004962:	f000 80a5 	beq.w	8004ab0 <HAL_ADCEx_InjectedConfigChannel+0x398>
 8004966:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8004968:	4328      	orrs	r0, r5
 800496a:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 800496c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800496e:	4d2d      	ldr	r5, [pc, #180]	@ (8004a24 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8004970:	402c      	ands	r4, r5
 8004972:	4304      	orrs	r4, r0
 8004974:	64dc      	str	r4, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004976:	6490      	str	r0, [r2, #72]	@ 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004978:	2000      	movs	r0, #0
 800497a:	e711      	b.n	80047a0 <HAL_ADCEx_InjectedConfigChannel+0x88>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800497c:	6848      	ldr	r0, [r1, #4]
 800497e:	680e      	ldr	r6, [r1, #0]
 8004980:	6c95      	ldr	r5, [r2, #72]	@ 0x48
 8004982:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004986:	0040      	lsls	r0, r0, #1
 8004988:	3002      	adds	r0, #2
 800498a:	f04f 0c1f 	mov.w	ip, #31
 800498e:	4086      	lsls	r6, r0
 8004990:	fa0c f000 	lsl.w	r0, ip, r0
 8004994:	ea25 0000 	bic.w	r0, r5, r0
      hadc->InjectionConfig.ChannelCount --;
 8004998:	3c01      	subs	r4, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800499a:	4330      	orrs	r0, r6
      hadc->InjectionConfig.ChannelCount --;
 800499c:	64d4      	str	r4, [r2, #76]	@ 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800499e:	6490      	str	r0, [r2, #72]	@ 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	d1e9      	bne.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x260>
        MODIFY_REG(hadc->Instance->JSQR              ,
 80049a4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80049a6:	4d1f      	ldr	r5, [pc, #124]	@ (8004a24 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 80049a8:	402c      	ands	r4, r5
 80049aa:	4320      	orrs	r0, r4
 80049ac:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80049ae:	e7e3      	b.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x260>
        MODIFY_REG(hadc->Instance->SMPR2,
 80049b0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80049b4:	699d      	ldr	r5, [r3, #24]
 80049b6:	3e1b      	subs	r6, #27
 80049b8:	f04f 0c07 	mov.w	ip, #7
 80049bc:	40b1      	lsls	r1, r6
 80049be:	fa0c f606 	lsl.w	r6, ip, r6
 80049c2:	ea25 0506 	bic.w	r5, r5, r6
 80049c6:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR2,
 80049cc:	6199      	str	r1, [r3, #24]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049ce:	f47f af51 	bne.w	8004874 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80049d2:	2c10      	cmp	r4, #16
 80049d4:	d039      	beq.n	8004a4a <HAL_ADCEx_InjectedConfigChannel+0x332>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049d6:	2c11      	cmp	r4, #17
 80049d8:	f000 80b4 	beq.w	8004b44 <HAL_ADCEx_InjectedConfigChannel+0x42c>
        tmp_hal_status = HAL_ERROR;
 80049dc:	4912      	ldr	r1, [pc, #72]	@ (8004a28 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80049de:	e754      	b.n	800488a <HAL_ADCEx_InjectedConfigChannel+0x172>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049e0:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80049e2:	022e      	lsls	r6, r5, #8
 80049e4:	f57f af5e 	bpl.w	80048a4 <HAL_ADCEx_InjectedConfigChannel+0x18c>
 80049e8:	e76d      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80049ea:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80049ec:	4325      	orrs	r5, r4
 80049ee:	4c09      	ldr	r4, [pc, #36]	@ (8004a14 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 80049f0:	4034      	ands	r4, r6
 80049f2:	432c      	orrs	r4, r5
 80049f4:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80049f8:	66dc      	str	r4, [r3, #108]	@ 0x6c
      break;
 80049fa:	e724      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80049fc:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 80049fe:	4325      	orrs	r5, r4
 8004a00:	4c04      	ldr	r4, [pc, #16]	@ (8004a14 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8004a02:	4034      	ands	r4, r6
 8004a04:	432c      	orrs	r4, r5
 8004a06:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004a0a:	669c      	str	r4, [r3, #104]	@ 0x68
      break;
 8004a0c:	e71b      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8004a0e:	bf00      	nop
 8004a10:	50000400 	.word	0x50000400
 8004a14:	83fff000 	.word	0x83fff000
 8004a18:	50000100 	.word	0x50000100
 8004a1c:	50000700 	.word	0x50000700
 8004a20:	50000500 	.word	0x50000500
 8004a24:	82082000 	.word	0x82082000
 8004a28:	50000300 	.word	0x50000300
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8004a2c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8004a2e:	4325      	orrs	r5, r4
 8004a30:	4c5f      	ldr	r4, [pc, #380]	@ (8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8004a32:	4034      	ands	r4, r6
 8004a34:	432c      	orrs	r4, r5
 8004a36:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004a3a:	665c      	str	r4, [r3, #100]	@ 0x64
      break;
 8004a3c:	e703      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3e:	6c14      	ldr	r4, [r2, #64]	@ 0x40
 8004a40:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8004a44:	4628      	mov	r0, r5
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a46:	6414      	str	r4, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 8004a48:	e6cb      	b.n	80047e2 <HAL_ADCEx_InjectedConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004a4a:	495a      	ldr	r1, [pc, #360]	@ (8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8004a4c:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a4e:	022d      	lsls	r5, r5, #8
 8004a50:	f53f af39 	bmi.w	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8004a54:	4e58      	ldr	r6, [pc, #352]	@ (8004bb8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a56:	689d      	ldr	r5, [r3, #8]
 8004a58:	f005 0503 	and.w	r5, r5, #3
 8004a5c:	2d01      	cmp	r5, #1
 8004a5e:	d01e      	beq.n	8004a9e <HAL_ADCEx_InjectedConfigChannel+0x386>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a60:	68b5      	ldr	r5, [r6, #8]
 8004a62:	f005 0503 	and.w	r5, r5, #3
 8004a66:	2d01      	cmp	r5, #1
 8004a68:	d032      	beq.n	8004ad0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a6a:	2c10      	cmp	r4, #16
 8004a6c:	d034      	beq.n	8004ad8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004a6e:	2c11      	cmp	r4, #17
 8004a70:	d04f      	beq.n	8004b12 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004a72:	688b      	ldr	r3, [r1, #8]
 8004a74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a78:	608b      	str	r3, [r1, #8]
 8004a7a:	e724      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8004a7c:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 8004a80:	60dc      	str	r4, [r3, #12]
 8004a82:	e6ae      	b.n	80047e2 <HAL_ADCEx_InjectedConfigChannel+0xca>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a84:	2c10      	cmp	r4, #16
 8004a86:	d01b      	beq.n	8004ac0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004a88:	2c11      	cmp	r4, #17
 8004a8a:	d1a7      	bne.n	80049dc <HAL_ADCEx_InjectedConfigChannel+0x2c4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004a8c:	4949      	ldr	r1, [pc, #292]	@ (8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8004a8e:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004a90:	01ee      	lsls	r6, r5, #7
 8004a92:	f57f af03 	bpl.w	800489c <HAL_ADCEx_InjectedConfigChannel+0x184>
 8004a96:	e716      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
  __HAL_LOCK(hadc);
 8004a98:	2002      	movs	r0, #2
}
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a9e:	681d      	ldr	r5, [r3, #0]
 8004aa0:	07ed      	lsls	r5, r5, #31
 8004aa2:	d5dd      	bpl.n	8004a60 <HAL_ADCEx_InjectedConfigChannel+0x348>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004aa6:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8004aaa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aac:	6413      	str	r3, [r2, #64]	@ 0x40
        tmp_hal_status = HAL_ERROR;
 8004aae:	e70a      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8004ab0:	2c14      	cmp	r4, #20
 8004ab2:	d04e      	beq.n	8004b52 <HAL_ADCEx_InjectedConfigChannel+0x43a>
 8004ab4:	2c1c      	cmp	r4, #28
 8004ab6:	d041      	beq.n	8004b3c <HAL_ADCEx_InjectedConfigChannel+0x424>
{
 8004ab8:	2c08      	cmp	r4, #8
 8004aba:	bf08      	it	eq
 8004abc:	2434      	moveq	r4, #52	@ 0x34
 8004abe:	e752      	b.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x24e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004ac0:	493c      	ldr	r1, [pc, #240]	@ (8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8004ac2:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ac4:	022e      	lsls	r6, r5, #8
 8004ac6:	f53f aefe 	bmi.w	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8004aca:	f04f 46a0 	mov.w	r6, #1342177280	@ 0x50000000
 8004ace:	e7c2      	b.n	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x33e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004ad0:	6835      	ldr	r5, [r6, #0]
 8004ad2:	07ed      	lsls	r5, r5, #31
 8004ad4:	d4e6      	bmi.n	8004aa4 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8004ad6:	e7c8      	b.n	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x352>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004adc:	f47f aef3 	bne.w	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae0:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <HAL_ADCEx_InjectedConfigChannel+0x4a4>)
 8004ae2:	4d37      	ldr	r5, [pc, #220]	@ (8004bc0 <HAL_ADCEx_InjectedConfigChannel+0x4a8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004ae6:	688c      	ldr	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae8:	fba5 5303 	umull	r5, r3, r5, r3
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004af2:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004af4:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8004af8:	608c      	str	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004afa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004afc:	9b01      	ldr	r3, [sp, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f43f aee1 	beq.w	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
            wait_loop_index--;
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f9      	bne.n	8004b04 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
 8004b10:	e6d9      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b16:	f47f aed6 	bne.w	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004b1a:	688b      	ldr	r3, [r1, #8]
 8004b1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b20:	608b      	str	r3, [r1, #8]
 8004b22:	e6d0      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004b24:	681d      	ldr	r5, [r3, #0]
 8004b26:	07ee      	lsls	r6, r5, #31
 8004b28:	d4bc      	bmi.n	8004aa4 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8004b2a:	e79e      	b.n	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004b2c:	2c14      	cmp	r4, #20
 8004b2e:	d014      	beq.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x442>
 8004b30:	2c1c      	cmp	r4, #28
 8004b32:	d010      	beq.n	8004b56 <HAL_ADCEx_InjectedConfigChannel+0x43e>
{
 8004b34:	2c08      	cmp	r4, #8
 8004b36:	bf08      	it	eq
 8004b38:	2434      	moveq	r4, #52	@ 0x34
 8004b3a:	e614      	b.n	8004766 <HAL_ADCEx_InjectedConfigChannel+0x4e>
 8004b3c:	2410      	movs	r4, #16
 8004b3e:	e712      	b.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x24e>
 8004b40:	462c      	mov	r4, r5
 8004b42:	e613      	b.n	800476c <HAL_ADCEx_InjectedConfigChannel+0x54>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004b44:	491b      	ldr	r1, [pc, #108]	@ (8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8004b46:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004b48:	01ed      	lsls	r5, r5, #7
 8004b4a:	d583      	bpl.n	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8004b4c:	e6bb      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8004b4e:	4e1d      	ldr	r6, [pc, #116]	@ (8004bc4 <HAL_ADCEx_InjectedConfigChannel+0x4ac>)
 8004b50:	e781      	b.n	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x33e>
{
 8004b52:	241c      	movs	r4, #28
 8004b54:	e707      	b.n	8004966 <HAL_ADCEx_InjectedConfigChannel+0x24e>
 8004b56:	2410      	movs	r4, #16
 8004b58:	e605      	b.n	8004766 <HAL_ADCEx_InjectedConfigChannel+0x4e>
 8004b5a:	241c      	movs	r4, #28
 8004b5c:	e603      	b.n	8004766 <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004b5e:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004b60:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8004b64:	42a5      	cmp	r5, r4
 8004b66:	d014      	beq.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x47a>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004b68:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004b6a:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8004b6e:	42a5      	cmp	r5, r4
 8004b70:	d014      	beq.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x484>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004b72:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8004b74:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8004b78:	42a5      	cmp	r5, r4
 8004b7a:	d014      	beq.n	8004ba6 <HAL_ADCEx_InjectedConfigChannel+0x48e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004b7c:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 8004b7e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8004b82:	42a5      	cmp	r5, r4
 8004b84:	f47f ae5f 	bne.w	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004b88:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8004b8a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004b8e:	66dc      	str	r4, [r3, #108]	@ 0x6c
 8004b90:	e659      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004b92:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004b94:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8004b98:	661d      	str	r5, [r3, #96]	@ 0x60
 8004b9a:	e7e5      	b.n	8004b68 <HAL_ADCEx_InjectedConfigChannel+0x450>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004b9c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004b9e:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8004ba2:	665d      	str	r5, [r3, #100]	@ 0x64
 8004ba4:	e7e5      	b.n	8004b72 <HAL_ADCEx_InjectedConfigChannel+0x45a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004ba6:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8004ba8:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8004bac:	669d      	str	r5, [r3, #104]	@ 0x68
 8004bae:	e7e5      	b.n	8004b7c <HAL_ADCEx_InjectedConfigChannel+0x464>
 8004bb0:	83fff000 	.word	0x83fff000
 8004bb4:	50000300 	.word	0x50000300
 8004bb8:	50000100 	.word	0x50000100
 8004bbc:	200003e0 	.word	0x200003e0
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	50000500 	.word	0x50000500

08004bc8 <HAL_ADC_AnalogWDGConfig>:
{
 8004bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004bca:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004bce:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8004bd0:	2a01      	cmp	r2, #1
 8004bd2:	d07d      	beq.n	8004cd0 <HAL_ADC_AnalogWDGConfig+0x108>
 8004bd4:	4603      	mov	r3, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004bd6:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004bde:	6894      	ldr	r4, [r2, #8]
 8004be0:	f014 0f0c 	tst.w	r4, #12
 8004be4:	d13f      	bne.n	8004c66 <HAL_ADC_AnalogWDGConfig+0x9e>
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004be6:	680f      	ldr	r7, [r1, #0]
      if(AnalogWDGConfig->ITMode == ENABLE)
 8004be8:	7b0c      	ldrb	r4, [r1, #12]
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004bea:	4287      	cmp	r7, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004bec:	e9d1 e604 	ldrd	lr, r6, [r1, #16]
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004bf0:	d044      	beq.n	8004c7c <HAL_ADC_AnalogWDGConfig+0xb4>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004bf2:	68d0      	ldr	r0, [r2, #12]
 8004bf4:	f000 0018 	and.w	r0, r0, #24
 8004bf8:	2818      	cmp	r0, #24
 8004bfa:	d03c      	beq.n	8004c76 <HAL_ADC_AnalogWDGConfig+0xae>
 8004bfc:	68d0      	ldr	r0, [r2, #12]
 8004bfe:	f3c0 0cc1 	ubfx	ip, r0, #3, #2
 8004c02:	f1cc 0c02 	rsb	ip, ip, #2
 8004c06:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004c0a:	fa2e fc0c 	lsr.w	ip, lr, ip
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c0e:	68d0      	ldr	r0, [r2, #12]
 8004c10:	f000 0018 	and.w	r0, r0, #24
 8004c14:	2818      	cmp	r0, #24
 8004c16:	d06d      	beq.n	8004cf4 <HAL_ADC_AnalogWDGConfig+0x12c>
 8004c18:	68d0      	ldr	r0, [r2, #12]
 8004c1a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004c1e:	f1c0 0002 	rsb	r0, r0, #2
 8004c22:	0040      	lsls	r0, r0, #1
 8004c24:	fa26 f000 	lsr.w	r0, r6, r0
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004c28:	2f02      	cmp	r7, #2
 8004c2a:	d053      	beq.n	8004cd4 <HAL_ADC_AnalogWDGConfig+0x10c>
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	d063      	beq.n	8004cf8 <HAL_ADC_AnalogWDGConfig+0x130>
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8004c30:	688d      	ldr	r5, [r1, #8]
          MODIFY_REG(hadc->Instance->TR3                                ,
 8004c32:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c34:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8004c38:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8004c3c:	4301      	orrs	r1, r0
 8004c3e:	6291      	str	r1, [r2, #40]	@ 0x28
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8004c40:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8004c44:	2101      	movs	r1, #1
 8004c46:	40a9      	lsls	r1, r5
 8004c48:	4301      	orrs	r1, r0
 8004c4a:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 8004c4e:	f46f 7100 	mvn.w	r1, #512	@ 0x200
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 8004c52:	f44f 7000 	mov.w	r0, #512	@ 0x200
      if(AnalogWDGConfig->ITMode == ENABLE)
 8004c56:	2c01      	cmp	r4, #1
      __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 8004c58:	6010      	str	r0, [r2, #0]
      if(AnalogWDGConfig->ITMode == ENABLE)
 8004c5a:	d035      	beq.n	8004cc8 <HAL_ADC_AnalogWDGConfig+0x100>
        __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8004c5c:	6850      	ldr	r0, [r2, #4]
 8004c5e:	4001      	ands	r1, r0
 8004c60:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c62:	2000      	movs	r0, #0
 8004c64:	e003      	b.n	8004c6e <HAL_ADC_AnalogWDGConfig+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c68:	f042 0220 	orr.w	r2, r2, #32
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c76:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8004c7a:	e7c8      	b.n	8004c0e <HAL_ADC_AnalogWDGConfig+0x46>
      MODIFY_REG(hadc->Instance->CFGR                             ,
 8004c7c:	6888      	ldr	r0, [r1, #8]
 8004c7e:	68d1      	ldr	r1, [r2, #12]
 8004c80:	f021 41fb 	bic.w	r1, r1, #2105540608	@ 0x7d800000
 8004c84:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8004c88:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
 8004c8c:	4329      	orrs	r1, r5
 8004c8e:	60d1      	str	r1, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c90:	68d0      	ldr	r0, [r2, #12]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c92:	68d1      	ldr	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->TR1                                ,
 8004c94:	6a15      	ldr	r5, [r2, #32]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c96:	f3c1 01c1 	ubfx	r1, r1, #3, #2
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c9a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c9e:	0049      	lsls	r1, r1, #1
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004ca0:	0040      	lsls	r0, r0, #1
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004ca2:	fa06 f101 	lsl.w	r1, r6, r1
      MODIFY_REG(hadc->Instance->TR1                                ,
 8004ca6:	f005 25f0 	and.w	r5, r5, #4026593280	@ 0xf000f000
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004caa:	fa0e f000 	lsl.w	r0, lr, r0
      MODIFY_REG(hadc->Instance->TR1                                ,
 8004cae:	4329      	orrs	r1, r5
 8004cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 8004cb4:	2080      	movs	r0, #128	@ 0x80
      MODIFY_REG(hadc->Instance->TR1                                ,
 8004cb6:	6211      	str	r1, [r2, #32]
      if(AnalogWDGConfig->ITMode == ENABLE)
 8004cb8:	2c01      	cmp	r4, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 8004cba:	6010      	str	r0, [r2, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 8004cbc:	6851      	ldr	r1, [r2, #4]
      if(AnalogWDGConfig->ITMode == ENABLE)
 8004cbe:	d004      	beq.n	8004cca <HAL_ADC_AnalogWDGConfig+0x102>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 8004cc0:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004cc4:	6051      	str	r1, [r2, #4]
 8004cc6:	e7cc      	b.n	8004c62 <HAL_ADC_AnalogWDGConfig+0x9a>
        __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8004cc8:	6851      	ldr	r1, [r2, #4]
 8004cca:	4301      	orrs	r1, r0
 8004ccc:	6051      	str	r1, [r2, #4]
 8004cce:	e7c8      	b.n	8004c62 <HAL_ADC_AnalogWDGConfig+0x9a>
  __HAL_LOCK(hadc);
 8004cd0:	2002      	movs	r0, #2
}
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8004cd4:	b9dd      	cbnz	r5, 8004d0e <HAL_ADC_AnalogWDGConfig+0x146>
          CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8004cd6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004cd8:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8004cdc:	6251      	str	r1, [r2, #36]	@ 0x24
          CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8004cde:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8004ce2:	f36f 0152 	bfc	r1, #1, #18
 8004ce6:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
{
 8004cea:	f46f 7180 	mvn.w	r1, #256	@ 0x100
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 8004cee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004cf2:	e7b0      	b.n	8004c56 <HAL_ADC_AnalogWDGConfig+0x8e>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004cf4:	00b0      	lsls	r0, r6, #2
 8004cf6:	e797      	b.n	8004c28 <HAL_ADC_AnalogWDGConfig+0x60>
          CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8004cf8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cfa:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8004cfe:	6291      	str	r1, [r2, #40]	@ 0x28
          CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8004d00:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8004d04:	f36f 0152 	bfc	r1, #1, #18
 8004d08:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
 8004d0c:	e79f      	b.n	8004c4e <HAL_ADC_AnalogWDGConfig+0x86>
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8004d0e:	688d      	ldr	r5, [r1, #8]
          MODIFY_REG(hadc->Instance->TR2                                ,
 8004d10:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004d12:	f001 21ff 	and.w	r1, r1, #4278255360	@ 0xff00ff00
 8004d16:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8004d1a:	4301      	orrs	r1, r0
 8004d1c:	6251      	str	r1, [r2, #36]	@ 0x24
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8004d1e:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 8004d22:	2101      	movs	r1, #1
 8004d24:	40a9      	lsls	r1, r5
 8004d26:	4301      	orrs	r1, r0
 8004d28:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8004d2c:	e7dd      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x122>
 8004d2e:	bf00      	nop

08004d30 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d30:	6802      	ldr	r2, [r0, #0]
 8004d32:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
{
 8004d36:	4603      	mov	r3, r0
 8004d38:	b4f0      	push	{r4, r5, r6, r7}
 8004d3a:	4841      	ldr	r0, [pc, #260]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d3c:	d00d      	beq.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x2a>
 8004d3e:	4282      	cmp	r2, r0
 8004d40:	d009      	beq.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8004d42:	f500 7040 	add.w	r0, r0, #768	@ 0x300
 8004d46:	4282      	cmp	r2, r0
 8004d48:	d04a      	beq.n	8004de0 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8004d4a:	4c3e      	ldr	r4, [pc, #248]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8004d4c:	42a2      	cmp	r2, r4
 8004d4e:	d004      	beq.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x2a>
    return HAL_ERROR;
 8004d50:	2001      	movs	r0, #1
} 
 8004d52:	bcf0      	pop	{r4, r5, r6, r7}
 8004d54:	4770      	bx	lr
 8004d56:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
  __HAL_LOCK(hadc);
 8004d5a:	f893 c03c 	ldrb.w	ip, [r3, #60]	@ 0x3c
 8004d5e:	f1bc 0f01 	cmp.w	ip, #1
 8004d62:	d043      	beq.n	8004dec <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8004d64:	2401      	movs	r4, #1
 8004d66:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004d6a:	6894      	ldr	r4, [r2, #8]
 8004d6c:	0764      	lsls	r4, r4, #29
 8004d6e:	d509      	bpl.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x54>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d72:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
} 
 8004d80:	bcf0      	pop	{r4, r5, r6, r7}
 8004d82:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004d84:	6884      	ldr	r4, [r0, #8]
 8004d86:	0767      	lsls	r7, r4, #29
 8004d88:	d4f2      	bmi.n	8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d8a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004d8e:	d045      	beq.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8004d90:	4e2b      	ldr	r6, [pc, #172]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8004d92:	4c2d      	ldr	r4, [pc, #180]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8004d94:	4d2d      	ldr	r5, [pc, #180]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8004d96:	42b2      	cmp	r2, r6
 8004d98:	bf18      	it	ne
 8004d9a:	462c      	movne	r4, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9c:	680d      	ldr	r5, [r1, #0]
 8004d9e:	b345      	cbz	r5, 8004df2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004da0:	68a6      	ldr	r6, [r4, #8]
 8004da2:	684f      	ldr	r7, [r1, #4]
 8004da4:	f426 4c60 	bic.w	ip, r6, #57344	@ 0xe000
 8004da8:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
 8004dac:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8004db0:	ea46 060c 	orr.w	r6, r6, ip
 8004db4:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004db6:	6896      	ldr	r6, [r2, #8]
 8004db8:	f006 0603 	and.w	r6, r6, #3
 8004dbc:	2e01      	cmp	r6, #1
 8004dbe:	d03b      	beq.n	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004dc0:	6882      	ldr	r2, [r0, #8]
 8004dc2:	f002 0203 	and.w	r2, r2, #3
 8004dc6:	2a01      	cmp	r2, #1
 8004dc8:	d02e      	beq.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004dca:	68a2      	ldr	r2, [r4, #8]
 8004dcc:	6889      	ldr	r1, [r1, #8]
 8004dce:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004dd2:	430d      	orrs	r5, r1
 8004dd4:	f022 020f 	bic.w	r2, r2, #15
 8004dd8:	4315      	orrs	r5, r2
 8004dda:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e7cc      	b.n	8004d7a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8004de0:	f893 c03c 	ldrb.w	ip, [r3, #60]	@ 0x3c
 8004de4:	4817      	ldr	r0, [pc, #92]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8004de6:	f1bc 0f01 	cmp.w	ip, #1
 8004dea:	d1bb      	bne.n	8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 8004dec:	2002      	movs	r0, #2
} 
 8004dee:	bcf0      	pop	{r4, r5, r6, r7}
 8004df0:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004df2:	68a1      	ldr	r1, [r4, #8]
 8004df4:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004df8:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004dfa:	6891      	ldr	r1, [r2, #8]
 8004dfc:	f001 0103 	and.w	r1, r1, #3
 8004e00:	2901      	cmp	r1, #1
 8004e02:	d015      	beq.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004e04:	6882      	ldr	r2, [r0, #8]
 8004e06:	f002 0203 	and.w	r2, r2, #3
 8004e0a:	2a01      	cmp	r2, #1
 8004e0c:	d008      	beq.n	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004e0e:	68a2      	ldr	r2, [r4, #8]
 8004e10:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004e14:	f022 020f 	bic.w	r2, r2, #15
 8004e18:	60a2      	str	r2, [r4, #8]
 8004e1a:	e7df      	b.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8004e1e:	e7bd      	b.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x6c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004e20:	6802      	ldr	r2, [r0, #0]
 8004e22:	07d2      	lsls	r2, r2, #31
 8004e24:	d4da      	bmi.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e26:	e7f2      	b.n	8004e0e <HAL_ADCEx_MultiModeConfigChannel+0xde>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004e28:	6802      	ldr	r2, [r0, #0]
 8004e2a:	07d0      	lsls	r0, r2, #31
 8004e2c:	d4d6      	bmi.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e2e:	e7cc      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	07d1      	lsls	r1, r2, #31
 8004e34:	d4d2      	bmi.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e36:	e7e5      	b.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	07d6      	lsls	r6, r2, #31
 8004e3c:	d4ce      	bmi.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e3e:	e7bf      	b.n	8004dc0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8004e40:	50000100 	.word	0x50000100
 8004e44:	50000500 	.word	0x50000500
 8004e48:	50000300 	.word	0x50000300
 8004e4c:	50000700 	.word	0x50000700

08004e50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e50:	4907      	ldr	r1, [pc, #28]	@ (8004e70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004e52:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e54:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e56:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e60:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e62:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004e6a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <HAL_NVIC_SetPriority+0x70>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e7e:	f1c3 0e07 	rsb	lr, r3, #7
 8004e82:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e86:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e8a:	bf28      	it	cs
 8004e8c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e90:	f1bc 0f06 	cmp.w	ip, #6
 8004e94:	d91c      	bls.n	8004ed0 <HAL_NVIC_SetPriority+0x5c>
 8004e96:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004ea2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	fa03 f30e 	lsl.w	r3, r3, lr
 8004eae:	ea21 0303 	bic.w	r3, r1, r3
 8004eb2:	fa03 f30c 	lsl.w	r3, r3, ip
 8004eb6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004eba:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004ebe:	db0a      	blt.n	8004ed6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004ec4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004ec8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ed0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed2:	4694      	mov	ip, r2
 8004ed4:	e7e7      	b.n	8004ea6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed6:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <HAL_NVIC_SetPriority+0x74>)
 8004ed8:	f000 000f 	and.w	r0, r0, #15
 8004edc:	4402      	add	r2, r0
 8004ede:	7613      	strb	r3, [r2, #24]
 8004ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ee4:	e000ed00 	.word	0xe000ed00
 8004ee8:	e000ecfc 	.word	0xe000ecfc

08004eec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004eec:	2800      	cmp	r0, #0
 8004eee:	db07      	blt.n	8004f00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef0:	0941      	lsrs	r1, r0, #5
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <HAL_NVIC_EnableIRQ+0x18>)
 8004ef4:	f000 001f 	and.w	r0, r0, #31
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4083      	lsls	r3, r0
 8004efc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e100 	.word	0xe000e100

08004f08 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004f08:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f0c:	4905      	ldr	r1, [pc, #20]	@ (8004f24 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f10:	68ca      	ldr	r2, [r1, #12]
 8004f12:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60cb      	str	r3, [r1, #12]
 8004f1a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004f1e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004f20:	e7fd      	b.n	8004f1e <HAL_NVIC_SystemReset+0x16>
 8004f22:	bf00      	nop
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	05fa0004 	.word	0x05fa0004

08004f2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f2c:	3801      	subs	r0, #1
 8004f2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004f32:	d301      	bcc.n	8004f38 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004f36:	4770      	bx	lr
{
 8004f38:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	4c07      	ldr	r4, [pc, #28]	@ (8004f5c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f40:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f42:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004f46:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f4a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f4e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f56:	6119      	str	r1, [r3, #16]
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <HAL_SYSTICK_IRQHandler>:
{
 8004f64:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004f66:	f7ff fffb 	bl	8004f60 <HAL_SYSTICK_Callback>
}
 8004f6a:	bd08      	pop	{r3, pc}

08004f6c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d033      	beq.n	8004fd8 <HAL_DMA_Init+0x6c>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f70:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8004f74:	4603      	mov	r3, r0
{
 8004f76:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f78:	e9d0 0403 	ldrd	r0, r4, [r0, #12]
  tmp |=  hdma->Init.Direction        |
 8004f7c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f80:	6958      	ldr	r0, [r3, #20]
  tmp = hdma->Instance->CCR;
 8004f82:	6819      	ldr	r1, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f84:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f86:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f88:	e9d3 4006 	ldrd	r4, r0, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8004f90:	6808      	ldr	r0, [r1, #0]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f92:	4c12      	ldr	r4, [pc, #72]	@ (8004fdc <HAL_DMA_Init+0x70>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f94:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8004f98:	4302      	orrs	r2, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f9a:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;
 8004f9c:	600a      	str	r2, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f9e:	d911      	bls.n	8004fc4 <HAL_DMA_Init+0x58>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe0 <HAL_DMA_Init+0x74>)
 8004fa2:	4810      	ldr	r0, [pc, #64]	@ (8004fe4 <HAL_DMA_Init+0x78>)
    hdma->DmaBaseAddress = DMA2;
 8004fa4:	4c10      	ldr	r4, [pc, #64]	@ (8004fe8 <HAL_DMA_Init+0x7c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fa6:	440a      	add	r2, r1
 8004fa8:	fba0 0202 	umull	r0, r2, r0, r2
 8004fac:	0912      	lsrs	r2, r2, #4
 8004fae:	0092      	lsls	r2, r2, #2
  hdma->Lock = HAL_UNLOCKED;
 8004fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb4:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8004fb6:	8419      	strh	r1, [r3, #32]
 8004fb8:	e9c3 420f 	strd	r4, r2, [r3, #60]	@ 0x3c
}
 8004fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc0:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8004fc2:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fc4:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <HAL_DMA_Init+0x80>)
 8004fc6:	4807      	ldr	r0, [pc, #28]	@ (8004fe4 <HAL_DMA_Init+0x78>)
 8004fc8:	440a      	add	r2, r1
 8004fca:	fba0 0202 	umull	r0, r2, r0, r2
 8004fce:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8004fd0:	f2a4 4407 	subw	r4, r4, #1031	@ 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fd4:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8004fd6:	e7eb      	b.n	8004fb0 <HAL_DMA_Init+0x44>
    return HAL_ERROR;
 8004fd8:	2001      	movs	r0, #1
}
 8004fda:	4770      	bx	lr
 8004fdc:	40020407 	.word	0x40020407
 8004fe0:	bffdfbf8 	.word	0xbffdfbf8
 8004fe4:	cccccccd 	.word	0xcccccccd
 8004fe8:	40020400 	.word	0x40020400
 8004fec:	bffdfff8 	.word	0xbffdfff8

08004ff0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff0:	680b      	ldr	r3, [r1, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8192 	beq.w	800531c <HAL_GPIO_Init+0x32c>
{
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8005000:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8005002:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005006:	f04f 0b01 	mov.w	fp, #1
 800500a:	f000 8107 	beq.w	800521c <HAL_GPIO_Init+0x22c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500e:	f8df e334 	ldr.w	lr, [pc, #820]	@ 8005344 <HAL_GPIO_Init+0x354>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005012:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8005014:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005016:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 800501a:	ea1c 0a03 	ands.w	sl, ip, r3
 800501e:	d072      	beq.n	8005106 <HAL_GPIO_Init+0x116>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005020:	684d      	ldr	r5, [r1, #4]
 8005022:	f005 0703 	and.w	r7, r5, #3
 8005026:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005028:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800502a:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800502e:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005032:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005036:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800503a:	f240 8113 	bls.w	8005264 <HAL_GPIO_Init+0x274>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800503e:	2f03      	cmp	r7, #3
 8005040:	f040 816d 	bne.w	800531e <HAL_GPIO_Init+0x32e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005044:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8005048:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800504a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800504c:	4334      	orrs	r4, r6
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800504e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005052:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005054:	d057      	beq.n	8005106 <HAL_GPIO_Init+0x116>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	4eb8      	ldr	r6, [pc, #736]	@ (8005338 <HAL_GPIO_Init+0x348>)
 8005058:	69b4      	ldr	r4, [r6, #24]
 800505a:	f044 0401 	orr.w	r4, r4, #1
 800505e:	61b4      	str	r4, [r6, #24]
 8005060:	69b4      	ldr	r4, [r6, #24]
 8005062:	f004 0401 	and.w	r4, r4, #1
 8005066:	9403      	str	r4, [sp, #12]
 8005068:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800506a:	f022 0403 	bic.w	r4, r2, #3
 800506e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005072:	f002 0703 	and.w	r7, r2, #3
 8005076:	230f      	movs	r3, #15
 8005078:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 800507c:	00bf      	lsls	r7, r7, #2
 800507e:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005082:	4bae      	ldr	r3, [pc, #696]	@ (800533c <HAL_GPIO_Init+0x34c>)
        temp = SYSCFG->EXTICR[position >> 2u];
 8005084:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005086:	4298      	cmp	r0, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005088:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800508c:	f000 813a 	beq.w	8005304 <HAL_GPIO_Init+0x314>
 8005090:	4bab      	ldr	r3, [pc, #684]	@ (8005340 <HAL_GPIO_Init+0x350>)
 8005092:	4298      	cmp	r0, r3
 8005094:	f000 8127 	beq.w	80052e6 <HAL_GPIO_Init+0x2f6>
 8005098:	f8df c2ac 	ldr.w	ip, [pc, #684]	@ 8005348 <HAL_GPIO_Init+0x358>
 800509c:	4560      	cmp	r0, ip
 800509e:	f000 8137 	beq.w	8005310 <HAL_GPIO_Init+0x320>
 80050a2:	f8df c2a8 	ldr.w	ip, [pc, #680]	@ 800534c <HAL_GPIO_Init+0x35c>
 80050a6:	4560      	cmp	r0, ip
 80050a8:	bf0c      	ite	eq
 80050aa:	f04f 0c04 	moveq.w	ip, #4
 80050ae:	f04f 0c05 	movne.w	ip, #5
 80050b2:	fa0c f707 	lsl.w	r7, ip, r7
 80050b6:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050b8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 80050ba:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80050be:	ea6f 060a 	mvn.w	r6, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050c2:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80050c4:	bf54      	ite	pl
 80050c6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050c8:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR = temp;
 80050cc:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 80050d0:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050d4:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80050d6:	bf54      	ite	pl
 80050d8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050da:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR = temp;
 80050de:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR;
 80050e2:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050e6:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 80050e8:	bf54      	ite	pl
 80050ea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050ec:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR = temp;
 80050f0:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050f4:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050f8:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 80050fa:	bf54      	ite	pl
 80050fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050fe:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR = temp;
 8005102:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005106:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8005108:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510a:	fa33 f402 	lsrs.w	r4, r3, r2
 800510e:	d181      	bne.n	8005014 <HAL_GPIO_Init+0x24>
  }
}
 8005110:	b005      	add	sp, #20
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005116:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800511a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800511c:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005120:	fa06 f807 	lsl.w	r8, r6, r7
 8005124:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005128:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800512c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005130:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005134:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8005138:	fa0e fe02 	lsl.w	lr, lr, r2
 800513c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005140:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005144:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005148:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800514a:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800514e:	fa06 fe07 	lsl.w	lr, r6, r7
 8005152:	ea4e 0e08 	orr.w	lr, lr, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005156:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8005158:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515c:	d119      	bne.n	8005192 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->AFR[position >> 3u];
 800515e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005162:	690e      	ldr	r6, [r1, #16]
 8005164:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005168:	f002 0807 	and.w	r8, r2, #7
 800516c:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8005170:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005174:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3u];
 8005178:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800517c:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800517e:	260f      	movs	r6, #15
 8005180:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005184:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005186:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800518a:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800518e:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005192:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8005194:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005196:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800519a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800519c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80051a0:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051a2:	d036      	beq.n	8005212 <HAL_GPIO_Init+0x222>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a4:	4f64      	ldr	r7, [pc, #400]	@ (8005338 <HAL_GPIO_Init+0x348>)
 80051a6:	69bc      	ldr	r4, [r7, #24]
 80051a8:	f044 0401 	orr.w	r4, r4, #1
 80051ac:	61bc      	str	r4, [r7, #24]
 80051ae:	69bc      	ldr	r4, [r7, #24]
 80051b0:	f004 0401 	and.w	r4, r4, #1
 80051b4:	9403      	str	r4, [sp, #12]
 80051b6:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80051b8:	f022 0403 	bic.w	r4, r2, #3
 80051bc:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80051c0:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051c4:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80051c8:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051cc:	260f      	movs	r6, #15
 80051ce:	00bf      	lsls	r7, r7, #2
 80051d0:	fa06 f707 	lsl.w	r7, r6, r7
 80051d4:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051d8:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR;
 80051da:	4c5a      	ldr	r4, [pc, #360]	@ (8005344 <HAL_GPIO_Init+0x354>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051dc:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR;
 80051de:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 80051e0:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051e4:	d47c      	bmi.n	80052e0 <HAL_GPIO_Init+0x2f0>
        temp &= ~(iocurrent);
 80051e6:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 80051e8:	4e56      	ldr	r6, [pc, #344]	@ (8005344 <HAL_GPIO_Init+0x354>)
 80051ea:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR;
 80051ec:	68f4      	ldr	r4, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051ee:	02ae      	lsls	r6, r5, #10
 80051f0:	f100 8085 	bmi.w	80052fe <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 80051f4:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 80051f6:	4e53      	ldr	r6, [pc, #332]	@ (8005344 <HAL_GPIO_Init+0x354>)
 80051f8:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR;
 80051fa:	6874      	ldr	r4, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051fc:	03ae      	lsls	r6, r5, #14
 80051fe:	d47b      	bmi.n	80052f8 <HAL_GPIO_Init+0x308>
        temp &= ~(iocurrent);
 8005200:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 8005202:	4e50      	ldr	r6, [pc, #320]	@ (8005344 <HAL_GPIO_Init+0x354>)
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005204:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8005206:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR;
 8005208:	6834      	ldr	r4, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800520a:	d472      	bmi.n	80052f2 <HAL_GPIO_Init+0x302>
        temp &= ~(iocurrent);
 800520c:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 800520e:	4d4d      	ldr	r5, [pc, #308]	@ (8005344 <HAL_GPIO_Init+0x354>)
 8005210:	602c      	str	r4, [r5, #0]
    position++;
 8005212:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005214:	fa33 f402 	lsrs.w	r4, r3, r2
 8005218:	f43f af7a 	beq.w	8005110 <HAL_GPIO_Init+0x120>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800521c:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8005220:	ea13 0c0e 	ands.w	ip, r3, lr
 8005224:	d0f5      	beq.n	8005212 <HAL_GPIO_Init+0x222>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005226:	684d      	ldr	r5, [r1, #4]
 8005228:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800522a:	2603      	movs	r6, #3
 800522c:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005230:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005234:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005238:	f104 38ff 	add.w	r8, r4, #4294967295
 800523c:	f1b8 0f01 	cmp.w	r8, #1
 8005240:	f67f af69 	bls.w	8005116 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005244:	2c03      	cmp	r4, #3
 8005246:	d0a4      	beq.n	8005192 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->PUPDR;
 8005248:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800524c:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 800524e:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005252:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005256:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800525a:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 800525e:	f8c8 e00c 	str.w	lr, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005262:	e796      	b.n	8005192 <HAL_GPIO_Init+0x1a2>
        temp = GPIOx->OSPEEDR;
 8005264:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005268:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800526a:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800526e:	fa03 f804 	lsl.w	r8, r3, r4
 8005272:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005276:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800527a:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800527e:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005280:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005284:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8005288:	fa0c fc02 	lsl.w	ip, ip, r2
 800528c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8005290:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8005294:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005298:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800529c:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052a0:	ea4c 0c08 	orr.w	ip, ip, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a4:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 80052a6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052aa:	f47f aecb 	bne.w	8005044 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052ae:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80052b0:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052b4:	f002 0c07 	and.w	ip, r2, #7
 80052b8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80052bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052c0:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3u];
 80052c4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052c8:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052ca:	230f      	movs	r3, #15
 80052cc:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052d0:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052d2:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052d6:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3u] = temp;
 80052da:	f8c8 c020 	str.w	ip, [r8, #32]
 80052de:	e6b1      	b.n	8005044 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80052e0:	ea44 040c 	orr.w	r4, r4, ip
 80052e4:	e780      	b.n	80051e8 <HAL_GPIO_Init+0x1f8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80052e6:	f04f 0c02 	mov.w	ip, #2
 80052ea:	fa0c f707 	lsl.w	r7, ip, r7
 80052ee:	433e      	orrs	r6, r7
 80052f0:	e6e2      	b.n	80050b8 <HAL_GPIO_Init+0xc8>
          temp |= iocurrent;
 80052f2:	ea4c 0404 	orr.w	r4, ip, r4
 80052f6:	e78a      	b.n	800520e <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 80052f8:	ea44 040c 	orr.w	r4, r4, ip
 80052fc:	e781      	b.n	8005202 <HAL_GPIO_Init+0x212>
          temp |= iocurrent;
 80052fe:	ea4c 0404 	orr.w	r4, ip, r4
 8005302:	e778      	b.n	80051f6 <HAL_GPIO_Init+0x206>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005304:	f04f 0c01 	mov.w	ip, #1
 8005308:	fa0c f707 	lsl.w	r7, ip, r7
 800530c:	433e      	orrs	r6, r7
 800530e:	e6d3      	b.n	80050b8 <HAL_GPIO_Init+0xc8>
 8005310:	f04f 0c03 	mov.w	ip, #3
 8005314:	fa0c f707 	lsl.w	r7, ip, r7
 8005318:	433e      	orrs	r6, r7
 800531a:	e6cd      	b.n	80050b8 <HAL_GPIO_Init+0xc8>
 800531c:	4770      	bx	lr
        temp = GPIOx->PUPDR;
 800531e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005322:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005324:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005328:	fa03 fc04 	lsl.w	ip, r3, r4
 800532c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8005330:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005334:	e686      	b.n	8005044 <HAL_GPIO_Init+0x54>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	48000400 	.word	0x48000400
 8005340:	48000800 	.word	0x48000800
 8005344:	40010400 	.word	0x40010400
 8005348:	48000c00 	.word	0x48000c00
 800534c:	48001000 	.word	0x48001000

08005350 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005350:	2800      	cmp	r0, #0
 8005352:	f000 82bb 	beq.w	80058cc <HAL_RCC_OscConfig+0x57c>
{
 8005356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535a:	6803      	ldr	r3, [r0, #0]
 800535c:	07d9      	lsls	r1, r3, #31
{
 800535e:	b083      	sub	sp, #12
 8005360:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005362:	d54b      	bpl.n	80053fc <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005364:	49ac      	ldr	r1, [pc, #688]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 8005366:	684a      	ldr	r2, [r1, #4]
 8005368:	f002 020c 	and.w	r2, r2, #12
 800536c:	2a04      	cmp	r2, #4
 800536e:	f000 815d 	beq.w	800562c <HAL_RCC_OscConfig+0x2dc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005372:	684a      	ldr	r2, [r1, #4]
 8005374:	f002 020c 	and.w	r2, r2, #12
 8005378:	2a08      	cmp	r2, #8
 800537a:	f000 8153 	beq.w	8005624 <HAL_RCC_OscConfig+0x2d4>
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800537e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005386:	d015      	beq.n	80053b4 <HAL_RCC_OscConfig+0x64>
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8189 	beq.w	80056a0 <HAL_RCC_OscConfig+0x350>
 800538e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005392:	f000 8236 	beq.w	8005802 <HAL_RCC_OscConfig+0x4b2>
 8005396:	4ba0      	ldr	r3, [pc, #640]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800539e:	6019      	str	r1, [r3, #0]
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80053a6:	6019      	str	r1, [r3, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053aa:	f021 010f 	bic.w	r1, r1, #15
 80053ae:	430a      	orrs	r2, r1
 80053b0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b2:	e009      	b.n	80053c8 <HAL_RCC_OscConfig+0x78>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	4998      	ldr	r1, [pc, #608]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 80053b6:	680b      	ldr	r3, [r1, #0]
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053bc:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053be:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	4313      	orrs	r3, r2
 80053c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fe fe5c 	bl	8004084 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053cc:	4f92      	ldr	r7, [pc, #584]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80053ce:	4605      	mov	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d4:	2601      	movs	r6, #1
 80053d6:	e005      	b.n	80053e4 <HAL_RCC_OscConfig+0x94>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fe fe54 	bl	8004084 <HAL_GetTick>
 80053dc:	1b40      	subs	r0, r0, r5
 80053de:	2864      	cmp	r0, #100	@ 0x64
 80053e0:	f200 815a 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 80053e4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	fa98 f3a8 	rbit	r3, r8
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	fa06 f303 	lsl.w	r3, r6, r3
 80053f6:	4213      	tst	r3, r2
 80053f8:	d0ee      	beq.n	80053d8 <HAL_RCC_OscConfig+0x88>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	079f      	lsls	r7, r3, #30
 80053fe:	d53f      	bpl.n	8005480 <HAL_RCC_OscConfig+0x130>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005400:	4a85      	ldr	r2, [pc, #532]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 8005402:	6851      	ldr	r1, [r2, #4]
 8005404:	f011 0f0c 	tst.w	r1, #12
 8005408:	f000 80cb 	beq.w	80055a2 <HAL_RCC_OscConfig+0x252>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800540c:	6851      	ldr	r1, [r2, #4]
 800540e:	f001 010c 	and.w	r1, r1, #12
 8005412:	2908      	cmp	r1, #8
 8005414:	f000 80c1 	beq.w	800559a <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	2a00      	cmp	r2, #0
 800541c:	f000 8194 	beq.w	8005748 <HAL_RCC_OscConfig+0x3f8>
 8005420:	2501      	movs	r5, #1
 8005422:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800542e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005432:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005434:	4f78      	ldr	r7, [pc, #480]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8005436:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8005438:	f7fe fe24 	bl	8004084 <HAL_GetTick>
 800543c:	f04f 0802 	mov.w	r8, #2
 8005440:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	e005      	b.n	8005450 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005444:	f7fe fe1e 	bl	8004084 <HAL_GetTick>
 8005448:	1b80      	subs	r0, r0, r6
 800544a:	2802      	cmp	r0, #2
 800544c:	f200 8124 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 8005450:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	fa98 f3a8 	rbit	r3, r8
 800545a:	fab3 f383 	clz	r3, r3
 800545e:	fa05 f303 	lsl.w	r3, r5, r3
 8005462:	4213      	tst	r3, r2
 8005464:	d0ee      	beq.n	8005444 <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	22f8      	movs	r2, #248	@ 0xf8
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	6963      	ldr	r3, [r4, #20]
 8005470:	fab2 f282 	clz	r2, r2
 8005474:	4093      	lsls	r3, r2
 8005476:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 800547a:	4313      	orrs	r3, r2
 800547c:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	071d      	lsls	r5, r3, #28
 8005482:	d429      	bmi.n	80054d8 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005484:	0758      	lsls	r0, r3, #29
 8005486:	d553      	bpl.n	8005530 <HAL_RCC_OscConfig+0x1e0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005488:	4b63      	ldr	r3, [pc, #396]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	00d1      	lsls	r1, r2, #3
 800548e:	f100 80c1 	bmi.w	8005614 <HAL_RCC_OscConfig+0x2c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005498:	61da      	str	r2, [r3, #28]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80054a4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	4e5d      	ldr	r6, [pc, #372]	@ (800561c <HAL_RCC_OscConfig+0x2cc>)
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	05da      	lsls	r2, r3, #23
 80054ac:	f140 80e4 	bpl.w	8005678 <HAL_RCC_OscConfig+0x328>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b0:	68e3      	ldr	r3, [r4, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	f000 816c 	beq.w	8005790 <HAL_RCC_OscConfig+0x440>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8117 	beq.w	80056ec <HAL_RCC_OscConfig+0x39c>
 80054be:	2b05      	cmp	r3, #5
 80054c0:	4b55      	ldr	r3, [pc, #340]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	f000 81a9 	beq.w	800581a <HAL_RCC_OscConfig+0x4ca>
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	621a      	str	r2, [r3, #32]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	f022 0204 	bic.w	r2, r2, #4
 80054d4:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d6:	e160      	b.n	800579a <HAL_RCC_OscConfig+0x44a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054d8:	69a2      	ldr	r2, [r4, #24]
 80054da:	2a00      	cmp	r2, #0
 80054dc:	d074      	beq.n	80055c8 <HAL_RCC_OscConfig+0x278>
 80054de:	2601      	movs	r6, #1
 80054e0:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 80054e4:	4b4e      	ldr	r3, [pc, #312]	@ (8005620 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8005618 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_ENABLE();
 80054ea:	fab2 f282 	clz	r2, r2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	2502      	movs	r5, #2
 80054f4:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 80054f6:	f7fe fdc5 	bl	8004084 <HAL_GetTick>
 80054fa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fc:	e005      	b.n	800550a <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fe:	f7fe fdc1 	bl	8004084 <HAL_GetTick>
 8005502:	1bc0      	subs	r0, r0, r7
 8005504:	2802      	cmp	r0, #2
 8005506:	f200 80c7 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 800550a:	fa95 f3a5 	rbit	r3, r5
 800550e:	fa95 f3a5 	rbit	r3, r5
 8005512:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005516:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800551a:	fa95 f3a5 	rbit	r3, r5
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	fa06 f303 	lsl.w	r3, r6, r3
 8005526:	4213      	tst	r3, r2
 8005528:	d0e9      	beq.n	80054fe <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	0758      	lsls	r0, r3, #29
 800552e:	d4ab      	bmi.n	8005488 <HAL_RCC_OscConfig+0x138>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005530:	69e3      	ldr	r3, [r4, #28]
 8005532:	b373      	cbz	r3, 8005592 <HAL_RCC_OscConfig+0x242>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005534:	4d38      	ldr	r5, [pc, #224]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 8005536:	686a      	ldr	r2, [r5, #4]
 8005538:	f002 020c 	and.w	r2, r2, #12
 800553c:	2a08      	cmp	r2, #8
 800553e:	f000 814f 	beq.w	80057e0 <HAL_RCC_OscConfig+0x490>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005542:	2b02      	cmp	r3, #2
 8005544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005548:	f000 816f 	beq.w	800582a <HAL_RCC_OscConfig+0x4da>
 800554c:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005558:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fe fd8f 	bl	8004084 <HAL_GetTick>
 8005566:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 800556a:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800556c:	2601      	movs	r6, #1
 800556e:	e005      	b.n	800557c <HAL_RCC_OscConfig+0x22c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005570:	f7fe fd88 	bl	8004084 <HAL_GetTick>
 8005574:	1b00      	subs	r0, r0, r4
 8005576:	2802      	cmp	r0, #2
 8005578:	f200 808e 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 800557c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005580:	682a      	ldr	r2, [r5, #0]
 8005582:	fa97 f3a7 	rbit	r3, r7
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	fa06 f303 	lsl.w	r3, r6, r3
 800558e:	4213      	tst	r3, r2
 8005590:	d1ee      	bne.n	8005570 <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }

  return HAL_OK;
 8005592:	2000      	movs	r0, #0
}
 8005594:	b003      	add	sp, #12
 8005596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800559a:	6852      	ldr	r2, [r2, #4]
 800559c:	03d6      	lsls	r6, r2, #15
 800559e:	f53f af3b 	bmi.w	8005418 <HAL_RCC_OscConfig+0xc8>
 80055a2:	2202      	movs	r2, #2
 80055a4:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a8:	491b      	ldr	r1, [pc, #108]	@ (8005618 <HAL_RCC_OscConfig+0x2c8>)
 80055aa:	6808      	ldr	r0, [r1, #0]
 80055ac:	fa92 f2a2 	rbit	r2, r2
 80055b0:	2101      	movs	r1, #1
 80055b2:	fab2 f282 	clz	r2, r2
 80055b6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ba:	4202      	tst	r2, r0
 80055bc:	d04b      	beq.n	8005656 <HAL_RCC_OscConfig+0x306>
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	428a      	cmp	r2, r1
 80055c2:	d048      	beq.n	8005656 <HAL_RCC_OscConfig+0x306>
    return HAL_ERROR;
 80055c4:	2001      	movs	r0, #1
 80055c6:	e7e5      	b.n	8005594 <HAL_RCC_OscConfig+0x244>
 80055c8:	2701      	movs	r7, #1
 80055ca:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 80055ce:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <HAL_RCC_OscConfig+0x2d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005618 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_DISABLE();
 80055d4:	fab1 f181 	clz	r1, r1
 80055d8:	440b      	add	r3, r1
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	2502      	movs	r5, #2
 80055de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80055e0:	f7fe fd50 	bl	8004084 <HAL_GetTick>
 80055e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e6:	e004      	b.n	80055f2 <HAL_RCC_OscConfig+0x2a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e8:	f7fe fd4c 	bl	8004084 <HAL_GetTick>
 80055ec:	1b80      	subs	r0, r0, r6
 80055ee:	2802      	cmp	r0, #2
 80055f0:	d852      	bhi.n	8005698 <HAL_RCC_OscConfig+0x348>
 80055f2:	fa95 f3a5 	rbit	r3, r5
 80055f6:	fa95 f3a5 	rbit	r3, r5
 80055fa:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fe:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8005602:	fa95 f3a5 	rbit	r3, r5
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	fa07 f303 	lsl.w	r3, r7, r3
 800560e:	4213      	tst	r3, r2
 8005610:	d1ea      	bne.n	80055e8 <HAL_RCC_OscConfig+0x298>
 8005612:	e78a      	b.n	800552a <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8005614:	2500      	movs	r5, #0
 8005616:	e746      	b.n	80054a6 <HAL_RCC_OscConfig+0x156>
 8005618:	40021000 	.word	0x40021000
 800561c:	40007000 	.word	0x40007000
 8005620:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	03d2      	lsls	r2, r2, #15
 8005628:	f57f aea9 	bpl.w	800537e <HAL_RCC_OscConfig+0x2e>
 800562c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005630:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	49a6      	ldr	r1, [pc, #664]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 8005636:	6808      	ldr	r0, [r1, #0]
 8005638:	fa92 f2a2 	rbit	r2, r2
 800563c:	2101      	movs	r1, #1
 800563e:	fab2 f282 	clz	r2, r2
 8005642:	fa01 f202 	lsl.w	r2, r1, r2
 8005646:	4202      	tst	r2, r0
 8005648:	f43f aed8 	beq.w	80053fc <HAL_RCC_OscConfig+0xac>
 800564c:	6862      	ldr	r2, [r4, #4]
 800564e:	2a00      	cmp	r2, #0
 8005650:	f47f aed4 	bne.w	80053fc <HAL_RCC_OscConfig+0xac>
 8005654:	e7b6      	b.n	80055c4 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4d9e      	ldr	r5, [pc, #632]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 8005658:	21f8      	movs	r1, #248	@ 0xf8
 800565a:	6828      	ldr	r0, [r5, #0]
 800565c:	fa91 f1a1 	rbit	r1, r1
 8005660:	6962      	ldr	r2, [r4, #20]
 8005662:	fab1 f181 	clz	r1, r1
 8005666:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 800566a:	408a      	lsls	r2, r1
 800566c:	4302      	orrs	r2, r0
 800566e:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005670:	071d      	lsls	r5, r3, #28
 8005672:	f57f af07 	bpl.w	8005484 <HAL_RCC_OscConfig+0x134>
 8005676:	e72f      	b.n	80054d8 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005680:	f7fe fd00 	bl	8004084 <HAL_GetTick>
 8005684:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	6833      	ldr	r3, [r6, #0]
 8005688:	05db      	lsls	r3, r3, #23
 800568a:	f53f af11 	bmi.w	80054b0 <HAL_RCC_OscConfig+0x160>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7fe fcf9 	bl	8004084 <HAL_GetTick>
 8005692:	1bc0      	subs	r0, r0, r7
 8005694:	2864      	cmp	r0, #100	@ 0x64
 8005696:	d9f6      	bls.n	8005686 <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
 8005698:	2003      	movs	r0, #3
}
 800569a:	b003      	add	sp, #12
 800569c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a0:	4d8b      	ldr	r5, [pc, #556]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056b0:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80056b4:	f023 030f 	bic.w	r3, r3, #15
 80056b8:	4313      	orrs	r3, r2
 80056ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 80056bc:	f7fe fce2 	bl	8004084 <HAL_GetTick>
 80056c0:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
 80056c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c6:	2701      	movs	r7, #1
 80056c8:	e004      	b.n	80056d4 <HAL_RCC_OscConfig+0x384>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ca:	f7fe fcdb 	bl	8004084 <HAL_GetTick>
 80056ce:	1b80      	subs	r0, r0, r6
 80056d0:	2864      	cmp	r0, #100	@ 0x64
 80056d2:	d8e1      	bhi.n	8005698 <HAL_RCC_OscConfig+0x348>
 80056d4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d8:	682a      	ldr	r2, [r5, #0]
 80056da:	fa98 f3a8 	rbit	r3, r8
 80056de:	fab3 f383 	clz	r3, r3
 80056e2:	fa07 f303 	lsl.w	r3, r7, r3
 80056e6:	4213      	tst	r3, r2
 80056e8:	d1ef      	bne.n	80056ca <HAL_RCC_OscConfig+0x37a>
 80056ea:	e686      	b.n	80053fa <HAL_RCC_OscConfig+0xaa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ec:	4e78      	ldr	r6, [pc, #480]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 80056ee:	6a33      	ldr	r3, [r6, #32]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	6233      	str	r3, [r6, #32]
 80056f6:	6a33      	ldr	r3, [r6, #32]
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80056fe:	f7fe fcc1 	bl	8004084 <HAL_GetTick>
 8005702:	f04f 0902 	mov.w	r9, #2
 8005706:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005708:	f04f 0801 	mov.w	r8, #1
 800570c:	e006      	b.n	800571c <HAL_RCC_OscConfig+0x3cc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fe fcb9 	bl	8004084 <HAL_GetTick>
 8005712:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005716:	1bc0      	subs	r0, r0, r7
 8005718:	4298      	cmp	r0, r3
 800571a:	d8bd      	bhi.n	8005698 <HAL_RCC_OscConfig+0x348>
 800571c:	fa99 f3a9 	rbit	r3, r9
 8005720:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005724:	6a32      	ldr	r2, [r6, #32]
 8005726:	fa99 f3a9 	rbit	r3, r9
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	fa08 f303 	lsl.w	r3, r8, r3
 8005732:	4213      	tst	r3, r2
 8005734:	d1eb      	bne.n	800570e <HAL_RCC_OscConfig+0x3be>
    if(pwrclkchanged == SET)
 8005736:	2d00      	cmp	r5, #0
 8005738:	f43f aefa 	beq.w	8005530 <HAL_RCC_OscConfig+0x1e0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800573c:	4a64      	ldr	r2, [pc, #400]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 800573e:	69d3      	ldr	r3, [r2, #28]
 8005740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005744:	61d3      	str	r3, [r2, #28]
 8005746:	e6f3      	b.n	8005530 <HAL_RCC_OscConfig+0x1e0>
 8005748:	2601      	movs	r6, #1
 800574a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005756:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800575a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575c:	4f5c      	ldr	r7, [pc, #368]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
        __HAL_RCC_HSI_DISABLE();
 800575e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005760:	f7fe fc90 	bl	8004084 <HAL_GetTick>
 8005764:	f04f 0802 	mov.w	r8, #2
 8005768:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576a:	e004      	b.n	8005776 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576c:	f7fe fc8a 	bl	8004084 <HAL_GetTick>
 8005770:	1b40      	subs	r0, r0, r5
 8005772:	2802      	cmp	r0, #2
 8005774:	d890      	bhi.n	8005698 <HAL_RCC_OscConfig+0x348>
 8005776:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	fa98 f3a8 	rbit	r3, r8
 8005780:	fab3 f383 	clz	r3, r3
 8005784:	fa06 f303 	lsl.w	r3, r6, r3
 8005788:	4213      	tst	r3, r2
 800578a:	d1ef      	bne.n	800576c <HAL_RCC_OscConfig+0x41c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	e677      	b.n	8005480 <HAL_RCC_OscConfig+0x130>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005790:	4a4f      	ldr	r2, [pc, #316]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
 8005792:	6a13      	ldr	r3, [r2, #32]
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800579a:	f7fe fc73 	bl	8004084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 80058d0 <HAL_RCC_OscConfig+0x580>
      tickstart = HAL_GetTick();
 80057a2:	4606      	mov	r6, r0
 80057a4:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	2701      	movs	r7, #1
 80057aa:	e007      	b.n	80057bc <HAL_RCC_OscConfig+0x46c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fe fc6a 	bl	8004084 <HAL_GetTick>
 80057b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	4298      	cmp	r0, r3
 80057b8:	f63f af6e 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 80057bc:	fa99 f3a9 	rbit	r3, r9
 80057c0:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80057c8:	fa99 f3a9 	rbit	r3, r9
 80057cc:	fab3 f383 	clz	r3, r3
 80057d0:	fa07 f303 	lsl.w	r3, r7, r3
 80057d4:	4213      	tst	r3, r2
 80057d6:	d0e9      	beq.n	80057ac <HAL_RCC_OscConfig+0x45c>
    if(pwrclkchanged == SET)
 80057d8:	2d00      	cmp	r5, #0
 80057da:	f43f aea9 	beq.w	8005530 <HAL_RCC_OscConfig+0x1e0>
 80057de:	e7ad      	b.n	800573c <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	f43f aeef 	beq.w	80055c4 <HAL_RCC_OscConfig+0x274>
        pll_config = RCC->CFGR;
 80057e6:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057e8:	6a22      	ldr	r2, [r4, #32]
 80057ea:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80057ee:	4291      	cmp	r1, r2
 80057f0:	f47f aee8 	bne.w	80055c4 <HAL_RCC_OscConfig+0x274>
 80057f4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057f6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057fa:	1a18      	subs	r0, r3, r0
 80057fc:	bf18      	it	ne
 80057fe:	2001      	movne	r0, #1
 8005800:	e6c8      	b.n	8005594 <HAL_RCC_OscConfig+0x244>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005806:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8005810:	6019      	str	r1, [r3, #0]
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005818:	e5c5      	b.n	80053a6 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581a:	f042 0204 	orr.w	r2, r2, #4
 800581e:	621a      	str	r2, [r3, #32]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005828:	e7b7      	b.n	800579a <HAL_RCC_OscConfig+0x44a>
 800582a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005836:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005840:	f7fe fc20 	bl	8004084 <HAL_GetTick>
 8005844:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8005848:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584a:	2701      	movs	r7, #1
 800584c:	e005      	b.n	800585a <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584e:	f7fe fc19 	bl	8004084 <HAL_GetTick>
 8005852:	1b80      	subs	r0, r0, r6
 8005854:	2802      	cmp	r0, #2
 8005856:	f63f af1f 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 800585a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800585e:	682a      	ldr	r2, [r5, #0]
 8005860:	fa98 f3a8 	rbit	r3, r8
 8005864:	fab3 f383 	clz	r3, r3
 8005868:	fa07 f303 	lsl.w	r3, r7, r3
 800586c:	4213      	tst	r3, r2
 800586e:	d1ee      	bne.n	800584e <HAL_RCC_OscConfig+0x4fe>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005870:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8005874:	686a      	ldr	r2, [r5, #4]
 8005876:	430b      	orrs	r3, r1
 8005878:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800587c:	4313      	orrs	r3, r2
 800587e:	606b      	str	r3, [r5, #4]
 8005880:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005884:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005888:	fab3 f383 	clz	r3, r3
 800588c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005890:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005894:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005896:	4e0e      	ldr	r6, [pc, #56]	@ (80058d0 <HAL_RCC_OscConfig+0x580>)
        __HAL_RCC_PLL_ENABLE();
 8005898:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800589a:	f7fe fbf3 	bl	8004084 <HAL_GetTick>
 800589e:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 80058a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058a4:	2501      	movs	r5, #1
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fe fbec 	bl	8004084 <HAL_GetTick>
 80058ac:	1b00      	subs	r0, r0, r4
 80058ae:	2802      	cmp	r0, #2
 80058b0:	f63f aef2 	bhi.w	8005698 <HAL_RCC_OscConfig+0x348>
 80058b4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	fa97 f3a7 	rbit	r3, r7
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	fa05 f303 	lsl.w	r3, r5, r3
 80058c6:	4213      	tst	r3, r2
 80058c8:	d0ee      	beq.n	80058a8 <HAL_RCC_OscConfig+0x558>
 80058ca:	e662      	b.n	8005592 <HAL_RCC_OscConfig+0x242>
    return HAL_ERROR;
 80058cc:	2001      	movs	r0, #1
}
 80058ce:	4770      	bx	lr
 80058d0:	40021000 	.word	0x40021000

080058d4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f000 80a3 	beq.w	8005a20 <HAL_RCC_ClockConfig+0x14c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058da:	4a5d      	ldr	r2, [pc, #372]	@ (8005a50 <HAL_RCC_ClockConfig+0x17c>)
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	428b      	cmp	r3, r1
{
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	460d      	mov	r5, r1
 80058ea:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	d20c      	bcs.n	8005908 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f8:	6813      	ldr	r3, [r2, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	428b      	cmp	r3, r1
 8005900:	d002      	beq.n	8005908 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005902:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	079f      	lsls	r7, r3, #30
 800590c:	d506      	bpl.n	800591c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590e:	4951      	ldr	r1, [pc, #324]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 8005910:	68a0      	ldr	r0, [r4, #8]
 8005912:	684a      	ldr	r2, [r1, #4]
 8005914:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005918:	4302      	orrs	r2, r0
 800591a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591c:	07de      	lsls	r6, r3, #31
 800591e:	d52c      	bpl.n	800597a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	2a01      	cmp	r2, #1
 8005924:	d07e      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x150>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005926:	2a02      	cmp	r2, #2
 8005928:	bf0c      	ite	eq
 800592a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 800592e:	2302      	movne	r3, #2
 8005930:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005934:	4947      	ldr	r1, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 8005936:	6808      	ldr	r0, [r1, #0]
 8005938:	fa93 f3a3 	rbit	r3, r3
 800593c:	2101      	movs	r1, #1
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	4203      	tst	r3, r0
 8005948:	d0db      	beq.n	8005902 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594a:	4e42      	ldr	r6, [pc, #264]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 800594c:	6873      	ldr	r3, [r6, #4]
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	4313      	orrs	r3, r2
 8005954:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005956:	f7fe fb95 	bl	8004084 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800595e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005960:	e004      	b.n	800596c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005962:	f7fe fb8f 	bl	8004084 <HAL_GetTick>
 8005966:	1bc0      	subs	r0, r0, r7
 8005968:	4540      	cmp	r0, r8
 800596a:	d86a      	bhi.n	8005a42 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596c:	6873      	ldr	r3, [r6, #4]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005978:	d1f3      	bne.n	8005962 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800597a:	4a35      	ldr	r2, [pc, #212]	@ (8005a50 <HAL_RCC_ClockConfig+0x17c>)
 800597c:	6813      	ldr	r3, [r2, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	42ab      	cmp	r3, r5
 8005984:	d909      	bls.n	800599a <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	f023 0307 	bic.w	r3, r3, #7
 800598c:	432b      	orrs	r3, r5
 800598e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	42ab      	cmp	r3, r5
 8005998:	d1b3      	bne.n	8005902 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	0758      	lsls	r0, r3, #29
 800599e:	d506      	bpl.n	80059ae <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	492c      	ldr	r1, [pc, #176]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 80059a2:	68e0      	ldr	r0, [r4, #12]
 80059a4:	684a      	ldr	r2, [r1, #4]
 80059a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059aa:	4302      	orrs	r2, r0
 80059ac:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	0719      	lsls	r1, r3, #28
 80059b0:	d507      	bpl.n	80059c2 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b2:	4a28      	ldr	r2, [pc, #160]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 80059b4:	6921      	ldr	r1, [r4, #16]
 80059b6:	6853      	ldr	r3, [r2, #4]
 80059b8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80059bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80059c0:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80059c2:	4b24      	ldr	r3, [pc, #144]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 80059c4:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c6:	f002 010c 	and.w	r1, r2, #12
 80059ca:	2908      	cmp	r1, #8
 80059cc:	d017      	beq.n	80059fe <HAL_RCC_ClockConfig+0x12a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059ce:	4922      	ldr	r1, [pc, #136]	@ (8005a58 <HAL_RCC_ClockConfig+0x184>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059d0:	4b20      	ldr	r3, [pc, #128]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 80059d2:	22f0      	movs	r2, #240	@ 0xf0
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	fa92 f2a2 	rbit	r2, r2
 80059da:	fab2 f282 	clz	r2, r2
 80059de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059e2:	4c1e      	ldr	r4, [pc, #120]	@ (8005a5c <HAL_RCC_ClockConfig+0x188>)
  HAL_InitTick (uwTickPrio);
 80059e4:	481e      	ldr	r0, [pc, #120]	@ (8005a60 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059e6:	40d3      	lsrs	r3, r2
 80059e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a64 <HAL_RCC_ClockConfig+0x190>)
 80059ea:	5ce3      	ldrb	r3, [r4, r3]
  HAL_InitTick (uwTickPrio);
 80059ec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059ee:	fa21 f303 	lsr.w	r3, r1, r3
 80059f2:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80059f4:	f7fe fb04 	bl	8004000 <HAL_InitTick>
  return HAL_OK;
 80059f8:	2000      	movs	r0, #0
}
 80059fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059fe:	f3c2 4083 	ubfx	r0, r2, #18, #4
 8005a02:	4c19      	ldr	r4, [pc, #100]	@ (8005a68 <HAL_RCC_ClockConfig+0x194>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005a04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a06:	5c23      	ldrb	r3, [r4, r0]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005a08:	03d2      	lsls	r2, r2, #15
 8005a0a:	d51c      	bpl.n	8005a46 <HAL_RCC_ClockConfig+0x172>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005a0c:	4817      	ldr	r0, [pc, #92]	@ (8005a6c <HAL_RCC_ClockConfig+0x198>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a0e:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <HAL_RCC_ClockConfig+0x184>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005a10:	f001 010f 	and.w	r1, r1, #15
 8005a14:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a16:	fbb2 f2f1 	udiv	r2, r2, r1
 8005a1a:	fb03 f102 	mul.w	r1, r3, r2
 8005a1e:	e7d7      	b.n	80059d0 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8005a20:	2001      	movs	r0, #1
}
 8005a22:	4770      	bx	lr
 8005a24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a28:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2c:	4909      	ldr	r1, [pc, #36]	@ (8005a54 <HAL_RCC_ClockConfig+0x180>)
 8005a2e:	6809      	ldr	r1, [r1, #0]
 8005a30:	fa93 f3a3 	rbit	r3, r3
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	420b      	tst	r3, r1
 8005a3e:	d184      	bne.n	800594a <HAL_RCC_ClockConfig+0x76>
 8005a40:	e75f      	b.n	8005902 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005a42:	2003      	movs	r0, #3
 8005a44:	e75e      	b.n	8005904 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a46:	490a      	ldr	r1, [pc, #40]	@ (8005a70 <HAL_RCC_ClockConfig+0x19c>)
 8005a48:	fb03 f101 	mul.w	r1, r3, r1
 8005a4c:	e7c0      	b.n	80059d0 <HAL_RCC_ClockConfig+0xfc>
 8005a4e:	bf00      	nop
 8005a50:	40022000 	.word	0x40022000
 8005a54:	40021000 	.word	0x40021000
 8005a58:	007a1200 	.word	0x007a1200
 8005a5c:	08007114 	.word	0x08007114
 8005a60:	200003e8 	.word	0x200003e8
 8005a64:	200003e0 	.word	0x200003e0
 8005a68:	08007134 	.word	0x08007134
 8005a6c:	08007124 	.word	0x08007124
 8005a70:	003d0900 	.word	0x003d0900

08005a74 <HAL_RCC_EnableCSS>:
 8005a74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a78:	fa93 f3a3 	rbit	r3, r3
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005a7c:	fab3 f383 	clz	r3, r3
 8005a80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005a84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005a90:	4a0e      	ldr	r2, [pc, #56]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005a92:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005a94:	f003 010c 	and.w	r1, r3, #12
 8005a98:	2908      	cmp	r1, #8
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8005a9c:	480c      	ldr	r0, [pc, #48]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x40>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005a9e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005aa0:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8005aa4:	480b      	ldr	r0, [pc, #44]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x44>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005aa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005aa8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005aaa:	03db      	lsls	r3, r3, #15
 8005aac:	d509      	bpl.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005aae:	490a      	ldr	r1, [pc, #40]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x48>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ab0:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x40>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005ab2:	f002 020f 	and.w	r2, r2, #15
 8005ab6:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005abc:	fb03 f000 	mul.w	r0, r3, r0
 8005ac0:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ac2:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x4c>)
 8005ac4:	fb03 f000 	mul.w	r0, r3, r0
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	007a1200 	.word	0x007a1200
 8005ad4:	08007134 	.word	0x08007134
 8005ad8:	08007124 	.word	0x08007124
 8005adc:	003d0900 	.word	0x003d0900

08005ae0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005ae0:	4b01      	ldr	r3, [pc, #4]	@ (8005ae8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	200003e0 	.word	0x200003e0

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005aec:	4b08      	ldr	r3, [pc, #32]	@ (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	fa92 f2a2 	rbit	r2, r2
 8005af8:	fab2 f282 	clz	r2, r2
 8005afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8005b02:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b04:	40d3      	lsrs	r3, r2
 8005b06:	6800      	ldr	r0, [r0, #0]
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
}    
 8005b0a:	40d8      	lsrs	r0, r3
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	0800710c 	.word	0x0800710c
 8005b18:	200003e0 	.word	0x200003e0

08005b1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b1c:	4b08      	ldr	r3, [pc, #32]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	fa92 f2a2 	rbit	r2, r2
 8005b28:	fab2 f282 	clz	r2, r2
 8005b2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005b30:	4904      	ldr	r1, [pc, #16]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8005b32:	4805      	ldr	r0, [pc, #20]	@ (8005b48 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b34:	40d3      	lsrs	r3, r2
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
} 
 8005b3a:	40d8      	lsrs	r0, r3
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	0800710c 	.word	0x0800710c
 8005b48:	200003e0 	.word	0x200003e0

08005b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b50:	6803      	ldr	r3, [r0, #0]
 8005b52:	03dd      	lsls	r5, r3, #15
{
 8005b54:	b083      	sub	sp, #12
 8005b56:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b58:	d540      	bpl.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	00d0      	lsls	r0, r2, #3
 8005b60:	f140 80b6 	bpl.w	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b64:	4d7b      	ldr	r5, [pc, #492]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8005b6a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6e:	f140 80bf 	bpl.w	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b72:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b76:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b78:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b7c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005b80:	d020      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b82:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d01c      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b8a:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8005b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b92:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8005b96:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b9a:	4f6f      	ldr	r7, [pc, #444]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005b9c:	fab2 f282 	clz	r2, r2
 8005ba0:	443a      	add	r2, r7
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	2501      	movs	r5, #1
 8005ba6:	6015      	str	r5, [r2, #0]
 8005ba8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bac:	fab3 f383 	clz	r3, r3
 8005bb0:	443b      	add	r3, r7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bb8:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8005bba:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bbe:	f100 80ab 	bmi.w	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005bc2:	6861      	ldr	r1, [r4, #4]
 8005bc4:	4a62      	ldr	r2, [pc, #392]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005bc6:	6a13      	ldr	r3, [r2, #32]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bd0:	b11e      	cbz	r6, 8005bda <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd2:	69d3      	ldr	r3, [r2, #28]
 8005bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	07df      	lsls	r7, r3, #31
 8005bde:	d506      	bpl.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be0:	495b      	ldr	r1, [pc, #364]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005be2:	68a0      	ldr	r0, [r4, #8]
 8005be4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005be6:	f022 0203 	bic.w	r2, r2, #3
 8005bea:	4302      	orrs	r2, r0
 8005bec:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bee:	079e      	lsls	r6, r3, #30
 8005bf0:	d506      	bpl.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf2:	4957      	ldr	r1, [pc, #348]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005bf4:	68e0      	ldr	r0, [r4, #12]
 8005bf6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005bf8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005bfc:	4302      	orrs	r2, r0
 8005bfe:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c00:	075d      	lsls	r5, r3, #29
 8005c02:	d506      	bpl.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c04:	4952      	ldr	r1, [pc, #328]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c06:	6920      	ldr	r0, [r4, #16]
 8005c08:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c0a:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005c0e:	4302      	orrs	r2, r0
 8005c10:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c12:	0698      	lsls	r0, r3, #26
 8005c14:	d506      	bpl.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c16:	494e      	ldr	r1, [pc, #312]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c18:	69e0      	ldr	r0, [r4, #28]
 8005c1a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c1c:	f022 0210 	bic.w	r2, r2, #16
 8005c20:	4302      	orrs	r2, r0
 8005c22:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c24:	0399      	lsls	r1, r3, #14
 8005c26:	d506      	bpl.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c28:	4949      	ldr	r1, [pc, #292]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005c2c:	684a      	ldr	r2, [r1, #4]
 8005c2e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8005c32:	4302      	orrs	r2, r0
 8005c34:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c36:	065a      	lsls	r2, r3, #25
 8005c38:	d506      	bpl.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c3a:	4945      	ldr	r1, [pc, #276]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c3c:	6a20      	ldr	r0, [r4, #32]
 8005c3e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c40:	f022 0220 	bic.w	r2, r2, #32
 8005c44:	4302      	orrs	r2, r0
 8005c46:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c48:	071f      	lsls	r7, r3, #28
 8005c4a:	d506      	bpl.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c4c:	4940      	ldr	r1, [pc, #256]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c4e:	6960      	ldr	r0, [r4, #20]
 8005c50:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c52:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005c56:	4302      	orrs	r2, r0
 8005c58:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c5a:	06de      	lsls	r6, r3, #27
 8005c5c:	d506      	bpl.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5e:	493c      	ldr	r1, [pc, #240]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c60:	69a0      	ldr	r0, [r4, #24]
 8005c62:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c64:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005c68:	4302      	orrs	r2, r0
 8005c6a:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c6c:	059d      	lsls	r5, r3, #22
 8005c6e:	d506      	bpl.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c70:	4937      	ldr	r1, [pc, #220]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c72:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005c74:	684a      	ldr	r2, [r1, #4]
 8005c76:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005c7a:	4302      	orrs	r2, r0
 8005c7c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c7e:	0618      	lsls	r0, r3, #24
 8005c80:	d506      	bpl.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c82:	4933      	ldr	r1, [pc, #204]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c84:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005c86:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005c88:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005c8c:	4302      	orrs	r2, r0
 8005c8e:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005c90:	05d9      	lsls	r1, r3, #23
 8005c92:	d506      	bpl.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c94:	492e      	ldr	r1, [pc, #184]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005c96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005c98:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005c9a:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8005c9e:	4302      	orrs	r2, r0
 8005ca0:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ca2:	04da      	lsls	r2, r3, #19
 8005ca4:	d506      	bpl.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ca6:	492a      	ldr	r1, [pc, #168]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005ca8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005caa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cb0:	4302      	orrs	r2, r0
 8005cb2:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005cb4:	049b      	lsls	r3, r3, #18
 8005cb6:	d403      	bmi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005cb8:	2000      	movs	r0, #0
}
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005cc0:	4a23      	ldr	r2, [pc, #140]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005cc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cc4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005cc6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cce:	e7f3      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4d20      	ldr	r5, [pc, #128]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005cd8:	61da      	str	r2, [r3, #28]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8005ce8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	f53f af41 	bmi.w	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005cf8:	f7fe f9c4 	bl	8004084 <HAL_GetTick>
 8005cfc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	05da      	lsls	r2, r3, #23
 8005d02:	f53f af36 	bmi.w	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d06:	f7fe f9bd 	bl	8004084 <HAL_GetTick>
 8005d0a:	1bc0      	subs	r0, r0, r7
 8005d0c:	2864      	cmp	r0, #100	@ 0x64
 8005d0e:	d9f6      	bls.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
          return HAL_TIMEOUT;
 8005d10:	2003      	movs	r0, #3
}
 8005d12:	b003      	add	sp, #12
 8005d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8005d18:	f7fe f9b4 	bl	8004084 <HAL_GetTick>
 8005d1c:	f04f 0902 	mov.w	r9, #2
 8005d20:	4607      	mov	r7, r0
 8005d22:	fa99 f3a9 	rbit	r3, r9
 8005d26:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005d2e:	fa99 f3a9 	rbit	r3, r9
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	fa05 f303 	lsl.w	r3, r5, r3
 8005d3a:	4213      	tst	r3, r2
 8005d3c:	f47f af41 	bne.w	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d40:	f7fe f9a0 	bl	8004084 <HAL_GetTick>
 8005d44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d48:	1bc0      	subs	r0, r0, r7
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	d9e9      	bls.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8005d4e:	e7df      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
 8005d58:	10908100 	.word	0x10908100

08005d5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	6a02      	ldr	r2, [r0, #32]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
{
 8005d64:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d72:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005d76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005d7e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d80:	4d13      	ldr	r5, [pc, #76]	@ (8005dd0 <TIM_OC1_SetConfig+0x74>)
 8005d82:	42a8      	cmp	r0, r5
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC1_SetConfig+0x4a>
 8005d86:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005d8a:	42a8      	cmp	r0, r5
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC1_SetConfig+0x4a>
 8005d8e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005d92:	42a8      	cmp	r0, r5
 8005d94:	d007      	beq.n	8005da6 <TIM_OC1_SetConfig+0x4a>
 8005d96:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005d9a:	42a8      	cmp	r0, r5
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC1_SetConfig+0x4a>
 8005d9e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005da2:	42a8      	cmp	r0, r5
 8005da4:	d10d      	bne.n	8005dc2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005da6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005da8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005dac:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dae:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dba:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dbe:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005dc4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005dc6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005dc8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8005dca:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8005dcc:	6203      	str	r3, [r0, #32]
}
 8005dce:	4770      	bx	lr
 8005dd0:	40012c00 	.word	0x40012c00

08005dd4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd6:	6a02      	ldr	r2, [r0, #32]
 8005dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8005ddc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dde:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005dea:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005dee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005df0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005df2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005df6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dfa:	4d14      	ldr	r5, [pc, #80]	@ (8005e4c <TIM_OC3_SetConfig+0x78>)
 8005dfc:	42a8      	cmp	r0, r5
 8005dfe:	d00f      	beq.n	8005e20 <TIM_OC3_SetConfig+0x4c>
 8005e00:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005e04:	42a8      	cmp	r0, r5
 8005e06:	d00b      	beq.n	8005e20 <TIM_OC3_SetConfig+0x4c>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e08:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005e0c:	42a8      	cmp	r0, r5
 8005e0e:	d00e      	beq.n	8005e2e <TIM_OC3_SetConfig+0x5a>
 8005e10:	4d0f      	ldr	r5, [pc, #60]	@ (8005e50 <TIM_OC3_SetConfig+0x7c>)
 8005e12:	42a8      	cmp	r0, r5
 8005e14:	d00b      	beq.n	8005e2e <TIM_OC3_SetConfig+0x5a>
 8005e16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005e1a:	42a8      	cmp	r0, r5
 8005e1c:	d10f      	bne.n	8005e3e <TIM_OC3_SetConfig+0x6a>
 8005e1e:	e006      	b.n	8005e2e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e20:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e32:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e36:	ea46 0c05 	orr.w	ip, r6, r5
 8005e3a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e3e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005e42:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005e44:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005e46:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005e48:	6203      	str	r3, [r0, #32]
}
 8005e4a:	4770      	bx	lr
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40014400 	.word	0x40014400

08005e54 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d075      	beq.n	8005f44 <HAL_TIM_Base_Init+0xf0>
{
 8005e58:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005e5e:	4604      	mov	r4, r0
 8005e60:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d068      	beq.n	8005f3a <HAL_TIM_Base_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6a:	4e37      	ldr	r6, [pc, #220]	@ (8005f48 <HAL_TIM_Base_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	2202      	movs	r2, #2
 8005e74:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005e7a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	d04c      	beq.n	8005f18 <HAL_TIM_Base_Init+0xc4>
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d017      	beq.n	8005eb4 <HAL_TIM_Base_Init+0x60>
 8005e84:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005e88:	42b3      	cmp	r3, r6
 8005e8a:	d013      	beq.n	8005eb4 <HAL_TIM_Base_Init+0x60>
 8005e8c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005e90:	42b3      	cmp	r3, r6
 8005e92:	d00f      	beq.n	8005eb4 <HAL_TIM_Base_Init+0x60>
 8005e94:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005e98:	42b3      	cmp	r3, r6
 8005e9a:	d03d      	beq.n	8005f18 <HAL_TIM_Base_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9c:	4e2b      	ldr	r6, [pc, #172]	@ (8005f4c <HAL_TIM_Base_Init+0xf8>)
 8005e9e:	42b3      	cmp	r3, r6
 8005ea0:	d03e      	beq.n	8005f20 <HAL_TIM_Base_Init+0xcc>
 8005ea2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005ea6:	42b3      	cmp	r3, r6
 8005ea8:	d03a      	beq.n	8005f20 <HAL_TIM_Base_Init+0xcc>
 8005eaa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005eae:	42b3      	cmp	r3, r6
 8005eb0:	d108      	bne.n	8005ec4 <HAL_TIM_Base_Init+0x70>
 8005eb2:	e035      	b.n	8005f20 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8005eb4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005eba:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ebc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005eca:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ece:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	07d2      	lsls	r2, r2, #31
 8005ed8:	d503      	bpl.n	8005ee2 <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005eec:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005ef0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005ef4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005f04:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005f08:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005f0c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005f10:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005f14:	2000      	movs	r0, #0
}
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8005f18:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f1e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f20:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f26:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f2c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005f2e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f30:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f32:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005f34:	6962      	ldr	r2, [r4, #20]
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f38:	e7ca      	b.n	8005ed0 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005f3e:	f7fd f8fd 	bl	800313c <HAL_TIM_Base_MspInit>
 8005f42:	e791      	b.n	8005e68 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8005f44:	2001      	movs	r0, #1
}
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000

08005f50 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop

08005f54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d075      	beq.n	8006044 <HAL_TIM_PWM_Init+0xf0>
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f5e:	4604      	mov	r4, r0
 8005f60:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d068      	beq.n	800603a <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f68:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f6a:	4e37      	ldr	r6, [pc, #220]	@ (8006048 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f70:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005f72:	2202      	movs	r2, #2
 8005f74:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005f7a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	d04c      	beq.n	8006018 <HAL_TIM_PWM_Init+0xc4>
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d017      	beq.n	8005fb4 <HAL_TIM_PWM_Init+0x60>
 8005f84:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005f88:	42b3      	cmp	r3, r6
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIM_PWM_Init+0x60>
 8005f8c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f90:	42b3      	cmp	r3, r6
 8005f92:	d00f      	beq.n	8005fb4 <HAL_TIM_PWM_Init+0x60>
 8005f94:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005f98:	42b3      	cmp	r3, r6
 8005f9a:	d03d      	beq.n	8006018 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9c:	4e2b      	ldr	r6, [pc, #172]	@ (800604c <HAL_TIM_PWM_Init+0xf8>)
 8005f9e:	42b3      	cmp	r3, r6
 8005fa0:	d03e      	beq.n	8006020 <HAL_TIM_PWM_Init+0xcc>
 8005fa2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005fa6:	42b3      	cmp	r3, r6
 8005fa8:	d03a      	beq.n	8006020 <HAL_TIM_PWM_Init+0xcc>
 8005faa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005fae:	42b3      	cmp	r3, r6
 8005fb0:	d108      	bne.n	8005fc4 <HAL_TIM_PWM_Init+0x70>
 8005fb2:	e035      	b.n	8006020 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8005fb4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fba:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fbe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fc2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fc8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005fca:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fcc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fce:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	07d2      	lsls	r2, r2, #31
 8005fd8:	d503      	bpl.n	8005fe2 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005fec:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005ff0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005ff4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006004:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006008:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800600c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006010:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006014:	2000      	movs	r0, #0
}
 8006016:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006018:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800601e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006020:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006022:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800602c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800602e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006032:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006034:	6962      	ldr	r2, [r4, #20]
 8006036:	631a      	str	r2, [r3, #48]	@ 0x30
 8006038:	e7ca      	b.n	8005fd0 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 800603a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800603e:	f7ff ff87 	bl	8005f50 <HAL_TIM_PWM_MspInit>
 8006042:	e791      	b.n	8005f68 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8006044:	2001      	movs	r0, #1
}
 8006046:	4770      	bx	lr
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40014000 	.word	0x40014000

08006050 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006050:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006054:	2a01      	cmp	r2, #1
 8006056:	d06c      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xe2>
 8006058:	4603      	mov	r3, r0
{
 800605a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800605c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800605e:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8006060:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006066:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800606a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	4c4c      	ldr	r4, [pc, #304]	@ (80061a0 <HAL_TIM_ConfigClockSource+0x150>)
 800606e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006070:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006072:	680c      	ldr	r4, [r1, #0]
 8006074:	2c60      	cmp	r4, #96	@ 0x60
 8006076:	d076      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x116>
 8006078:	d811      	bhi.n	800609e <HAL_TIM_ConfigClockSource+0x4e>
 800607a:	2c40      	cmp	r4, #64	@ 0x40
 800607c:	d05b      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xe6>
 800607e:	d82e      	bhi.n	80060de <HAL_TIM_ConfigClockSource+0x8e>
 8006080:	2c20      	cmp	r4, #32
 8006082:	d004      	beq.n	800608e <HAL_TIM_ConfigClockSource+0x3e>
 8006084:	f200 8088 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x148>
 8006088:	f034 0110 	bics.w	r1, r4, #16
 800608c:	d11f      	bne.n	80060ce <HAL_TIM_ConfigClockSource+0x7e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800608e:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006090:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006094:	4321      	orrs	r1, r4
 8006096:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609a:	6091      	str	r1, [r2, #8]
}
 800609c:	e016      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 800609e:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80060a2:	d013      	beq.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
 80060a4:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80060a8:	d033      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0xc2>
 80060aa:	2c70      	cmp	r4, #112	@ 0x70
 80060ac:	d10f      	bne.n	80060ce <HAL_TIM_ConfigClockSource+0x7e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ae:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80060b2:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060b4:	4328      	orrs	r0, r5
 80060b6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060bc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80060c0:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c2:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80060c4:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c6:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80060d0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80060da:	bc30      	pop	{r4, r5}
 80060dc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80060de:	2c50      	cmp	r4, #80	@ 0x50
 80060e0:	d1f5      	bne.n	80060ce <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 80060e2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80060e4:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80060e6:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80060ec:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	6a11      	ldr	r1, [r2, #32]
 80060f0:	f021 0101 	bic.w	r1, r1, #1
 80060f4:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f6:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f8:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060fc:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006100:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006102:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006104:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006106:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610a:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800610e:	6091      	str	r1, [r2, #8]
}
 8006110:	e7dc      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006112:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006116:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006118:	4328      	orrs	r0, r5
 800611a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006120:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006124:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006126:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006128:	6891      	ldr	r1, [r2, #8]
 800612a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800612e:	6091      	str	r1, [r2, #8]
      break;
 8006130:	e7cc      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 8006132:	2002      	movs	r0, #2
}
 8006134:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006136:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006138:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800613a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006140:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	6a11      	ldr	r1, [r2, #32]
 8006144:	f021 0101 	bic.w	r1, r1, #1
 8006148:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006150:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006154:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006156:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006158:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800615a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006162:	6091      	str	r1, [r2, #8]
}
 8006164:	e7b2      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
                               sClockSourceConfig->ClockPolarity,
 8006166:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006168:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800616a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616c:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006170:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006174:	6a10      	ldr	r0, [r2, #32]
 8006176:	f020 0010 	bic.w	r0, r0, #16
 800617a:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617c:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006188:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800618a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800618c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006190:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006194:	6091      	str	r1, [r2, #8]
}
 8006196:	e799      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8006198:	2c30      	cmp	r4, #48	@ 0x30
 800619a:	f43f af78 	beq.w	800608e <HAL_TIM_ConfigClockSource+0x3e>
 800619e:	e796      	b.n	80060ce <HAL_TIM_ConfigClockSource+0x7e>
 80061a0:	fffe0088 	.word	0xfffe0088

080061a4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80061a4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	6a02      	ldr	r2, [r0, #32]
 80061a8:	f022 0210 	bic.w	r2, r2, #16
{
 80061ac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ae:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80061b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80061b2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80061ba:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80061c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061cc:	4d14      	ldr	r5, [pc, #80]	@ (8006220 <TIM_OC2_SetConfig+0x7c>)
 80061ce:	42a8      	cmp	r0, r5
 80061d0:	d00f      	beq.n	80061f2 <TIM_OC2_SetConfig+0x4e>
 80061d2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80061d6:	42a8      	cmp	r0, r5
 80061d8:	d00b      	beq.n	80061f2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061da:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80061de:	42a8      	cmp	r0, r5
 80061e0:	d00e      	beq.n	8006200 <TIM_OC2_SetConfig+0x5c>
 80061e2:	4d10      	ldr	r5, [pc, #64]	@ (8006224 <TIM_OC2_SetConfig+0x80>)
 80061e4:	42a8      	cmp	r0, r5
 80061e6:	d00b      	beq.n	8006200 <TIM_OC2_SetConfig+0x5c>
 80061e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80061ec:	42a8      	cmp	r0, r5
 80061ee:	d10f      	bne.n	8006210 <TIM_OC2_SetConfig+0x6c>
 80061f0:	e006      	b.n	8006200 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80061fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006200:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006204:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006208:	ea46 0c05 	orr.w	ip, r6, r5
 800620c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006210:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006212:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006214:	6182      	str	r2, [r0, #24]
}
 8006216:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006218:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800621a:	6203      	str	r3, [r0, #32]
}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40014400 	.word	0x40014400

08006228 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006228:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	f000 8114 	beq.w	800645a <HAL_TIM_PWM_ConfigChannel+0x232>
 8006232:	2301      	movs	r3, #1
{
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800623a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800623e:	2a14      	cmp	r2, #20
 8006240:	d816      	bhi.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006242:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006246:	0059      	.short	0x0059
 8006248:	00150015 	.word	0x00150015
 800624c:	006d0015 	.word	0x006d0015
 8006250:	00150015 	.word	0x00150015
 8006254:	007e0015 	.word	0x007e0015
 8006258:	00150015 	.word	0x00150015
 800625c:	008e0015 	.word	0x008e0015
 8006260:	00150015 	.word	0x00150015
 8006264:	00cd0015 	.word	0x00cd0015
 8006268:	00150015 	.word	0x00150015
 800626c:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8006270:	2300      	movs	r3, #0
 8006272:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8006276:	2001      	movs	r0, #1
}
 8006278:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800627a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800627c:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 800627e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006280:	6a19      	ldr	r1, [r3, #32]
 8006282:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8006286:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006288:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800628a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800628c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8006290:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006298:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800629a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800629e:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	4e6f      	ldr	r6, [pc, #444]	@ (8006460 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80062a4:	42b3      	cmp	r3, r6
 80062a6:	d00f      	beq.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80062a8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80062ac:	42b3      	cmp	r3, r6
 80062ae:	d00b      	beq.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80062b0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80062b4:	42b3      	cmp	r3, r6
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80062b8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80062bc:	42b3      	cmp	r3, r6
 80062be:	d003      	beq.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80062c0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80062c4:	42b3      	cmp	r3, r6
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_PWM_ConfigChannel+0xaa>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062c8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062ca:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062ce:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80062d2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80062d4:	6559      	str	r1, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80062d6:	6869      	ldr	r1, [r5, #4]
 80062d8:	65d9      	str	r1, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 80062da:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062de:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ec:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062f6:	e00e      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0xee>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f7ff fd2f 	bl	8005d5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062fe:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006300:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006302:	f043 0308 	orr.w	r3, r3, #8
 8006306:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006308:	6983      	ldr	r3, [r0, #24]
 800630a:	f023 0304 	bic.w	r3, r3, #4
 800630e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006310:	6983      	ldr	r3, [r0, #24]
 8006312:	4313      	orrs	r3, r2
 8006314:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8006316:	2300      	movs	r3, #0
 8006318:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800631c:	2000      	movs	r0, #0
}
 800631e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006320:	6800      	ldr	r0, [r0, #0]
 8006322:	f7ff ff3f 	bl	80061a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006326:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006328:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800632a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800632e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006330:	6983      	ldr	r3, [r0, #24]
 8006332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006336:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	6983      	ldr	r3, [r0, #24]
 800633a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800633e:	6183      	str	r3, [r0, #24]
      break;
 8006340:	e7e9      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0xee>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006342:	6800      	ldr	r0, [r0, #0]
 8006344:	f7ff fd46 	bl	8005dd4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006348:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800634a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800634c:	f043 0308 	orr.w	r3, r3, #8
 8006350:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006352:	69c3      	ldr	r3, [r0, #28]
 8006354:	f023 0304 	bic.w	r3, r3, #4
 8006358:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800635a:	69c3      	ldr	r3, [r0, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	61c3      	str	r3, [r0, #28]
      break;
 8006360:	e7d9      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0xee>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006362:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006364:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8006366:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006368:	6a19      	ldr	r1, [r3, #32]
 800636a:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800636e:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006370:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006372:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006374:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8006378:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006380:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006386:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638a:	4e35      	ldr	r6, [pc, #212]	@ (8006460 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800638c:	42b3      	cmp	r3, r6
 800638e:	d00f      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x188>
 8006390:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006394:	42b3      	cmp	r3, r6
 8006396:	d00b      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x188>
 8006398:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 800639c:	42b3      	cmp	r3, r6
 800639e:	d007      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x188>
 80063a0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80063a4:	42b3      	cmp	r3, r6
 80063a6:	d003      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x188>
 80063a8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80063ac:	42b3      	cmp	r3, r6
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x192>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b2:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b6:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 80063ba:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80063bc:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80063be:	6869      	ldr	r1, [r5, #4]
 80063c0:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80063c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063c6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80063dc:	61da      	str	r2, [r3, #28]
      break;
 80063de:	e79a      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0xee>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063e0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80063e2:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80063e4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063e6:	6a19      	ldr	r1, [r3, #32]
 80063e8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80063ec:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80063ee:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80063f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80063f6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80063fa:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063fc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80063fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006402:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	4e16      	ldr	r6, [pc, #88]	@ (8006460 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8006408:	42b3      	cmp	r3, r6
 800640a:	d00f      	beq.n	800642c <HAL_TIM_PWM_ConfigChannel+0x204>
 800640c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006410:	42b3      	cmp	r3, r6
 8006412:	d00b      	beq.n	800642c <HAL_TIM_PWM_ConfigChannel+0x204>
 8006414:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8006418:	42b3      	cmp	r3, r6
 800641a:	d007      	beq.n	800642c <HAL_TIM_PWM_ConfigChannel+0x204>
 800641c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006420:	42b3      	cmp	r3, r6
 8006422:	d003      	beq.n	800642c <HAL_TIM_PWM_ConfigChannel+0x204>
 8006424:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006428:	42b3      	cmp	r3, r6
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x20e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800642c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800642e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006432:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006436:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006438:	6559      	str	r1, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800643a:	6869      	ldr	r1, [r5, #4]
 800643c:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 800643e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006442:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800644a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800644c:	f022 0204 	bic.w	r2, r2, #4
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006452:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006454:	430a      	orrs	r2, r1
 8006456:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006458:	e75d      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0xee>
  __HAL_LOCK(htim);
 800645a:	2002      	movs	r0, #2
}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00

08006464 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006464:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006468:	2a01      	cmp	r2, #1
 800646a:	d040      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	6802      	ldr	r2, [r0, #0]
{
 800646e:	b470      	push	{r4, r5, r6}
 8006470:	4603      	mov	r3, r0
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006472:	4e20      	ldr	r6, [pc, #128]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	2002      	movs	r0, #2
 8006476:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800647a:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 800647c:	6850      	ldr	r0, [r2, #4]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006480:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006482:	d022      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8006484:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006488:	42b2      	cmp	r2, r6
 800648a:	d027      	beq.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x78>
  tmpcr2 &= ~TIM_CR2_MMS;
 800648c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006490:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006496:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	d00a      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800649a:	4817      	ldr	r0, [pc, #92]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800649c:	4282      	cmp	r2, r0
 800649e:	d007      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064a0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80064a4:	4282      	cmp	r2, r0
 80064a6:	d003      	beq.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064a8:	f500 309c 	add.w	r0, r0, #79872	@ 0x13800
 80064ac:	4282      	cmp	r2, r0
 80064ae:	d104      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b2:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80064ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80064c2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80064c6:	bc70      	pop	{r4, r5, r6}
 80064c8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ca:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064cc:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d0:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d6:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80064d8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	e7e9      	b.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064dc:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064de:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e2:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e8:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 80064ea:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	e7e0      	b.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  __HAL_LOCK(htim);
 80064ee:	2002      	movs	r0, #2
}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400

080064fc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d03d      	beq.n	8006580 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8006504:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006506:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800650a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800650e:	4602      	mov	r2, r0
 8006510:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006512:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006514:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006516:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800651a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800651c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006520:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006522:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006528:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800652a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800652c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006530:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006532:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006534:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006538:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800653a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800653c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006540:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006542:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006546:	4c0f      	ldr	r4, [pc, #60]	@ (8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006548:	42a0      	cmp	r0, r4
 800654a:	d00b      	beq.n	8006564 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800654c:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006550:	42a0      	cmp	r0, r4
 8006552:	d007      	beq.n	8006564 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006554:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006556:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006558:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 800655c:	4608      	mov	r0, r1
}
 800655e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006562:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006564:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8006566:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800656a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800656e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006570:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006576:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006578:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800657c:	430b      	orrs	r3, r1
 800657e:	e7e9      	b.n	8006554 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006580:	2002      	movs	r0, #2
}
 8006582:	4770      	bx	lr
 8006584:	40012c00 	.word	0x40012c00

08006588 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006588:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800658a:	071a      	lsls	r2, r3, #28
{
 800658c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800658e:	d506      	bpl.n	800659e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006590:	6801      	ldr	r1, [r0, #0]
 8006592:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006594:	684a      	ldr	r2, [r1, #4]
 8006596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800659a:	4322      	orrs	r2, r4
 800659c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800659e:	07dc      	lsls	r4, r3, #31
 80065a0:	d506      	bpl.n	80065b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a2:	6801      	ldr	r1, [r0, #0]
 80065a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80065a6:	684a      	ldr	r2, [r1, #4]
 80065a8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80065ac:	4322      	orrs	r2, r4
 80065ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b0:	0799      	lsls	r1, r3, #30
 80065b2:	d506      	bpl.n	80065c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b4:	6801      	ldr	r1, [r0, #0]
 80065b6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80065b8:	684a      	ldr	r2, [r1, #4]
 80065ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80065be:	4322      	orrs	r2, r4
 80065c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c2:	075a      	lsls	r2, r3, #29
 80065c4:	d506      	bpl.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065c6:	6801      	ldr	r1, [r0, #0]
 80065c8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80065ca:	684a      	ldr	r2, [r1, #4]
 80065cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065d0:	4322      	orrs	r2, r4
 80065d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d4:	06dc      	lsls	r4, r3, #27
 80065d6:	d506      	bpl.n	80065e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d8:	6801      	ldr	r1, [r0, #0]
 80065da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80065dc:	688a      	ldr	r2, [r1, #8]
 80065de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065e2:	4322      	orrs	r2, r4
 80065e4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	0699      	lsls	r1, r3, #26
 80065e8:	d506      	bpl.n	80065f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ea:	6801      	ldr	r1, [r0, #0]
 80065ec:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80065ee:	688a      	ldr	r2, [r1, #8]
 80065f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065f4:	4322      	orrs	r2, r4
 80065f6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065f8:	065a      	lsls	r2, r3, #25
 80065fa:	d509      	bpl.n	8006610 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065fc:	6801      	ldr	r1, [r0, #0]
 80065fe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006600:	684a      	ldr	r2, [r1, #4]
 8006602:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006606:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006608:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800660c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660e:	d00b      	beq.n	8006628 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	d506      	bpl.n	8006622 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006614:	6802      	ldr	r2, [r0, #0]
 8006616:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006618:	6853      	ldr	r3, [r2, #4]
 800661a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800661e:	430b      	orrs	r3, r1
 8006620:	6053      	str	r3, [r2, #4]
  }
}
 8006622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006626:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006628:	684a      	ldr	r2, [r1, #4]
 800662a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800662c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006630:	4322      	orrs	r2, r4
 8006632:	604a      	str	r2, [r1, #4]
 8006634:	e7ec      	b.n	8006610 <UART_AdvFeatureConfig+0x88>
 8006636:	bf00      	nop

08006638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006638:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	2300      	movs	r3, #0
{
 800663c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006642:	f7fd fd1f 	bl	8004084 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	6813      	ldr	r3, [r2, #0]
 800664a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800664c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664e:	d40e      	bmi.n	800666e <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	0759      	lsls	r1, r3, #29
 8006654:	d42f      	bmi.n	80066b6 <UART_CheckIdleState+0x7e>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006658:	2220      	movs	r2, #32
 800665a:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800665c:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006664:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8006666:	2300      	movs	r3, #0
 8006668:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 800666c:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666e:	69d3      	ldr	r3, [r2, #28]
 8006670:	0298      	lsls	r0, r3, #10
 8006672:	d4ed      	bmi.n	8006650 <UART_CheckIdleState+0x18>
 8006674:	e00c      	b.n	8006690 <UART_CheckIdleState+0x58>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006676:	6819      	ldr	r1, [r3, #0]
 8006678:	0749      	lsls	r1, r1, #29
 800667a:	461a      	mov	r2, r3
 800667c:	d505      	bpl.n	800668a <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	0708      	lsls	r0, r1, #28
 8006682:	d449      	bmi.n	8006718 <UART_CheckIdleState+0xe0>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006684:	69d9      	ldr	r1, [r3, #28]
 8006686:	0509      	lsls	r1, r1, #20
 8006688:	d474      	bmi.n	8006774 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	0298      	lsls	r0, r3, #10
 800668e:	d4df      	bmi.n	8006650 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fd fcf8 	bl	8004084 <HAL_GetTick>
 8006694:	1b43      	subs	r3, r0, r5
 8006696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800669a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669c:	d3eb      	bcc.n	8006676 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	e843 2100 	strex	r1, r2, [r3]
 80066aa:	2900      	cmp	r1, #0
 80066ac:	d1f7      	bne.n	800669e <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80066ae:	2320      	movs	r3, #32
 80066b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80066b2:	2003      	movs	r0, #3
 80066b4:	e7d7      	b.n	8006666 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b6:	69d3      	ldr	r3, [r2, #28]
 80066b8:	025b      	lsls	r3, r3, #9
 80066ba:	d4cc      	bmi.n	8006656 <UART_CheckIdleState+0x1e>
 80066bc:	e00d      	b.n	80066da <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	0750      	lsls	r0, r2, #29
 80066c2:	d507      	bpl.n	80066d4 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	0711      	lsls	r1, r2, #28
 80066c8:	f100 8082 	bmi.w	80067d0 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	0512      	lsls	r2, r2, #20
 80066d0:	f100 80ac 	bmi.w	800682c <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	025b      	lsls	r3, r3, #9
 80066d8:	d4bd      	bmi.n	8006656 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fd fcd3 	bl	8004084 <HAL_GetTick>
 80066de:	1b43      	subs	r3, r0, r5
 80066e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	d3ea      	bcc.n	80066be <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	e843 2100 	strex	r1, r2, [r3]
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d1f7      	bne.n	80066e8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	f103 0208 	add.w	r2, r3, #8
 80066fc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	f103 0008 	add.w	r0, r3, #8
 8006708:	e840 2100 	strex	r1, r2, [r0]
 800670c:	2900      	cmp	r1, #0
 800670e:	d1f3      	bne.n	80066f8 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8006710:	2320      	movs	r3, #32
 8006712:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006716:	e7cc      	b.n	80066b2 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006718:	2208      	movs	r2, #8
 800671a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006720:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	e843 2100 	strex	r1, r2, [r3]
 8006728:	2900      	cmp	r1, #0
 800672a:	d1f7      	bne.n	800671c <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	f103 0208 	add.w	r2, r3, #8
 8006730:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	f103 0008 	add.w	r0, r3, #8
 800673c:	e840 2100 	strex	r1, r2, [r0]
 8006740:	2900      	cmp	r1, #0
 8006742:	d1f3      	bne.n	800672c <UART_CheckIdleState+0xf4>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006746:	2a01      	cmp	r2, #1
 8006748:	d00b      	beq.n	8006762 <UART_CheckIdleState+0x12a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800674c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800674e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006750:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006754:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006758:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800675c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006760:	e79d      	b.n	800669e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	e843 2100 	strex	r1, r2, [r3]
 800676e:	2900      	cmp	r1, #0
 8006770:	d1f7      	bne.n	8006762 <UART_CheckIdleState+0x12a>
 8006772:	e7ea      	b.n	800674a <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006774:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006778:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	e843 2100 	strex	r1, r2, [r3]
 8006786:	2900      	cmp	r1, #0
 8006788:	d1f7      	bne.n	800677a <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f103 0008 	add.w	r0, r3, #8
 800679a:	e840 2100 	strex	r1, r2, [r0]
 800679e:	2900      	cmp	r1, #0
 80067a0:	d1f3      	bne.n	800678a <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	d00a      	beq.n	80067be <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80067aa:	2120      	movs	r1, #32
 80067ac:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80067b0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80067b4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067b8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80067bc:	e76f      	b.n	800669e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	e843 2100 	strex	r1, r2, [r3]
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d1f7      	bne.n	80067be <UART_CheckIdleState+0x186>
 80067ce:	e7eb      	b.n	80067a8 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	e843 2100 	strex	r1, r2, [r3]
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d1f7      	bne.n	80067d4 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	f103 0208 	add.w	r2, r3, #8
 80067e8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	f103 0008 	add.w	r0, r3, #8
 80067f4:	e840 2100 	strex	r1, r2, [r0]
 80067f8:	2900      	cmp	r1, #0
 80067fa:	d1f3      	bne.n	80067e4 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80067fe:	2a01      	cmp	r2, #1
 8006800:	d00b      	beq.n	800681a <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006804:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006806:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800680c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006810:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006814:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006818:	e766      	b.n	80066e8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	e843 2100 	strex	r1, r2, [r3]
 8006826:	2900      	cmp	r1, #0
 8006828:	d1f7      	bne.n	800681a <UART_CheckIdleState+0x1e2>
 800682a:	e7ea      	b.n	8006802 <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800682c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006830:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006836:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	e843 2100 	strex	r1, r2, [r3]
 800683e:	2900      	cmp	r1, #0
 8006840:	d1f7      	bne.n	8006832 <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	f103 0208 	add.w	r2, r3, #8
 8006846:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	f103 0008 	add.w	r0, r3, #8
 8006852:	e840 2100 	strex	r1, r2, [r0]
 8006856:	2900      	cmp	r1, #0
 8006858:	d1f3      	bne.n	8006842 <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800685c:	2a01      	cmp	r2, #1
 800685e:	d00a      	beq.n	8006876 <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	2120      	movs	r1, #32
 8006864:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006868:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800686c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006870:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006874:	e738      	b.n	80066e8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	e843 2100 	strex	r1, r2, [r3]
 8006882:	2900      	cmp	r1, #0
 8006884:	d1f7      	bne.n	8006876 <UART_CheckIdleState+0x23e>
 8006886:	e7eb      	b.n	8006860 <UART_CheckIdleState+0x228>

08006888 <HAL_UART_Init>:
  if (huart == NULL)
 8006888:	2800      	cmp	r0, #0
 800688a:	f000 80c5 	beq.w	8006a18 <HAL_UART_Init+0x190>
{
 800688e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006890:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006892:	4604      	mov	r4, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d03d      	beq.n	8006914 <HAL_UART_Init+0x8c>
  __HAL_UART_DISABLE(huart);
 8006898:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800689a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	2324      	movs	r3, #36	@ 0x24
 800689e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d12f      	bne.n	800690c <HAL_UART_Init+0x84>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ac:	6920      	ldr	r0, [r4, #16]
 80068ae:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b0:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b2:	69e2      	ldr	r2, [r4, #28]
 80068b4:	4303      	orrs	r3, r0
 80068b6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b8:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068be:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068c2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c4:	430b      	orrs	r3, r1
 80068c6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c8:	686b      	ldr	r3, [r5, #4]
 80068ca:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80068cc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80068d2:	430b      	orrs	r3, r1
 80068d4:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068d6:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068da:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80068de:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e0:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068e2:	4965      	ldr	r1, [pc, #404]	@ (8006a78 <HAL_UART_Init+0x1f0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e4:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068e6:	428d      	cmp	r5, r1
 80068e8:	d019      	beq.n	800691e <HAL_UART_Init+0x96>
 80068ea:	4b64      	ldr	r3, [pc, #400]	@ (8006a7c <HAL_UART_Init+0x1f4>)
 80068ec:	429d      	cmp	r5, r3
 80068ee:	d03c      	beq.n	800696a <HAL_UART_Init+0xe2>
 80068f0:	4b63      	ldr	r3, [pc, #396]	@ (8006a80 <HAL_UART_Init+0x1f8>)
 80068f2:	429d      	cmp	r5, r3
 80068f4:	d07d      	beq.n	80069f2 <HAL_UART_Init+0x16a>
 80068f6:	4b63      	ldr	r3, [pc, #396]	@ (8006a84 <HAL_UART_Init+0x1fc>)
 80068f8:	429d      	cmp	r5, r3
 80068fa:	d047      	beq.n	800698c <HAL_UART_Init+0x104>
 80068fc:	4b62      	ldr	r3, [pc, #392]	@ (8006a88 <HAL_UART_Init+0x200>)
 80068fe:	429d      	cmp	r5, r3
 8006900:	d055      	beq.n	80069ae <HAL_UART_Init+0x126>
  huart->RxISR = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8006908:	2001      	movs	r0, #1
 800690a:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff fe3b 	bl	8006588 <UART_AdvFeatureConfig>
 8006912:	e7cb      	b.n	80068ac <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 8006914:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8006918:	f7fc fc8c 	bl	8003234 <HAL_UART_MspInit>
 800691c:	e7bc      	b.n	8006898 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800691e:	4b5b      	ldr	r3, [pc, #364]	@ (8006a8c <HAL_UART_Init+0x204>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d049      	beq.n	80069be <HAL_UART_Init+0x136>
 800692a:	2b03      	cmp	r3, #3
 800692c:	d03a      	beq.n	80069a4 <HAL_UART_Init+0x11c>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d026      	beq.n	8006980 <HAL_UART_Init+0xf8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006932:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006936:	f000 8092 	beq.w	8006a5e <HAL_UART_Init+0x1d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 800693a:	f7ff f8ef 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800693e:	2800      	cmp	r0, #0
 8006940:	d142      	bne.n	80069c8 <HAL_UART_Init+0x140>
  huart->RxISR = NULL;
 8006942:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800694e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006956:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800695e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8006966:	f7ff be67 	b.w	8006638 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696a:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800696e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006978:	d021      	beq.n	80069be <HAL_UART_Init+0x136>
 800697a:	d836      	bhi.n	80069ea <HAL_UART_Init+0x162>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d045      	beq.n	8006a0c <HAL_UART_Init+0x184>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006980:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006984:	d075      	beq.n	8006a72 <HAL_UART_Init+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7ff f883 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
        break;
 800698a:	e7d8      	b.n	800693e <HAL_UART_Init+0xb6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698c:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800699a:	d010      	beq.n	80069be <HAL_UART_Init+0x136>
 800699c:	d9ee      	bls.n	800697c <HAL_UART_Init+0xf4>
 800699e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069a2:	d1ae      	bne.n	8006902 <HAL_UART_Init+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80069a8:	d052      	beq.n	8006a50 <HAL_UART_Init+0x1c8>
        pclk = (uint32_t) HSI_VALUE;
 80069aa:	4839      	ldr	r0, [pc, #228]	@ (8006a90 <HAL_UART_Init+0x208>)
 80069ac:	e00c      	b.n	80069c8 <HAL_UART_Init+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ae:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 80069b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80069b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069bc:	d14a      	bne.n	8006a54 <HAL_UART_Init+0x1cc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069be:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80069c2:	d02b      	beq.n	8006a1c <HAL_UART_Init+0x194>
        pclk = (uint32_t) LSE_VALUE;
 80069c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069c8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ca:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ce:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80069d2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d6:	f1a0 0310 	sub.w	r3, r0, #16
 80069da:	4293      	cmp	r3, r2
 80069dc:	d891      	bhi.n	8006902 <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069de:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 80069e0:	2200      	movs	r2, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069e2:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80069e4:	e9c4 221a 	strd	r2, r2, [r4, #104]	@ 0x68
  return ret;
 80069e8:	e7ae      	b.n	8006948 <HAL_UART_Init+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069ee:	d0d9      	beq.n	80069a4 <HAL_UART_Init+0x11c>
 80069f0:	e787      	b.n	8006902 <HAL_UART_Init+0x7a>
 80069f2:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 80069f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80069fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a00:	d0dd      	beq.n	80069be <HAL_UART_Init+0x136>
 8006a02:	d9bb      	bls.n	800697c <HAL_UART_Init+0xf4>
 8006a04:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a08:	d0cc      	beq.n	80069a4 <HAL_UART_Init+0x11c>
 8006a0a:	e77a      	b.n	8006902 <HAL_UART_Init+0x7a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a0c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006a10:	d02c      	beq.n	8006a6c <HAL_UART_Init+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7ff f86b 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
        break;
 8006a16:	e792      	b.n	800693e <HAL_UART_Init+0xb6>
}
 8006a18:	2001      	movs	r0, #1
 8006a1a:	4770      	bx	lr
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a20:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a22:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a26:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006a2a:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a2e:	f1a2 0310 	sub.w	r3, r2, #16
 8006a32:	428b      	cmp	r3, r1
 8006a34:	f63f af65 	bhi.w	8006902 <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a38:	f022 010f 	bic.w	r1, r2, #15
 8006a3c:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 8006a3e:	6823      	ldr	r3, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a40:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8006a44:	430a      	orrs	r2, r1
  huart->RxISR = NULL;
 8006a46:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8006a48:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 8006a4a:	e9c4 111a 	strd	r1, r1, [r4, #104]	@ 0x68
  return ret;
 8006a4e:	e77b      	b.n	8006948 <HAL_UART_Init+0xc0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a50:	4810      	ldr	r0, [pc, #64]	@ (8006a94 <HAL_UART_Init+0x20c>)
 8006a52:	e7e5      	b.n	8006a20 <HAL_UART_Init+0x198>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a54:	d992      	bls.n	800697c <HAL_UART_Init+0xf4>
 8006a56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a5a:	d0a3      	beq.n	80069a4 <HAL_UART_Init+0x11c>
 8006a5c:	e751      	b.n	8006902 <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5e:	f7ff f85d 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f43f af6d 	beq.w	8006942 <HAL_UART_Init+0xba>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a68:	0040      	lsls	r0, r0, #1
 8006a6a:	e7d9      	b.n	8006a20 <HAL_UART_Init+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7ff f83e 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
        break;
 8006a70:	e7f7      	b.n	8006a62 <HAL_UART_Init+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a72:	f7ff f80d 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
        break;
 8006a76:	e7f4      	b.n	8006a62 <HAL_UART_Init+0x1da>
 8006a78:	40013800 	.word	0x40013800
 8006a7c:	40004400 	.word	0x40004400
 8006a80:	40004800 	.word	0x40004800
 8006a84:	40004c00 	.word	0x40004c00
 8006a88:	40005000 	.word	0x40005000
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	007a1200 	.word	0x007a1200
 8006a94:	00f42400 	.word	0x00f42400

08006a98 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8006a98:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8006a9a:	8840      	ldrh	r0, [r0, #2]
 8006a9c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8006aa0:	0c00      	lsrs	r0, r0, #16
 8006aa2:	4770      	bx	lr

08006aa4 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006aa4:	7803      	ldrb	r3, [r0, #0]
 8006aa6:	b94b      	cbnz	r3, 8006abc <NTC_Init+0x18>
    {
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8006aa8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bfcc      	ite	gt
 8006ab0:	2300      	movgt	r3, #0
 8006ab2:	2301      	movle	r3, #1
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8043      	strh	r3, [r0, #2]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006aba:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006abc:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8006abe:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	8102      	strh	r2, [r0, #8]
}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006ac8:	7802      	ldrb	r2, [r0, #0]
{
 8006aca:	4603      	mov	r3, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8006acc:	b9da      	cbnz	r2, 8006b06 <NTC_CalcAvTemp+0x3e>
    {
      uint16_t hAux = rawValue;

      if (0xFFFFU == hAux)
 8006ace:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006ad2:	4281      	cmp	r1, r0
      {
        /* Nothing to do */
      }
      else
      {
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8006ad4:	885a      	ldrh	r2, [r3, #2]
      if (0xFFFFU == hAux)
 8006ad6:	d004      	beq.n	8006ae2 <NTC_CalcAvTemp+0x1a>
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8006ad8:	1a89      	subs	r1, r1, r2
 8006ada:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8006ade:	b292      	uxth	r2, r2
 8006ae0:	805a      	strh	r2, [r3, #2]
  if (pHandle->hSensitivity > 0 )
 8006ae2:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006ae6:	8959      	ldrh	r1, [r3, #10]
  if (pHandle->hSensitivity > 0 )
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	dd07      	ble.n	8006afc <NTC_CalcAvTemp+0x34>
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006aec:	428a      	cmp	r2, r1
 8006aee:	d80d      	bhi.n	8006b0c <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8006af0:	8999      	ldrh	r1, [r3, #12]
 8006af2:	4291      	cmp	r1, r2
 8006af4:	d807      	bhi.n	8006b06 <NTC_CalcAvTemp+0x3e>
      hFault = pHandle->hFaultState;
 8006af6:	8918      	ldrh	r0, [r3, #8]
      }
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006af8:	8118      	strh	r0, [r3, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006afa:	4770      	bx	lr
    if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8006afc:	428a      	cmp	r2, r1
 8006afe:	d305      	bcc.n	8006b0c <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8006b00:	8999      	ldrh	r1, [r3, #12]
 8006b02:	4291      	cmp	r1, r2
 8006b04:	d2f7      	bcs.n	8006af6 <NTC_CalcAvTemp+0x2e>
 8006b06:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006b08:	8118      	strh	r0, [r3, #8]
}
 8006b0a:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8006b0c:	2008      	movs	r0, #8
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006b0e:	8118      	strh	r0, [r3, #8]
}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop

08006b14 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8006b14:	7803      	ldrb	r3, [r0, #0]
 8006b16:	b95b      	cbnz	r3, 8006b30 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8006b18:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8006b1a:	6901      	ldr	r1, [r0, #16]
      wTemp *= pHandle->hSensitivity;
 8006b1c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006b20:	8a80      	ldrh	r0, [r0, #20]
      wTemp -= ((int32_t)pHandle->wV0);
 8006b22:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006b28:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006b2c:	b200      	sxth	r0, r0
 8006b2e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8006b30:	88c0      	ldrh	r0, [r0, #6]
}
 8006b32:	b200      	sxth	r0, r0
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop

08006b38 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006b38:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006b3a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006b3c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006b3e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006b40:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8006b42:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006b44:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b46:	4770      	bx	lr

08006b48 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8006b48:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b4a:	4770      	bx	lr

08006b4c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8006b4c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b4e:	4770      	bx	lr

08006b50 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006b50:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8006b58:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006b60:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006b62:	4770      	bx	lr

08006b64 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8006b64:	8b80      	ldrh	r0, [r0, #28]
 8006b66:	4770      	bx	lr

08006b68 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006b68:	2301      	movs	r3, #1
 8006b6a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006b6c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006b6e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop

08006b74 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8006b74:	8b40      	ldrh	r0, [r0, #26]
 8006b76:	4770      	bx	lr

08006b78 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006b78:	8bc0      	ldrh	r0, [r0, #30]
 8006b7a:	4770      	bx	lr

08006b7c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8006b7c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b7e:	4770      	bx	lr

08006b80 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8006b80:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006b82:	4770      	bx	lr

08006b84 <PID_SetKIDivisorPOW2>:
{
 8006b84:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006b86:	2301      	movs	r3, #1
{
 8006b88:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006b8a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006b8c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006b90:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8006b92:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006b94:	40a1      	lsls	r1, r4
{
 8006b96:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006b98:	f7ff fff2 	bl	8006b80 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8006b9c:	4902      	ldr	r1, [pc, #8]	@ (8006ba8 <PID_SetKIDivisorPOW2+0x24>)
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	40a1      	lsls	r1, r4
 8006ba2:	f7ff ffeb 	bl	8006b7c <PID_SetLowerIntegralTermLimit>
}
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	ffff8001 	.word	0xffff8001

08006bac <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8006bac:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006bae:	4770      	bx	lr

08006bb0 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006bb0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop

08006bb8 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006bb8:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8006bba:	4770      	bx	lr

08006bbc <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006bc0:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006bc2:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop

08006bc8 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006bc8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006bcc:	4603      	mov	r3, r0
 8006bce:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006bd0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006bd4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006bd8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006bdc:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006be0:	b17c      	cbz	r4, 8006c02 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006be2:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006be6:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8006bea:	eb15 0e01 	adds.w	lr, r5, r1
 8006bee:	d41d      	bmi.n	8006c2c <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006bf0:	420d      	tst	r5, r1
 8006bf2:	4914      	ldr	r1, [pc, #80]	@ (8006c44 <PI_Controller+0x7c>)
 8006bf4:	bf48      	it	mi
 8006bf6:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006bf8:	45a6      	cmp	lr, r4
 8006bfa:	dc02      	bgt.n	8006c02 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006bfc:	691c      	ldr	r4, [r3, #16]
 8006bfe:	4574      	cmp	r4, lr
 8006c00:	dd1d      	ble.n	8006c3e <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006c02:	8b99      	ldrh	r1, [r3, #28]
 8006c04:	410a      	asrs	r2, r1
 8006c06:	8bd9      	ldrh	r1, [r3, #30]
 8006c08:	fa44 f101 	asr.w	r1, r4, r1
 8006c0c:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006c0e:	4290      	cmp	r0, r2
 8006c10:	da03      	bge.n	8006c1a <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006c12:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006c14:	4414      	add	r4, r2
 8006c16:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8006c18:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8006c1a:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006c1c:	bfc5      	ittet	gt
 8006c1e:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006c22:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8006c24:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8006c26:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8006c28:	609c      	str	r4, [r3, #8]
}
 8006c2a:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	dde3      	ble.n	8006bf8 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8006c30:	2900      	cmp	r1, #0
 8006c32:	dde1      	ble.n	8006bf8 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006c34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c38:	428c      	cmp	r4, r1
 8006c3a:	d1e2      	bne.n	8006c02 <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8006c3c:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006c3e:	4674      	mov	r4, lr
 8006c40:	e7df      	b.n	8006c02 <PI_Controller+0x3a>
 8006c42:	bf00      	nop
 8006c44:	80000001 	.word	0x80000001

08006c48 <RVBS_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.AvBusVoltage_d = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006c48:	8943      	ldrh	r3, [r0, #10]
 8006c4a:	8a02      	ldrh	r2, [r0, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006c52:	4770      	bx	lr

08006c54 <RVBS_CalcAvVbus>:
  else
  {
#endif
    uint16_t hAux = rawValue;

    if (0xFFFFU == hAux)
 8006c54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c58:	4291      	cmp	r1, r2
 8006c5a:	d101      	bne.n	8006c60 <RVBS_CalcAvVbus+0xc>
  uint16_t tempValue = 0U;
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	4770      	bx	lr
    {
      /* Nothing to do */
    }
    else
    {
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8006c60:	88c2      	ldrh	r2, [r0, #6]
 8006c62:	4603      	mov	r3, r0
 8006c64:	1a89      	subs	r1, r1, r2
  */
uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
  uint16_t fault;
  /* If both thresholds are equal, single threshold feature is used */
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006c66:	8940      	ldrh	r0, [r0, #10]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8006c68:	eb02 2221 	add.w	r2, r2, r1, asr #8
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006c6c:	8999      	ldrh	r1, [r3, #12]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8006c6e:	b292      	uxth	r2, r2
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006c70:	4288      	cmp	r0, r1
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8006c72:	80da      	strh	r2, [r3, #6]
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006c74:	d012      	beq.n	8006c9c <RVBS_CalcAvVbus+0x48>
    }
  }
  else
  {
    /* If both thresholds are different, hysteresis feature is used (Brake mode) */
    if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006c76:	f8b3 c010 	ldrh.w	ip, [r3, #16]
 8006c7a:	4594      	cmp	ip, r2
 8006c7c:	d818      	bhi.n	8006cb0 <RVBS_CalcAvVbus+0x5c>
{
 8006c7e:	b410      	push	{r4}
    {
      fault = MC_UNDER_VOLT;
    }
    else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006c80:	7b9c      	ldrb	r4, [r3, #14]
 8006c82:	b134      	cbz	r4, 8006c92 <RVBS_CalcAvVbus+0x3e>
        fault = MC_OVER_VOLT;
      }
    }
    else
    {
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006c84:	4282      	cmp	r2, r0
 8006c86:	d816      	bhi.n	8006cb6 <RVBS_CalcAvVbus+0x62>
      {
        pHandle->OverVoltageHysteresisUpDir = false;
        fault = MC_OVER_VOLT;
      }
      else{
        fault = MC_NO_ERROR;
 8006c88:	2000      	movs	r0, #0
}
 8006c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006c8e:	8118      	strh	r0, [r3, #8]
}
 8006c90:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006c92:	428a      	cmp	r2, r1
 8006c94:	d211      	bcs.n	8006cba <RVBS_CalcAvVbus+0x66>
        pHandle->OverVoltageHysteresisUpDir = true;
 8006c96:	2201      	movs	r2, #1
 8006c98:	739a      	strb	r2, [r3, #14]
        fault = MC_NO_ERROR;
 8006c9a:	e7f5      	b.n	8006c88 <RVBS_CalcAvVbus+0x34>
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006c9c:	4282      	cmp	r2, r0
 8006c9e:	d80e      	bhi.n	8006cbe <RVBS_CalcAvVbus+0x6a>
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006ca0:	8a18      	ldrh	r0, [r3, #16]
 8006ca2:	4290      	cmp	r0, r2
 8006ca4:	bf94      	ite	ls
 8006ca6:	2000      	movls	r0, #0
 8006ca8:	2001      	movhi	r0, #1
 8006caa:	0080      	lsls	r0, r0, #2
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006cac:	8118      	strh	r0, [r3, #8]
}
 8006cae:	4770      	bx	lr
      fault = MC_UNDER_VOLT;
 8006cb0:	2004      	movs	r0, #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006cb2:	8118      	strh	r0, [r3, #8]
}
 8006cb4:	4770      	bx	lr
        pHandle->OverVoltageHysteresisUpDir = false;
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	739a      	strb	r2, [r3, #14]
        fault = MC_OVER_VOLT;
 8006cba:	2002      	movs	r0, #2
 8006cbc:	e7e5      	b.n	8006c8a <RVBS_CalcAvVbus+0x36>
 8006cbe:	2002      	movs	r0, #2
 8006cc0:	e7f4      	b.n	8006cac <RVBS_CalcAvVbus+0x58>
 8006cc2:	bf00      	nop

08006cc4 <RUC_6S_Clear>:
    RevUpCtrl_6S_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits. */
      pRUCPhaseParams = (RevUpCtrl_6S_PhaseParams_t *)pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006cc4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8006cc6:	b410      	push	{r4}
    RevUpCtrl_6S_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
 8006cc8:	f100 041c 	add.w	r4, r0, #28
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006ccc:	b303      	cbz	r3, 8006d10 <RUC_6S_Clear+0x4c>
      pRUCPhaseParams = (RevUpCtrl_6S_PhaseParams_t *)pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006cce:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006cd0:	b30b      	cbz	r3, 8006d16 <RUC_6S_Clear+0x52>
      pRUCPhaseParams = (RevUpCtrl_6S_PhaseParams_t *)pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006cd2:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006cd4:	b30b      	cbz	r3, 8006d1a <RUC_6S_Clear+0x56>
      pRUCPhaseParams = (RevUpCtrl_6S_PhaseParams_t *)pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006cd6:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006cd8:	b30b      	cbz	r3, 8006d1e <RUC_6S_Clear+0x5a>
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	b30b      	cbz	r3, 8006d22 <RUC_6S_Clear+0x5e>
 8006cde:	2304      	movs	r3, #4
    {
      /* Nothing to do error. */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006ce0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ce4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006ce8:	2200      	movs	r2, #0
 8006cea:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    
    pHandle->pCurrentPhaseParams = pHandle->ParamsData;
    SpeednDutyCtrl_Handle_t *pSDC = pHandle->pSDC;
        
    pHandle->hDirection = (int8_t)hMotorDirection;
 8006cec:	7501      	strb	r1, [r0, #20]
    SpeednDutyCtrl_Handle_t *pSDC = pHandle->pSDC;
 8006cee:	6e03      	ldr	r3, [r0, #96]	@ 0x60
    pHandle->pCurrentPhaseParams = pHandle->ParamsData;
 8006cf0:	6184      	str	r4, [r0, #24]

    /* Initializes the rev up stages counter. */
    pHandle->bStageCnt = 0U;

    pHandle->bPhaseNbr = 1U;
 8006cf2:	2101      	movs	r1, #1

    pHandle->ElAccSpeedRefUnit = 0U;
    pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006cf4:	68c4      	ldr	r4, [r0, #12]
    pHandle->bPhaseNbr = 1U;
 8006cf6:	f880 105a 	strb.w	r1, [r0, #90]	@ 0x5a
    pHandle->Mode = bMode;
 8006cfa:	2109      	movs	r1, #9
    pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006cfc:	6684      	str	r4, [r0, #104]	@ 0x68
    pHandle->bStageCnt = 0U;
 8006cfe:	f880 205e 	strb.w	r2, [r0, #94]	@ 0x5e
    pHandle->ElAccSpeedRefUnit = 0U;
 8006d02:	6642      	str	r2, [r0, #100]	@ 0x64
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8006d04:	8082      	strh	r2, [r0, #4]
 8006d06:	7019      	strb	r1, [r3, #0]
    SDC_SetControlMode(pSDC, MCM_DUTY_MODE);
    pHandle->hPhaseRemainingTicks = 0U;
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  }
#endif
}
 8006d08:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->hPhaseRemainingTicks = 0U;
 8006d0c:	8242      	strh	r2, [r0, #18]
}
 8006d0e:	4770      	bx	lr
      bPhase++;
 8006d10:	2301      	movs	r3, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006d12:	3b01      	subs	r3, #1
 8006d14:	e7e4      	b.n	8006ce0 <RUC_6S_Clear+0x1c>
      bPhase++;
 8006d16:	2302      	movs	r3, #2
 8006d18:	e7fb      	b.n	8006d12 <RUC_6S_Clear+0x4e>
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e7f9      	b.n	8006d12 <RUC_6S_Clear+0x4e>
 8006d1e:	2304      	movs	r3, #4
 8006d20:	e7f7      	b.n	8006d12 <RUC_6S_Clear+0x4e>
 8006d22:	2305      	movs	r3, #5
 8006d24:	e7f5      	b.n	8006d12 <RUC_6S_Clear+0x4e>
 8006d26:	bf00      	nop

08006d28 <RUC_6S_UpdatePulse>:
  * @brief  Update rev-up duty cycle relative to actual Vbus value to be applied.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  BusVHandle: pointer to the bus voltage sensor.
  */
__weak void RUC_6S_UpdatePulse(RevUpCtrl_6S_Handle_t *pHandle, BusVoltageSensor_Handle_t *BusVHandle)
{
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
  }
  else
  {
#endif
    uint16_t tPulseUpdateFactor = 10U * NOMINAL_BUS_VOLTAGE_V
                                  / VBS_GetAvBusVoltage_V(BusVHandle);
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	f7ff feb3 	bl	8006a98 <VBS_GetAvBusVoltage_V>
    uint16_t tPulseUpdateFactor = 10U * NOMINAL_BUS_VOLTAGE_V
 8006d32:	23dc      	movs	r3, #220	@ 0xdc
 8006d34:	fbb3 f3f0 	udiv	r3, r3, r0
    pHandle->PulseUpdateFactor = tPulseUpdateFactor;
 8006d38:	f8a4 3058 	strh.w	r3, [r4, #88]	@ 0x58
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  }
#endif
}
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	bf00      	nop

08006d40 <RUC_6S_Exec>:
  * @brief  6-Step Main revup controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to true when entire revup phases have been completed.
  */
__weak bool RUC_6S_Exec(RevUpCtrl_6S_Handle_t *pHandle)
{
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 1U)
 8006d44:	8a40      	ldrh	r0, [r0, #18]
 8006d46:	2801      	cmp	r0, #1
 8006d48:	d935      	bls.n	8006db6 <RUC_6S_Exec+0x76>
    {
      
      /* Decrease the hPhaseRemainingTicks. */
      pHandle->hPhaseRemainingTicks--;
      pHandle->CurrentSpeedRefUnit += pHandle->ElAccSpeedRefUnit;
 8006d4a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006d4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      pHandle->hPhaseRemainingTicks--;
 8006d4e:	3801      	subs	r0, #1
      pHandle->CurrentSpeedRefUnit += pHandle->ElAccSpeedRefUnit;
 8006d50:	4413      	add	r3, r2
      pHandle->hPhaseRemainingTicks--;
 8006d52:	8260      	strh	r0, [r4, #18]
      pHandle->CurrentSpeedRefUnit += pHandle->ElAccSpeedRefUnit;
 8006d54:	66e3      	str	r3, [r4, #108]	@ 0x6c
  bool retVal = true;
 8006d56:	2001      	movs	r0, #1
      }
    }  /* hPhaseRemainingTicks = 0 */
    
    if (0U == pHandle->CurrentSpeedRefUnit) 
    {
      pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006d58:	68e2      	ldr	r2, [r4, #12]
    if (0U == pHandle->CurrentSpeedRefUnit) 
 8006d5a:	b303      	cbz	r3, 8006d9e <RUC_6S_Exec+0x5e>
    }
    else 
    {
      if (pHandle->CurrentSpeedRefUnit <= 0xFFFFU)
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
      {
        pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
        pHandle->_Super.hAvrMecSpeedUnit = (int16_t)((int32_t)pHandle->_Super.speedConvFactor /
                                          ((int32_t)pHandle->ElSpeedTimerDpp * pHandle->hDirection));
 8006d60:	f994 1014 	ldrsb.w	r1, [r4, #20]
      if (pHandle->CurrentSpeedRefUnit <= 0xFFFFU)
 8006d64:	d21d      	bcs.n	8006da2 <RUC_6S_Exec+0x62>
                                          ((int32_t)pHandle->ElSpeedTimerDpp * pHandle->hDirection));
 8006d66:	fb02 f101 	mul.w	r1, r2, r1
        pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006d6a:	66a2      	str	r2, [r4, #104]	@ 0x68
        pHandle->_Super.hAvrMecSpeedUnit = (int16_t)((int32_t)pHandle->_Super.speedConvFactor /
 8006d6c:	fb92 f2f1 	sdiv	r2, r2, r1
 8006d70:	80a2      	strh	r2, [r4, #4]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  }
#endif
  return (retVal);
}
 8006d72:	bd10      	pop	{r4, pc}
                                                       * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U);
 8006d74:	8a22      	ldrh	r2, [r4, #16]
 8006d76:	fb00 f202 	mul.w	r2, r0, r2
 8006d7a:	482a      	ldr	r0, [pc, #168]	@ (8006e24 <RUC_6S_Exec+0xe4>)
 8006d7c:	fba0 0202 	umull	r0, r2, r0, r2
 8006d80:	0992      	lsrs	r2, r2, #6
           pHandle->hPhaseRemainingTicks++;
 8006d82:	3201      	adds	r2, #1
 8006d84:	b292      	uxth	r2, r2
 8006d86:	8262      	strh	r2, [r4, #18]
           if (0 == pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit)
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d144      	bne.n	8006e16 <RUC_6S_Exec+0xd6>
         pHandle->bStageCnt++;
 8006d8c:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
      pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006d90:	68e2      	ldr	r2, [r4, #12]
             pHandle->CurrentSpeedRefUnit = 0;
 8006d92:	66e1      	str	r1, [r4, #108]	@ 0x6c
         pHandle->bStageCnt++;
 8006d94:	3301      	adds	r3, #1
             pHandle->ElAccSpeedRefUnit = 0;
 8006d96:	6661      	str	r1, [r4, #100]	@ 0x64
         pHandle->bStageCnt++;
 8006d98:	f884 305e 	strb.w	r3, [r4, #94]	@ 0x5e
  bool retVal = true;
 8006d9c:	2001      	movs	r0, #1
      pHandle->ElSpeedTimerDpp = pHandle->_Super.speedConvFactor ;
 8006d9e:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8006da0:	bd10      	pop	{r4, pc}
                                  ((uint32_t)(pHandle->CurrentSpeedRefUnit >> 16)));
 8006da2:	0c1b      	lsrs	r3, r3, #16
        pHandle->ElSpeedTimerDpp = (uint32_t)(pHandle->_Super.speedConvFactor /
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
                                          ((int32_t)pHandle->ElSpeedTimerDpp * pHandle->hDirection));
 8006da8:	fb03 f101 	mul.w	r1, r3, r1
        pHandle->ElSpeedTimerDpp = (uint32_t)(pHandle->_Super.speedConvFactor /
 8006dac:	66a3      	str	r3, [r4, #104]	@ 0x68
        pHandle->_Super.hAvrMecSpeedUnit = (int16_t)((int32_t)pHandle->_Super.speedConvFactor /
 8006dae:	fb92 f2f1 	sdiv	r2, r2, r1
 8006db2:	80a2      	strh	r2, [r4, #4]
}
 8006db4:	bd10      	pop	{r4, pc}
      pHandle->CurrentSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006db6:	69a2      	ldr	r2, [r4, #24]
    else if (1U == pHandle->hPhaseRemainingTicks)
 8006db8:	d026      	beq.n	8006e08 <RUC_6S_Exec+0xc8>
      if (pHandle->bStageCnt != 0U)
 8006dba:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 8006dbe:	b10b      	cbz	r3, 8006dc4 <RUC_6S_Exec+0x84>
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006dc0:	6892      	ldr	r2, [r2, #8]
 8006dc2:	61a2      	str	r2, [r4, #24]
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006dc4:	b1ea      	cbz	r2, 8006e02 <RUC_6S_Exec+0xc2>
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10U;
 8006dc6:	8891      	ldrh	r1, [r2, #4]
 8006dc8:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
 8006dcc:	4b16      	ldr	r3, [pc, #88]	@ (8006e28 <RUC_6S_Exec+0xe8>)
        (void)SDC_ExecRamp(pHandle->pSDC, (int16_t)hPulse,
 8006dce:	8812      	ldrh	r2, [r2, #0]
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10U;
 8006dd0:	fb00 f101 	mul.w	r1, r0, r1
 8006dd4:	fba3 3101 	umull	r3, r1, r3, r1
        (void)SDC_ExecRamp(pHandle->pSDC, (int16_t)hPulse,
 8006dd8:	f341 01cf 	sbfx	r1, r1, #3, #16
 8006ddc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8006dde:	f7fb ff4f 	bl	8002c80 <SDC_ExecRamp>
         FinalMecSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006de2:	69a3      	ldr	r3, [r4, #24]
 8006de4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
         if (0U == pHandle->pCurrentPhaseParams->hDurationms)
 8006de8:	8818      	ldrh	r0, [r3, #0]
         FinalMecSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006dea:	040b      	lsls	r3, r1, #16
         if (0U == pHandle->pCurrentPhaseParams->hDurationms)
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d1c1      	bne.n	8006d74 <RUC_6S_Exec+0x34>
           pHandle->CurrentSpeedRefUnit = FinalMecSpeedRefUnit;
 8006df0:	66e3      	str	r3, [r4, #108]	@ 0x6c
           pHandle->hPhaseRemainingTicks = 0U;
 8006df2:	8260      	strh	r0, [r4, #18]
         pHandle->bStageCnt++;
 8006df4:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
  bool retVal = true;
 8006df8:	2001      	movs	r0, #1
         pHandle->bStageCnt++;
 8006dfa:	4402      	add	r2, r0
 8006dfc:	f884 205e 	strb.w	r2, [r4, #94]	@ 0x5e
 8006e00:	e7aa      	b.n	8006d58 <RUC_6S_Exec+0x18>
    if (0U == pHandle->CurrentSpeedRefUnit) 
 8006e02:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        retVal = false;
 8006e04:	4610      	mov	r0, r2
 8006e06:	e7a7      	b.n	8006d58 <RUC_6S_Exec+0x18>
      pHandle->CurrentSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006e08:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
      pHandle->hPhaseRemainingTicks--;
 8006e0c:	2200      	movs	r2, #0
      pHandle->CurrentSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006e0e:	041b      	lsls	r3, r3, #16
      pHandle->hPhaseRemainingTicks--;
 8006e10:	8262      	strh	r2, [r4, #18]
      pHandle->CurrentSpeedRefUnit = (uint32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit) * 65536U;
 8006e12:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8006e14:	e7a0      	b.n	8006d58 <RUC_6S_Exec+0x18>
             pHandle->ElAccSpeedRefUnit = FinalMecSpeedRefUnit - pHandle->CurrentSpeedRefUnit;
 8006e16:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8006e18:	1a19      	subs	r1, r3, r0
             pHandle->ElAccSpeedRefUnit /= ((uint32_t)pHandle->hPhaseRemainingTicks);
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006e20:	6662      	str	r2, [r4, #100]	@ 0x64
 8006e22:	e7e7      	b.n	8006df4 <RUC_6S_Exec+0xb4>
 8006e24:	10624dd3 	.word	0x10624dd3
 8006e28:	cccccccd 	.word	0xcccccccd

08006e2c <RUC_6S_IsAlignStageNow>:
    /* Nothing to do. */
  }
  else
  {
#endif
    if (0 == pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit)
 8006e2c:	6983      	ldr	r3, [r0, #24]
 8006e2e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  }
#endif
  return (align_flag);
}
 8006e32:	fab0 f080 	clz	r0, r0
 8006e36:	0940      	lsrs	r0, r0, #5
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop

08006e3c <RUC_6S_ObserverSpeedReached>:
  }
  else
  {
#endif
    uint32_t hStartUpElSpeed = (uint32_t)(pHandle->CurrentSpeedRefUnit >> 16);
    if (hStartUpElSpeed >= pHandle->hMinStartUpValidSpeed)
 8006e3c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
    uint32_t hStartUpElSpeed = (uint32_t)(pHandle->CurrentSpeedRefUnit >> 16);
 8006e40:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL_6STEP
  }
#endif
  return (retVal);
}
 8006e44:	4282      	cmp	r2, r0
 8006e46:	bf8c      	ite	hi
 8006e48:	2000      	movhi	r0, #0
 8006e4a:	2001      	movls	r0, #1
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8006e50:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop

08006e58 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_6S_Handle_t *pHandle, int16_t MecSpeedUnit)
{
 8006e58:	4603      	mov	r3, r0
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (MecSpeedUnit < 0)
    {
      hAux = -(MecSpeedUnit);
 8006e5a:	fa1f fc81 	uxth.w	ip, r1
    if (MecSpeedUnit < 0)
 8006e5e:	2900      	cmp	r1, #0
      hAux = -(MecSpeedUnit);
 8006e60:	bfb8      	it	lt
 8006e62:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecSpeedUnit = (uint16_t)MecSpeedUnit;
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006e66:	88d9      	ldrh	r1, [r3, #6]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006e68:	7880      	ldrb	r0, [r0, #2]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006e6a:	781a      	ldrb	r2, [r3, #0]
      hAux = -(MecSpeedUnit);
 8006e6c:	bfb8      	it	lt
 8006e6e:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006e72:	4561      	cmp	r1, ip
 8006e74:	d302      	bcc.n	8006e7c <SPD_IsMecSpeedReliable+0x24>
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006e76:	8919      	ldrh	r1, [r3, #8]
 8006e78:	4561      	cmp	r1, ip
 8006e7a:	d909      	bls.n	8006e90 <SPD_IsMecSpeedReliable+0x38>
      /* Nothing to do */
    }

    if (true == SpeedError)
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006e7c:	4290      	cmp	r0, r2
 8006e7e:	d804      	bhi.n	8006e8a <SPD_IsMecSpeedReliable+0x32>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8006e80:	1a10      	subs	r0, r2, r0
 8006e82:	bf18      	it	ne
 8006e84:	2001      	movne	r0, #1
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e86:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8006e88:	4770      	bx	lr
        bSpeedErrorNumber++;
 8006e8a:	3201      	adds	r2, #1
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	e7f7      	b.n	8006e80 <SPD_IsMecSpeedReliable+0x28>
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006e90:	4290      	cmp	r0, r2
 8006e92:	d9f5      	bls.n	8006e80 <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 8006e94:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 8006e96:	2001      	movs	r0, #1
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006e98:	701a      	strb	r2, [r3, #0]
}
 8006e9a:	4770      	bx	lr

08006e9c <memset>:
 8006e9c:	4402      	add	r2, r0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d100      	bne.n	8006ea6 <memset+0xa>
 8006ea4:	4770      	bx	lr
 8006ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eaa:	e7f9      	b.n	8006ea0 <memset+0x4>

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f000 f818 	bl	8006ef4 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	08007144 	.word	0x08007144
 8006ee8:	08007144 	.word	0x08007144
 8006eec:	08007144 	.word	0x08007144
 8006ef0:	08007148 	.word	0x08007148

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
